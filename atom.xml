<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark Miao</title>
  
  <subtitle>Mark’s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://markmiao.com/"/>
  <updated>2021-09-18T08:44:37.267Z</updated>
  <id>http://markmiao.com/</id>
  
  <author>
    <name>Mark</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域导致iframe无法使用Cookie</title>
    <link href="http://markmiao.com/2021/09/18/iframecookieerror/"/>
    <id>http://markmiao.com/2021/09/18/iframecookieerror/</id>
    <published>2021-09-18T06:30:50.000Z</published>
    <updated>2021-09-18T08:44:37.267Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中，有一个项目需要在我们的平台内嵌其他平台，用户信息需要共享。在使用iframe内嵌时，发现内嵌的页面用户校验失败。两个平台系统没有问题，单独访问时都可以。</p><p>测试时Chrome有问题，使用Firefox可以，Firefox更新之后有同样问题。那就是浏览器的问题了。</p><a id="more"></a><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>Chrome 80版本默认屏蔽了第三方Cookie，SameSite属性设置为Lax，防止跨域传送Cookie，防止 CSRF 攻击和用户追踪。<a href="http://www.ruanyifeng.com/blog/2019/09/cookie-samesite.html" target="_blank" rel="noopener">SameSite属性介绍</a></p><p>在接口请求响应头<code>Set-Cookie</code>有个提示：<code>此Set-Cookie标头未指定&quot;SameSite&quot;属性,它默认为&quot;SameSite=Lax,&quot;因为它来自跨站点响应，而不是对顶级导航的响应，必须为此此Set-Cookie设置&quot;SameSite=None&quot;才能实现跨站点使用</code></p><p>当设置<code>SameSite=None</code>时，必须同时设置<code>Secure</code>属性才有效，而且必须通过https发送cookie。</p><h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>我们的A平台，集成了B平台模块，A平台在iframe嵌套B平台时通过<code>url</code>将用户<code>token</code>传给B，B有用户<code>token</code>后，有自成一套的用户逻辑。</p><p>B平台使用<code>session</code>进行用户鉴权，会产生一条session id：<code>PHPSESSID</code>，这个会存储在cookie中，每次接口请求时由此鉴权。</p><p><code>PHPSESSID</code>这条cookie是后端php项目自动生成的，这就很难改它的<code>SameSite</code>和<code>Secure</code></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>先说方案：直接问题没解决，从根本解决了，B平台取消session鉴权方案，采用和A平台一致的token鉴权，真釜底抽薪</strong></p><p><strong>另一种方案：两平台放到同一域下，不跨域自然没有该问题了。</strong></p><p>网上有很多临时解决办法，比如修改<code>chrome://flags/</code>里的配置，手动设置这条cookie的<code>SameSite</code>和<code>Secure</code>，这些在开发时可作为临时手段，生产环境就扯淡了。</p><p>生产环境需要通过代码修改<code>SameSite</code>和<code>Secure</code>，我是个php纯小白，来解决这个问题：</p><h3 id="修改服务端源码"><a href="#修改服务端源码" class="headerlink" title="修改服务端源码"></a>修改服务端源码</h3><p>在php服务端代码里设置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_COOKIE[<span class="string">"PHPSESSID"</span>])) &#123;</span><br><span class="line">   setcookie(<span class="string">"PHPSESSID"</span>, $_COOKIE[<span class="string">"PHPSESSID"</span>], [<span class="string">'samesite'</span> =&gt; <span class="string">'None'</span>, <span class="string">'secure'</span> =&gt; <span class="keyword">true</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方式是可以将PHPSESSID这条cookie的SameSite设置为None，Secure设置为true。之后iframe嵌套也完全可以发送cookie。</p><p>前提是这段代码加到哪里？必须在<code>$_COOKIE[&quot;PHPSESSID&quot;]</code>有值时才能修改属性。PHPSESSID是自动产生的，说是在<code>session_start();</code>方法调用后创建，但我加在这后面也完全无效。</p><h3 id="设置header"><a href="#设置header" class="headerlink" title="设置header"></a>设置header</h3><p>在根目录的<code>index.php</code>文件中设置header</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">header(<span class="string">'Set-Cookie:'</span>.<span class="string">'PHPSESSID='</span>.session_id().<span class="string">';Path=/;SameSite=None;Secure=true;'</span>);</span><br></pre></td></tr></table></figure><p>和上面同样的问题，<code>session_id()</code>根本不能获取到实际的sessionid。</p><h3 id="设置session属性"><a href="#设置session属性" class="headerlink" title="设置session属性"></a>设置session属性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ini_set(<span class="string">'session.cookie_secure'</span>, <span class="string">'On'</span>);</span><br><span class="line">ini_set(<span class="string">'session.cookie_samesite'</span>, <span class="string">'None'</span>);</span><br></pre></td></tr></table></figure><p>这个方法在php的<code>index.php</code>文件中添加过，在php的配置文件<code>php.ini</code>中也添加过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">session.cookie_samesite = <span class="string">"None"</span></span><br><span class="line">session.cookie_secure = On</span><br></pre></td></tr></table></figure><h3 id="设置Nginx配置项"><a href="#设置Nginx配置项" class="headerlink" title="设置Nginx配置项"></a>设置Nginx配置项</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_cookie_path</span> / <span class="string">"/; httponly; secure; SameSite=None"</span>;</span><br></pre></td></tr></table></figure><p>在nginx配置项里增加这条配置，还是没能解决。</p><h3 id="设置响应头"><a href="#设置响应头" class="headerlink" title="设置响应头"></a>设置响应头</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">'Set-Cookie'</span>, <span class="string">'HttpOnly;Secure;SameSite=None'</span>)</span><br></pre></td></tr></table></figure><p>这个没有试验。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/yhyc812/article/details/108623844" target="_blank" rel="noopener">chrome浏览器跨域Cookie的SameSite问题导致访问iframe内嵌页面异常</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中，有一个项目需要在我们的平台内嵌其他平台，用户信息需要共享。在使用iframe内嵌时，发现内嵌的页面用户校验失败。两个平台系统没有问题，单独访问时都可以。&lt;/p&gt;
&lt;p&gt;测试时Chrome有问题，使用Firefox可以，Firefox更新之后有同样问题。那就是浏览器的问题了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://markmiao.com/categories/web/"/>
    
    
      <category term="web" scheme="http://markmiao.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记6-json与model</title>
    <link href="http://markmiao.com/2021/06/04/flutter6/"/>
    <id>http://markmiao.com/2021/06/04/flutter6/</id>
    <published>2021-06-04T06:30:50.000Z</published>
    <updated>2021-06-04T04:06:26.330Z</updated>
    
    <content type="html"><![CDATA[<p>开发中json数据是最常见的，在具体使用时，通常会将json转为model。这样能保证类型安全，编译器也能自动补全，提示编译异常，用起来方便又安全。在flutter中如何进行json和model的相互转换呢？</p><a id="more"></a><h2 id="简单的json"><a href="#简单的json" class="headerlink" title="简单的json"></a>简单的json</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var people = &#123;"name": "mark","age": 18&#125;;</span><br></pre></td></tr></table></figure><p>定一个model类，并实现转换方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeopleModel</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  PeopleModel(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age);</span><br><span class="line">  <span class="comment">/// <span class="markdown">json -&gt; model</span></span></span><br><span class="line">  PeopleModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    name = json[<span class="string">'name'</span>];</span><br><span class="line">    age = json[<span class="string">'age'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/// <span class="markdown">model -&gt; json</span></span></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; data = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;();</span><br><span class="line">    dict[<span class="string">'name'</span>] = <span class="keyword">this</span>.name;</span><br><span class="line">    dict[<span class="string">'age'</span>] = <span class="keyword">this</span>.age;</span><br><span class="line">    <span class="keyword">return</span> dict;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;<span class="string">"name"</span>: <span class="string">"mark"</span>,<span class="string">"age"</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> peopleModel = PeopleModel.fromJson(people);</span><br><span class="line"><span class="keyword">var</span> peopleJson = peopleModel.toJson();</span><br></pre></td></tr></table></figure><h2 id="嵌套json"><a href="#嵌套json" class="headerlink" title="嵌套json"></a>嵌套json</h2><p>在开发中嵌套json非常常见，自己写model类、写转换方法不仅麻烦还容易写错。使用<a href="https://pub.dartlang.org/packages/json_serializable" target="_blank" rel="noopener">json_serializable</a>，可以自动生成json序列化代码，非常方便。</p><p>嵌套json：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var people = &#123;"name": "mark","age": 18, "school": &#123;"name": "北大", "science": "计算机", "classes": 3&#125;&#125;;</span><br></pre></td></tr></table></figure><p>在<code>pubspec.yaml</code>添加依赖，执行<code>flutter packages get</code>（vscode文件保存会自动执行）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">sdk:</span> <span class="string">"&gt;=2.12.0 &lt;3.0.0"</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">json_annotation:</span> <span class="string">^4.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">json_serializable:</span> <span class="string">^4.1.3</span> <span class="comment"># json序列化</span></span><br><span class="line">  <span class="attr">build_runner:</span> <span class="string">^2.0.4</span> <span class="comment"># 自动生成代码</span></span><br></pre></td></tr></table></figure><p>我使用的Flutter 2.2.1，Dart 2.13.1，<code>json_annotation</code>，4.0以上版本，需要指定sdk “&gt;=2.12.0 &lt;3.0.0”。不然会报错，详情见<a href="https://github.com/google/json_serializable.dart/issues/823" target="_blank" rel="noopener">issues/832</a></p><p>创建model类：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:json_annotation/json_annotation.dart'</span>;</span><br><span class="line"><span class="keyword">part</span> <span class="string">'people_model.g.dart'</span>; <span class="comment">// 创建类的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeopleModel</span> </span>&#123; <span class="comment">// 类名</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  SchoolMode school;</span><br><span class="line"></span><br><span class="line">  PeopleModel(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.school);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> PeopleModel.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$PeopleModelFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$PeopleModelToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@JsonSerializable</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolMode</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> science;</span><br><span class="line">  <span class="built_in">int</span> classes;</span><br><span class="line">  </span><br><span class="line">  SchoolMode(<span class="keyword">this</span>.name, <span class="keyword">this</span>.science, <span class="keyword">this</span>.classes);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">factory</span> SchoolMode.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) =&gt; _$SchoolModeFromJson(json);</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; toJson() =&gt; _$SchoolModeToJson(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令：<code>flutter pub run build_runner build --delete-conflicting-outputs</code>，会生成<code>people_model.g.dart</code>文件，这里是model的序列化代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GENERATED CODE - DO NOT MODIFY BY HAND</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of <span class="string">'people_model.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"><span class="comment">// JsonSerializableGenerator</span></span><br><span class="line"><span class="comment">// **************************************************************************</span></span><br><span class="line"></span><br><span class="line">PeopleModel _$PeopleModelFromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">return</span> PeopleModel(</span><br><span class="line">    json[<span class="string">'name'</span>] <span class="keyword">as</span> <span class="built_in">String</span>,</span><br><span class="line">    json[<span class="string">'age'</span>] <span class="keyword">as</span> <span class="built_in">int</span>,</span><br><span class="line">    SchoolMode.fromJson(json[<span class="string">'school'</span>] <span class="keyword">as</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; _$PeopleModelToJson(PeopleModel instance) =&gt;</span><br><span class="line">    &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">'name'</span>: instance.name,</span><br><span class="line">      <span class="string">'age'</span>: instance.age,</span><br><span class="line">      <span class="string">'school'</span>: instance.school,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">SchoolMode _$SchoolModeFromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">return</span> SchoolMode(</span><br><span class="line">    json[<span class="string">'name'</span>] <span class="keyword">as</span> <span class="built_in">String</span>,</span><br><span class="line">    json[<span class="string">'science'</span>] <span class="keyword">as</span> <span class="built_in">String</span>,</span><br><span class="line">    json[<span class="string">'classes'</span>] <span class="keyword">as</span> <span class="built_in">int</span>,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; _$SchoolModeToJson(SchoolMode instance) =&gt;</span><br><span class="line">    &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123;</span><br><span class="line">      <span class="string">'name'</span>: instance.name,</span><br><span class="line">      <span class="string">'science'</span>: instance.science,</span><br><span class="line">      <span class="string">'classes'</span>: instance.classes,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;<span class="string">"name"</span>: <span class="string">"mark"</span>,<span class="string">"age"</span>: <span class="number">18</span>, <span class="string">"school"</span>: &#123;<span class="string">"name"</span>: <span class="string">"北大"</span>, <span class="string">"science"</span>: <span class="string">"计算机"</span>, <span class="string">"classes"</span>: <span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> peopleModel = PeopleModel.fromJson(people);</span><br><span class="line"><span class="built_in">print</span>(peopleModel.school.name); <span class="comment">//输出 北大</span></span><br><span class="line"><span class="keyword">var</span> peopleJson = peopleModel.toJson(); <span class="comment">//输出 &#123;name: mark, age: 18, school: Instance of 'SchoolMode'&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注：嵌套json的model在toJson()时，转换不彻底，里面的model并没有转换为json。</strong></p><p>Dart2.0之后引入了<code>空安全</code>，在定义模型类时，定义空类型需要<code>String? name;</code>，这点和swift类似。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发中json数据是最常见的，在具体使用时，通常会将json转为model。这样能保证类型安全，编译器也能自动补全，提示编译异常，用起来方便又安全。在flutter中如何进行json和model的相互转换呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发笔记四</title>
    <link href="http://markmiao.com/2021/05/13/ios4/"/>
    <id>http://markmiao.com/2021/05/13/ios4/</id>
    <published>2021-05-13T06:31:49.000Z</published>
    <updated>2021-05-13T09:32:46.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MJRefresh跳动bug"><a href="#MJRefresh跳动bug" class="headerlink" title="MJRefresh跳动bug"></a>MJRefresh跳动bug</h2><p>iOS11之后，UITableView在刷新列表时<code>contentOffset</code>会发生变化，MJRefresh监听了<code>contentOffset</code>变化，会导致上拉加载更多组件闪动出现。我升级到最新版本<code>v3.5.0</code>，问题依旧存在，等官方修复。暂时解决办法：</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tableView.estimatedRowHeight = <span class="number">0</span></span><br><span class="line">tableView.estimatedSectionHeaderHeight = <span class="number">0</span></span><br><span class="line">tableView.estimatedSectionFooterHeight = <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="系统拍照裁剪不可拖动"><a href="#系统拍照裁剪不可拖动" class="headerlink" title="系统拍照裁剪不可拖动"></a>系统拍照裁剪不可拖动</h2><p>我们在使用<code>UIImagePickerController</code>做照片选择器时，<code>sourceType = .camera</code>去拍照，设置<code>allowsEditing = true</code>拍完照的时候，可拖动照片裁剪为正方形，再使用裁剪后的照片。</p><p>官方bug，裁剪时无法拖动。这个bug从iOS6到现在的iOS14一直存在，不知道apple啥时候能解决。</p><p>问题讨论见：<a href="https://stackoverflow.com/questions/12630155/uiimagepicker-allowsediting-stuck-in-center" target="_blank" rel="noopener">UIImagePicker allowsEditing stuck in center</a></p><p>解决方法：通过<code>UIImagePickerController</code>的拓展，重置<code>UIScrollView</code>的<code>contentOffset</code> </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 修复拍照切割时不可拖动到边的系统bug</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImagePickerController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fixCannotMoveEditingBox</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> cropView = cropView,</span><br><span class="line">           <span class="keyword">let</span> scrollView = scrollView,</span><br><span class="line">           scrollView.contentOffset.y == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> top = cropView.frame.minY <span class="comment">//+ self.view.safeAreaInsets.top</span></span><br><span class="line">            <span class="keyword">let</span> bottom = scrollView.frame.height - cropView.frame.height - top</span><br><span class="line">            scrollView.contentInset = <span class="type">UIEdgeInsets</span>(top: top, <span class="keyword">left</span>: <span class="number">0</span>, bottom: bottom, <span class="keyword">right</span>: <span class="number">0</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> offset: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> scrollView.contentSize.height &gt; scrollView.contentSize.width &#123;</span><br><span class="line">                offset = <span class="number">0.5</span> * (scrollView.contentSize.height - scrollView.contentSize.width)</span><br><span class="line">            &#125;</span><br><span class="line">            scrollView.contentOffset = <span class="type">CGPoint</span>(x: <span class="number">0</span>, y: -top + offset)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + <span class="number">0.1</span>) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">self</span>?.fixCannotMoveEditingBox()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> cropView: <span class="type">UIView?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findCropView(from: <span class="keyword">self</span>.view)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> scrollView: <span class="type">UIScrollView?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findScrollView(from: <span class="keyword">self</span>.view)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findCropView</span><span class="params">(from view: UIView)</span></span> -&gt; <span class="type">UIView?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> width = <span class="type">UIScreen</span>.main.bounds.width</span><br><span class="line">        <span class="keyword">let</span> size = view.bounds.size</span><br><span class="line">        <span class="keyword">if</span> width == size.height, width == size.height &#123;</span><br><span class="line">            <span class="keyword">return</span> view</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> view <span class="keyword">in</span> view.subviews &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> cropView = findCropView(from: view) &#123;</span><br><span class="line">                <span class="keyword">return</span> cropView</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">findScrollView</span><span class="params">(from view: UIView)</span></span> -&gt; <span class="type">UIScrollView?</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> scrollView = view <span class="keyword">as</span>? <span class="type">UIScrollView</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> scrollView</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> view <span class="keyword">in</span> view.subviews &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> scrollView = findScrollView(from: view) &#123;</span><br><span class="line">                <span class="keyword">return</span> scrollView</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建<code>UIImagePickerController</code>时，调用拓展方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imagePicker = <span class="type">UIImagePickerController</span>()</span><br><span class="line">imagePicker.sourceType = .camera</span><br><span class="line">imagePicker.fixCannotMoveEditingBox()</span><br><span class="line">imagePicker.allowsEditing = <span class="literal">true</span></span><br><span class="line">present(imagePicker, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MJRefresh跳动bug&quot;&gt;&lt;a href=&quot;#MJRefresh跳动bug&quot; class=&quot;headerlink&quot; title=&quot;MJRefresh跳动bug&quot;&gt;&lt;/a&gt;MJRefresh跳动bug&lt;/h2&gt;&lt;p&gt;iOS11之后，UITableView在刷新列表时&lt;code&gt;contentOffset&lt;/code&gt;会发生变化，MJRefresh监听了&lt;code&gt;contentOffset&lt;/code&gt;变化，会导致上拉加载更多组件闪动出现。我升级到最新版本&lt;code&gt;v3.5.0&lt;/code&gt;，问题依旧存在，等官方修复。暂时解决办法：&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>个人开发者的吐槽2</title>
    <link href="http://markmiao.com/2021/03/02/kaifazhezongjietucao2/"/>
    <id>http://markmiao.com/2021/03/02/kaifazhezongjietucao2/</id>
    <published>2021-03-02T00:00:00.000Z</published>
    <updated>2021-03-02T02:26:47.217Z</updated>
    
    <content type="html"><![CDATA[<p>2017年时写过一篇<a href="https://markmiao.com/2017/12/26/kaifazhezongjietucao/">个人开发者吐槽</a>，就当年的年终总结、开发app的收益和入账问题吐槽。3年多过去了，独立作品就上了一个<a href="https://apps.apple.com/cn/app/mremind-%E6%8F%90%E9%86%92%E4%BD%A0%E6%AF%8F%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B/id1449698904?mt=12" target="_blank" rel="noopener">mRemind</a>，app的收益也是寥寥无几，真是太惭愧了。这次就不吐槽自己了，主要说一下入账问题。</p><a id="more"></a><p>上一篇文章的评论里我加了两个后续：</p><p>2020-04-22</p><blockquote><p>后续：以后入账都没有去银行办理，每次银行都会给我发邮件让我提供证明，我会提供付费应用协议和财报的截图，就可以顺利入账了。听说招行卡不用提供资料直接入账。<br>我的是美元入账，前段时间苹果弄错了币种，将其他币种金额按美元打给了开发者，中国开发者收益翻了6倍，太疯狂了，我当月没有入账错过这波福利。当然最后苹果处理了，貌似后续该入的账都不会打钱了，直至抵扣完。</p></blockquote><p>2020-12-08</p><blockquote><p>后续的后续：本月有入账，中国银行再次刁难我，说我发的付费应用协议是空白的，说如果全是英文的协议他们看不懂我还得提供翻译，又让我提供和苹果公司的劳动合同，说现在外汇入账查的严了。一气之下让退回了，一个月内如果无法入账会自动退回。已换招行卡，看下月入账情况吧。</p></blockquote><p>这两个后续大概说明了情况，之前每次有入账，中国银行都会打电话向我询问，我通过邮件提供付费应用协议和财报截图，然后就可以顺利美元入账。</p><p>直到去年12月份，中国银行说我提供的《付费应用协议》PDF文件是空白的，我尝试了各种方式转PDF格式，打压缩包等，反复发了十多封邮件，中国银行一直说他们的电脑打开PDF文件是空白的。</p><p>我和他们说：“这就是个英文的协议，我之前也发过，都能顺利入账，为啥这次不行了？”对方给我的答复是：看不到之前的邮件记录，现在外汇入账查的严了，都必须提供证明，如果是纯英文的，他们看不懂，我还得提供翻译。我上文吐槽的悲催开发者竟是我自己。</p><p>PDF是空白页，转成图片总可以吧？我把几十页的PDF文件转为PNG图片打包发过去了。对方告诉我一打开他们的电脑就崩掉了。啥电脑啊，几十张图片就干崩了？转念一想，卧槽！对方不会告我攻击国有银行吧？</p><p>对方告诉我，其他开发者都能提供正确的证明。至于是啥样的证明？对方不告诉我。这就无解了，我总不能屁颠屁颠去柜台办理吧，再让我现场翻译英文协议可咋办？</p><p>一个月过去了，我还是没能让中国银行看到《付费应用协议》，汇款退回给苹果了。</p><p><img src="https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/WX20210302-100227%402x.png" alt="汇款退回"></p><p>我是真想不明白，给国家增加美元外汇还这么困难？好吧，我理解中国银行的制度限制，不理解也没辙。</p><p>我之前一直懒得换入账银行，觉得中国银行也就是发个邮件的事，也能顺利入账。现在看不换不行了，十分钟换了招商银行。之前看有人说招商银行能直接入账，也有人说不行，具体只能看下月入账情况。</p><p>3月2日9:00，我收到了招商银行美元现汇入账短信，同时招行app也通知了入账信息，app里还提供了实时汇率，折算人民币，招行太香了，没联系我提供任何资料，直接入账。之前中行入账别说短信了，app通知都没有。</p><p>为什么不早换呢？为什么不早换呢？为什么不早换呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年时写过一篇&lt;a href=&quot;https://markmiao.com/2017/12/26/kaifazhezongjietucao/&quot;&gt;个人开发者吐槽&lt;/a&gt;，就当年的年终总结、开发app的收益和入账问题吐槽。3年多过去了，独立作品就上了一个&lt;a href=&quot;https://apps.apple.com/cn/app/mremind-%E6%8F%90%E9%86%92%E4%BD%A0%E6%AF%8F%E4%B8%80%E4%BB%B6%E5%B0%8F%E4%BA%8B/id1449698904?mt=12&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mRemind&lt;/a&gt;，app的收益也是寥寥无几，真是太惭愧了。这次就不吐槽自己了，主要说一下入账问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="程序人生" scheme="http://markmiao.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="短文" scheme="http://markmiao.com/tags/%E7%9F%AD%E6%96%87/"/>
    
      <category term="AppStore" scheme="http://markmiao.com/tags/AppStore/"/>
    
  </entry>
  
  <entry>
    <title>iOS导航栏一些问题</title>
    <link href="http://markmiao.com/2021/02/25/navigation/"/>
    <id>http://markmiao.com/2021/02/25/navigation/</id>
    <published>2021-02-25T06:31:49.000Z</published>
    <updated>2021-02-25T10:00:19.751Z</updated>
    
    <content type="html"><![CDATA[<h2 id="禁止iOS14返回按钮菜单"><a href="#禁止iOS14返回按钮菜单" class="headerlink" title="禁止iOS14返回按钮菜单"></a>禁止iOS14返回按钮菜单</h2><p>iOS14之后，长按返回按钮会弹出可返回的控制器。iOS14，<code>UIBarButtonItem</code> 新增了一个<code>menu</code>类型，可新建子类，重写<code>menu</code>的set方法</p><a id="more"></a><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BackBarButtonItem</span>: <span class="title">UIBarButtonItem</span> </span>&#123;</span><br><span class="line">    <span class="meta">@available</span>(iOS <span class="number">14.0</span>, *)</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> menu: <span class="type">UIMenu?</span> &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="comment">// Don't set the menu here</span></span><br><span class="line">            <span class="comment">// super.menu = menu</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.menu</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>BackBarButtonItem</code>创建<code>backBarButtonItem</code> ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> backItem = <span class="type">BackBarButtonItem</span>(title: <span class="string">""</span>, style: .plain, target: <span class="literal">nil</span>, action: <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">self</span>.navigationItem.backBarButtonItem = backItem</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.coder.work/article/7148498" target="_blank" rel="noopener">ios - 是否可以在iOS 14+中禁用后退导航菜单？</a></p><h2 id="拦截系统导航栏返回操作"><a href="#拦截系统导航栏返回操作" class="headerlink" title="拦截系统导航栏返回操作"></a>拦截系统导航栏返回操作</h2><p>swift通过分类实现：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 导航返回协议</span></span><br><span class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">NavigationProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// 导航将要返回方法</span></span><br><span class="line">    <span class="comment">/// - Returns: true: 返回上一界面， false: 禁止返回</span></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationShouldPopMethod</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIViewController</span>: <span class="title">NavigationProtocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">navigationShouldPopMethod</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UINavigationController</span>: <span class="title">UINavigationBarDelegate</span>, <span class="title">UIGestureRecognizerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationBar</span><span class="params">(<span class="number">_</span> navigationBar: UINavigationBar, shouldPop item: UINavigationItem)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> viewControllers.<span class="built_in">count</span> &lt; (navigationBar.items?.<span class="built_in">count</span>)! &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> shouldPop = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> vc: <span class="type">UIViewController</span> = topViewController!</span><br><span class="line">        <span class="keyword">if</span> vc.responds(to: #selector(navigationShouldPopMethod)) &#123;</span><br><span class="line">            shouldPop = vc.navigationShouldPopMethod()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> shouldPop &#123;</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> subview <span class="keyword">in</span> navigationBar.subviews &#123;</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0.0</span> &lt; subview.alpha &amp;&amp; subview.alpha &lt; <span class="number">1.0</span> &#123;</span><br><span class="line">                    <span class="type">UIView</span>.animate(withDuration: <span class="number">0.25</span>) &#123;</span><br><span class="line">                        subview.alpha = <span class="number">1.0</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">gestureRecognizerShouldBegin</span><span class="params">(<span class="number">_</span> gestureRecognizer: UIGestureRecognizer)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> children.<span class="built_in">count</span> == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> topViewController?.responds(to: #selector(navigationShouldPopMethod)) != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> topViewController!.navigationShouldPopMethod()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要拦截返回的控制器中重写该方法：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">navigationShouldPopMethod</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span> <span class="comment">//拦截返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/hedongStudyRecord/p/11120890.html" target="_blank" rel="noopener">iOS 拦截系统导航栏返回按钮事件</a></p><h2 id="UIBarButtonItem按钮图片颜色"><a href="#UIBarButtonItem按钮图片颜色" class="headerlink" title="UIBarButtonItem按钮图片颜色"></a>UIBarButtonItem按钮图片颜色</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(named: <span class="string">"imagename"</span>)?.withRenderingMode(.alwaysOriginal) <span class="comment">//设置图片mode</span></span><br><span class="line"><span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(image: image, style: .plain, target: <span class="keyword">self</span>, action: #selector(itemClick(item:)))</span><br></pre></td></tr></table></figure><h2 id="导航栏透明"><a href="#导航栏透明" class="headerlink" title="导航栏透明"></a>导航栏透明</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.navigationBar.setBackgroundImage(<span class="type">UIImage</span>(), <span class="keyword">for</span>: .<span class="keyword">default</span>)</span><br><span class="line"><span class="keyword">self</span>.navigationBar.shadowImage = <span class="type">UIImage</span>()</span><br></pre></td></tr></table></figure><h2 id="自定义导航栏按钮"><a href="#自定义导航栏按钮" class="headerlink" title="自定义导航栏按钮"></a>自定义导航栏按钮</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> rightBtn = <span class="type">CustomButton</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">30</span>, height: <span class="number">40</span>))</span><br><span class="line">rightBtn.addTarget(<span class="keyword">self</span>, action: #selector(itemDeleteBtnClick), <span class="keyword">for</span>: .touchUpInside)</span><br><span class="line"><span class="keyword">self</span>.navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(customView: rightBtn)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;禁止iOS14返回按钮菜单&quot;&gt;&lt;a href=&quot;#禁止iOS14返回按钮菜单&quot; class=&quot;headerlink&quot; title=&quot;禁止iOS14返回按钮菜单&quot;&gt;&lt;/a&gt;禁止iOS14返回按钮菜单&lt;/h2&gt;&lt;p&gt;iOS14之后，长按返回按钮会弹出可返回的控制器。iOS14，&lt;code&gt;UIBarButtonItem&lt;/code&gt; 新增了一个&lt;code&gt;menu&lt;/code&gt;类型，可新建子类，重写&lt;code&gt;menu&lt;/code&gt;的set方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Vue与App交互</title>
    <link href="http://markmiao.com/2020/12/11/vuenative/"/>
    <id>http://markmiao.com/2020/12/11/vuenative/</id>
    <published>2020-12-11T06:31:49.000Z</published>
    <updated>2020-12-11T07:51:44.992Z</updated>
    
    <content type="html"><![CDATA[<p>app开发经常会内嵌h5页面，原生app与h5页面相互调用，完成数据传递。一套h5页面能多端运行，实现跨平台，这就是常见的Hybrid app（混合app）</p><a id="more"></a><h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><h3 id="通过-url-向-vue-传参"><a href="#通过-url-向-vue-传参" class="headerlink" title="通过 url 向 vue 传参"></a>通过 url 向 vue 传参</h3><p>在原生WKWebView中加载URL时，以拼接方式向h5页面传参：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlStr = <span class="string">"https://markmiao.com/app/request?data=123"</span></span><br><span class="line"><span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: urlStr)!)</span><br><span class="line">webView.load(request)</span><br></pre></td></tr></table></figure><p>vue中接收传递数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.data &#x3D; this.$route.query.data</span><br></pre></td></tr></table></figure><p>也可以通过<code>&amp;</code>符号拼接多个参数传递：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlStr = <span class="string">"https://markmiao.com/app/request?data=123&amp;index=1"</span></span><br></pre></td></tr></table></figure><p>URL是有长度限制的，如果要传递的数据很多，可以采用<code>evaluateJavaScript</code>，在原生中调用vue中的js方法传递数据。</p><h3 id="evaluateJavaScript-向-vue-传参"><a href="#evaluateJavaScript-向-vue-传参" class="headerlink" title="evaluateJavaScript 向 vue 传参"></a>evaluateJavaScript 向 vue 传参</h3><p><code>evaluateJavaScript</code>接收的是一个字符串方法名，传参时需要将json对象的参数转为json字符串，用单引号包裹放到字符串方法中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> funStr = <span class="string">"vueFunctionStr('\(jsonStr)')"</span> <span class="comment">//vueFunctionStr是vue中的方法名，jsonStr是json字符串的传参</span></span><br><span class="line"><span class="keyword">self</span>.webView.evaluateJavaScript(funStr) &#123; (any, error) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="type">XDLog</span>(<span class="string">"调用失败 = \(error.debugDescription)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue的方法接收数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123; <span class="comment">// 在window中注册方法</span></span><br><span class="line">  <span class="built_in">window</span>.vueFunctionStr = <span class="keyword">this</span>.vueFunctionStr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vueFunctionStr (jsonStr) &#123;</span><br><span class="line">  <span class="keyword">let</span> jsonDict = <span class="built_in">JSON</span>.parse(jsonStr)</span><br><span class="line">  <span class="built_in">console</span>.log(jsonDict)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="vue-向-WKWebView传参"><a href="#vue-向-WKWebView传参" class="headerlink" title="vue 向 WKWebView传参"></a>vue 向 WKWebView传参</h3><p>h5也可以通过调用原生方法传参，<code>WKWebView</code>需要添加方法监听，<code>vueFunction</code>是要监听的方法名。</p><p>在 <code>WKScriptMessageHandler</code>方法中接收传参，<code>message.name</code>是方法名，<code>message.body</code>是传递参数：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加监听</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillAppear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line"><span class="keyword">super</span>.viewWillAppear(animated)</span><br><span class="line"><span class="keyword">self</span>.webView.configuration.userContentController.add(<span class="keyword">self</span>, name: <span class="string">"vueFunction"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除监听</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillDisappear</span><span class="params">(<span class="number">_</span> animated: Bool)</span></span> &#123;</span><br><span class="line"><span class="keyword">super</span>.viewWillDisappear(animated)</span><br><span class="line">    <span class="keyword">self</span>.webView.configuration.userContentController.removeScriptMessageHandler(forName: <span class="string">"vueFunction"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">WebViewController</span>: <span class="title">WKScriptMessageHandler</span>, <span class="title">WKNavigationDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userContentController</span><span class="params">(<span class="number">_</span> userContentController: WKUserContentController, didReceive message: WKScriptMessage)</span></span> &#123;</span><br><span class="line">        <span class="type">XDLog</span>(<span class="string">"vue调用原生 = \(message.name), \(message.body)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取h5网页title</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">webView</span><span class="params">(<span class="number">_</span> webView: WKWebView, didFinish navigation: WKNavigation!)</span></span> &#123;</span><br><span class="line">        webView.evaluateJavaScript(<span class="string">"document.title"</span>) &#123; (title, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> titleStr = title <span class="keyword">as</span>? <span class="type">String</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.navigationItem.title = titleStr</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.navigationItem.title = <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在vue中通过<code>window.webkit</code>调用原生方法，传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.webkit) &#123;</span><br><span class="line"><span class="comment">// vueFunction 是在WKWebView中监听的方法名，postMessage后面是要传递的json对象参数</span></span><br><span class="line">  <span class="built_in">window</span>.webkit.messageHandlers.vueFunction.postMessage(&#123;</span><br><span class="line">    data: <span class="number">123</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p>uni-app是一款跨平台框架，可以以一套代码编译成iOS/Android/各种小程序，一套代码多端运行。</p><p>uni-app完全是vue的开发方式，API高度类似小程序，相比原生性能和拓展性都是问题。框架本身也存在一些bug，好在官方迭代很快。</p><h3 id="通过-url-向-vue-传参-1"><a href="#通过-url-向-vue-传参-1" class="headerlink" title="通过 url 向 vue 传参"></a>通过 url 向 vue 传参</h3><p>uni-app有<code>web-view</code>组件，用来加载网页，可以通过<code>src</code>的URL地址向vue传参：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-view src&#x3D;&quot;https:&#x2F;&#x2F;markmiao.com&#x2F;app&#x2F;request?data&#x3D;123&quot;&gt;&lt;&#x2F;web-view&gt;</span><br></pre></td></tr></table></figure><p>vue接收参数和上面一样，也是通过<code>this.$route.query.data</code></p><h3 id="vue-向-uni-app-传参"><a href="#vue-向-uni-app-传参" class="headerlink" title="vue 向 uni-app 传参"></a>vue 向 uni-app 传参</h3><p>参考文章：<a href="https://ask.dcloud.net.cn/article/35083" target="_blank" rel="noopener">在web-view加载的本地及远程HTML中调用uni的API及网页和vue页面通讯</a></p><p>vue 向 uni-app 传参需要引入uni-app提供的sdk，vue中只需要在<code>public/index.html</code>文件中引入即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://js.cdn.aliyun.dcloud.net.cn/dev/uni-app/uni.webview.1.5.1.js?rev=1.0.0"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果要兼容小程序，还需要引入微信js-sdk，如果引入需要在前面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//res.wx.qq.com/open/js/jweixin-1.4.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在vue中调用<code>uni.postMessage</code>方法向uni-app传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uni.postMessage(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    to: <span class="string">'appFunction'</span>, <span class="comment">//方法名</span></span><br><span class="line">    data: &#123; <span class="comment">//传递参数</span></span><br><span class="line">      data: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在uni-app中的 <code>getMessage</code>方法中得到传参：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getMessage: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dataDict = e.detail.data[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"方法名 = "</span> + dataDict.to + <span class="string">"传参 = "</span> + dataDict.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;app开发经常会内嵌h5页面，原生app与h5页面相互调用，完成数据传递。一套h5页面能多端运行，实现跨平台，这就是常见的Hybrid app（混合app）&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue" scheme="http://markmiao.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>火星坐标转GPS坐标</title>
    <link href="http://markmiao.com/2020/12/06/map2/"/>
    <id>http://markmiao.com/2020/12/06/map2/</id>
    <published>2020-12-06T06:31:49.000Z</published>
    <updated>2020-12-10T07:31:54.641Z</updated>
    
    <content type="html"><![CDATA[<p>火星坐标（GCJ02）转GPS坐标（WGS84）没有标准的方法，网上倒是有很多第三方的。最近在做一款产品，要求非常精确的将火星坐标转换成GPS坐标。</p><a id="more"></a><p>我试过很多种方法，<a href="https://github.com/JackZhouCn/JZLocationConverter-Swift" target="_blank" rel="noopener">JZLocationConverter-Swift</a> 算误差比较小了，有几米的误差。我找到另一种方法：二分法取中心点，逐步逼近。几乎可以算是零误差了，但有个问题。</p><h2 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h2><p>先说这个转换方法的逻辑，步骤如下：</p><ol><li><p>火星坐标 A 转换GPS坐标 A1，对 A 的经纬度（lng，lat）分别 + - 0.5，得到4个值:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">最小经度</span> <span class="attr">minLng:</span> <span class="string">lng</span> <span class="bullet">-</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">最大经度</span> <span class="attr">maxLng:</span> <span class="string">lng</span> <span class="string">+</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">最小纬度</span> <span class="attr">minLat:</span> <span class="string">lat</span> <span class="bullet">-</span> <span class="number">0.5</span></span><br><span class="line"><span class="string">最大纬度</span> <span class="attr">maxLat:</span> <span class="string">lat</span> <span class="string">+</span> <span class="number">0.5</span></span><br></pre></td></tr></table></figure></li><li><p>可以组成4个火星坐标：*<em>注：方位只在东北半球适用，火星坐标也只中国用 : ( *</em></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">左下角：a (<span class="keyword">min</span>Lng, <span class="keyword">min</span>Lat)</span><br><span class="line">右下角：b (<span class="keyword">max</span>Lng, <span class="keyword">min</span>Lat)</span><br><span class="line">左上角：c (<span class="keyword">min</span>Lng, <span class="keyword">max</span>Lat)</span><br><span class="line">右上角：d (<span class="keyword">max</span>Lng, <span class="keyword">max</span>Lat)</span><br></pre></td></tr></table></figure></li><li><p>这4个坐标点得到一个正方形区域 M，A 是中心点，它们都属于火星坐标系</p></li><li><p><strong>重点：将M区域 a，b，c，d 4个坐标看作是GPS坐标！获取中心点坐标 P （P是GPS坐标，A是火星坐标，数值相等，位置不同）</strong></p></li><li><p>计算 P 与 A 的经纬度差，坐标系不同不能直接比较。将 P 转为火星坐标P1（<strong>有官方转换方法</strong>）</p></li><li><p>计算 P1 与 A 的经纬度相差之和 ( | P1lng - Alng | + | P1lat - Alat | ) &lt; 0.00001，则认为P1和A重叠，那 P 就是 A 对应的GPS坐标。</p></li><li><p>如果 &gt; 0.00001，二分法缩小区域，将a，b，c，d 4点转为火星坐标 a1，b1，c1，d1，以P1为准，计算A在P1的什么方位。看A在 P1-a1，P1-b1，P1-c1，P1-d1，哪个之间。</p></li><li><p>用二分法排除以外区域，比如：A在P1的左下角，就是A在P1-a1之间，得到新的区域：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">左下角：a（<span class="keyword">min</span>Lng, <span class="keyword">min</span>Lat)</span><br><span class="line">右下角：b ((<span class="keyword">min</span>Lng + <span class="keyword">max</span>Lng) / <span class="number">2</span>, <span class="keyword">min</span>Lat)</span><br><span class="line">左上角：c (<span class="keyword">min</span>Lng, (<span class="keyword">min</span>Lat + <span class="keyword">max</span>Lat) / <span class="number">2</span>)</span><br><span class="line">右上角：d ((<span class="keyword">min</span>Lng + <span class="keyword">max</span>Lng) / <span class="number">2</span>, (<span class="keyword">min</span>Lat + <span class="keyword">max</span>Lat) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>6 - 8 步骤循环30次，一般情况下能得到差距 &lt; 0.00001 的GPS坐标，即时达不到标准，结果也很接近。</p></li></ol><p>这个转换一句话解释：<strong>用已知的GPS坐标，逐步逼近要转换的火星坐标</strong></p><h2 id="算法漏洞"><a href="#算法漏洞" class="headerlink" title="算法漏洞"></a>算法漏洞</h2><p>在测试过程中，有一个坐标点出现了问题：上海虹桥机场2号航站楼 (latitude : 31.194248175984768  longitude : 121.32863948433301)</p><p>下面是算法输出的经纬度相差之和：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">左上，<span class="number">0.49360417451567073</span></span><br><span class="line">右下，<span class="number">0.24358081099306617</span></span><br><span class="line">右下，<span class="number">0.11855877737957243</span></span><br><span class="line">右下，<span class="number">0.05603884882789245</span></span><br><span class="line">右下，<span class="number">0.024777349920977798</span></span><br><span class="line">右下，<span class="number">0.00914639780950921</span></span><br><span class="line">右下，<span class="number">0.0025836297689565413</span></span><br><span class="line">左下，<span class="number">0.0013319084599991982</span></span><br><span class="line">右上，<span class="number">0.001330858958493053</span></span><br><span class="line">右上，<span class="number">0.001604743230569028</span></span><br></pre></td></tr></table></figure><p>坐标点在循环第10次，四角坐标点从GPS转为火星坐标系时，逃出了限定区域，这时已没法继续二分法逼近了，只能返回差距<code>0.001604743230569028</code>的坐标转换。</p><p>问题成因：GPS坐标在转换为火星坐标系时，四个点并非同步平移，正方形区域的GPS坐标，转为火星坐标时，就成了不规则的四边形，有时会把坐标点闪到外面。</p><p>正在想办法解决这个问题……</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 火星坐标 -&gt; GPS</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">transformFromGCJToWGS</span><span class="params">(p:CLLocationCoordinate2D)</span></span> -&gt; <span class="type">CLLocationCoordinate2D</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> threshold = <span class="number">0.00001</span>;</span><br><span class="line">    <span class="keyword">var</span> minLat = p.latitude - <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">var</span> maxLat = p.latitude + <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">var</span> minLng = p.longitude - <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">var</span> maxLng = p.longitude + <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">var</span> delta = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">var</span> maxIteration = <span class="number">30</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> leftBottom = <span class="type">AMapCoordinateConvert</span>(<span class="type">CLLocationCoordinate2D</span>(latitude: minLat, longitude: minLng), .<span class="type">GPS</span>)</span><br><span class="line">        <span class="keyword">let</span> rightBottom = <span class="type">AMapCoordinateConvert</span>(<span class="type">CLLocationCoordinate2D</span>(latitude: minLat, longitude: maxLng), .<span class="type">GPS</span>)</span><br><span class="line">        <span class="keyword">let</span> leftUp = <span class="type">AMapCoordinateConvert</span>(<span class="type">CLLocationCoordinate2D</span>(latitude: maxLat, longitude: minLng), .<span class="type">GPS</span>)</span><br><span class="line">        <span class="keyword">let</span> rightUp = <span class="type">AMapCoordinateConvert</span>(<span class="type">CLLocationCoordinate2D</span>(latitude: maxLat, longitude: maxLng), .<span class="type">GPS</span>)</span><br><span class="line">        <span class="keyword">let</span> midPoint = <span class="type">AMapCoordinateConvert</span>(<span class="type">CLLocationCoordinate2D</span>(latitude : ((minLat + maxLat) / <span class="number">2</span>),longitude : ((minLng + maxLng) / <span class="number">2</span>)), .<span class="type">GPS</span>)</span><br><span class="line">        delta = fabs(midPoint.latitude - p.latitude) + fabs(midPoint.longitude - p.longitude);</span><br><span class="line">        maxIteration = maxIteration - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(maxIteration &lt;= <span class="number">0</span> || delta &lt;= threshold) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">CLLocationCoordinate2D</span>(latitude: (minLat + maxLat) / <span class="number">2</span>, longitude: (minLng + maxLng) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isContains(point: p, p1: leftBottom, p2: midPoint)) &#123;</span><br><span class="line">            maxLat = (minLat + maxLat) / <span class="number">2</span>;</span><br><span class="line">            maxLng = (minLng + maxLng) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isContains(point: p, p1: rightBottom, p2: midPoint)) &#123;</span><br><span class="line">            maxLat = (minLat + maxLat) / <span class="number">2</span>;</span><br><span class="line">            minLng = (minLng + maxLng) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isContains(point: p, p1: leftUp, p2: midPoint)) &#123;</span><br><span class="line">            minLat = (minLat + maxLat) / <span class="number">2</span>;</span><br><span class="line">            maxLng = (minLng + maxLng) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(isContains(point: p, p1: rightUp, p2: midPoint))&#123;</span><br><span class="line">            minLat = (minLat + maxLat) / <span class="number">2</span>;</span><br><span class="line">            minLng = (minLng + maxLng) / <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">CLLocationCoordinate2D</span>(latitude: (minLat + maxLat) / <span class="number">2</span>, longitude: (minLng + maxLng) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isContains</span><span class="params">(point:CLLocationCoordinate2D , p1:CLLocationCoordinate2D, p2:CLLocationCoordinate2D)</span></span>-&gt;<span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (point.latitude &gt;= <span class="built_in">min</span>(p1.latitude, p2.latitude) &amp;&amp;</span><br><span class="line">                point.latitude &lt;= <span class="built_in">max</span>(p1.latitude, p2.latitude)) &amp;&amp;</span><br><span class="line">        (point.longitude &gt;= <span class="built_in">min</span>(p1.longitude,p2.longitude) &amp;&amp;</span><br><span class="line">            point.longitude &lt;= <span class="built_in">max</span>(p1.longitude, p2.longitude));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://cloud.tencent.com/developer/article/1524369" target="_blank" rel="noopener">iOS地图开发2-坐标系的转换(swift)</a> </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火星坐标（GCJ02）转GPS坐标（WGS84）没有标准的方法，网上倒是有很多第三方的。最近在做一款产品，要求非常精确的将火星坐标转换成GPS坐标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="地图" scheme="http://markmiao.com/tags/%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>framework合并问题</title>
    <link href="http://markmiao.com/2020/11/29/framework2/"/>
    <id>http://markmiao.com/2020/11/29/framework2/</id>
    <published>2020-11-29T09:21:55.000Z</published>
    <updated>2020-11-29T08:30:45.696Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇关于静态库的文章：<a href="https://markmiao.com/2016/11/14/%E5%88%B6%E4%BD%9C-a%E5%92%8C-framework%E9%9D%99%E6%80%81%E5%BA%93/">制作.a和.framework静态库</a>。文章很老了，有许多问题，最近用Xcode12打包framework，遇到了一些问题，记录一下。</p><a id="more"></a><p>打包静态库常用脚本配置的方式，在Run Script添加脚本。编译之后，真机和模拟器的framework会完成合并。但Xcode升级之后脚本失效了，则分别打包，手动完成合并。</p><p>在编译时，要选中包的TARGET，分别在真机和模拟器下完成编译。在Products里面Show in Finder便能看到完成打包的framework文件。</p><p>xxx.framework文件夹中xxx文件，没有后缀名且体积最大，这就是静态库文件。</p><p>查看静态文件支持架构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -info 静态库xxx文件路径</span><br></pre></td></tr></table></figure><p>真机：arm64 armv7， 模拟器：arm64 x86_64 i386 </p><p>静态文件合并命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create 真机xxx文件路径 模拟器xxx文件路径 -output 新文件路径</span><br></pre></td></tr></table></figure><p>Xcode升级12之后，报错了：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">have the same architectures (<span class="name">arm64</span>) and can't be in the same fat output file</span><br></pre></td></tr></table></figure><p>因为两个静态文件都支持<code>arm64</code>，无法合并。</p><p>可以移除模拟器静态文件的<code>arm64</code>架构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo 模拟器静态文件xxx -remove arm64 -output 移除后模拟器静态文件xxx名</span><br></pre></td></tr></table></figure><p>移除之后，重新查看支持架构，只有<code>armv7</code>，重新合并就没有问题了。</p><p>网上对于该问题的一些解决办法：</p><p><a href="https://stackoverflow.com/questions/64022291/ios-14-lipo-error-while-creating-library-for-both-device-and-simulator" target="_blank" rel="noopener">iOS 14, lipo error while creating library for both device and simulator</a></p><p><a href="https://blog.csdn.net/huawt520/article/details/109305833" target="_blank" rel="noopener">XCode12 模拟器静态库支持arm64架构引发的系列问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇关于静态库的文章：&lt;a href=&quot;https://markmiao.com/2016/11/14/%E5%88%B6%E4%BD%9C-a%E5%92%8C-framework%E9%9D%99%E6%80%81%E5%BA%93/&quot;&gt;制作.a和.framework静态库&lt;/a&gt;。文章很老了，有许多问题，最近用Xcode12打包framework，遇到了一些问题，记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="静态库" scheme="http://markmiao.com/tags/%E9%9D%99%E6%80%81%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>iOS中的地图与坐标</title>
    <link href="http://markmiao.com/2020/11/28/map/"/>
    <id>http://markmiao.com/2020/11/28/map/</id>
    <published>2020-11-28T06:31:49.000Z</published>
    <updated>2020-11-28T13:37:38.598Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>地图：系统地图（MKMapView），百度地图（BMKMapView），高德地图（MAMapView）</li><li>坐标系：GPS坐标系（WGS84），火星坐标系（GCJ02），百度坐标系（BD09）</li><li>定位：系统定位（CLLocationManager），百度定位SDK（BMKLocationManager），高德定位SDK（AMapLocationManager）</li></ul><a id="more"></a><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p>苹果系统地图在海外全球通用，为GPS坐标系。在国内使用的是高德数据，所以返回的经纬度是火星坐标系的。国内测试，超出国境线就无法获取经纬度数据。</p><p>百度地图的坐标系是自己的BD09，无法切换为其他坐标系。</p><p>高德地图坐标系是火星坐标系，无法切换为其他坐标系。</p><p><strong>地图的坐标系无法更改！！！</strong></p><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p>GPS坐标系是全球坐标系，国际标准。火星坐标系是中国的标准，是在GPS坐标的基础上做了一层加密。法律规定：在中国，地图产品不允许直接使用GPS坐标，至少使用一层加密的火星坐标系（GCJ02）。百度坐标系（BD09）则是在GCJ02的基础上又做了一层转换。</p><p>GPS坐标转为火星坐标或百度坐标，以及火星坐标和百度坐标相互转换，都有官方提供的方法：</p><p><a href="https://lbs.amap.com/api/ios-sdk/guide/computing-equipment/amap-calculate-tool/?sug_index=3" target="_blank" rel="noopener">高德提供的坐标转换</a></p><p><a href="http://lbs.baidu.com/index.php?title=iossdk/guide/tool/coordinate" target="_blank" rel="noopener">百度提供的坐标转换</a></p><p>但是！火星坐标和百度坐标不允许转换GPS坐标，至少没有官方提供转换方法。</p><p>网上有很多开源的转换工具，亲测了几种：</p><p><a href="https://github.com/JackZhouCn/JZLocationConverter-Swift" target="_blank" rel="noopener">JZLocationConverter-Swift</a> ： 在转换WGS84时会有误差，官方有说明</p><p><a href="https://cloud.tencent.com/developer/article/1524369" target="_blank" rel="noopener">iOS地图开发2-坐标系的转换(swift)</a> ： 里面的一些参数可做优化，亲测 GCJ02 -&gt; WGS84 非常精准。</p><p>虽然法律规定国内不能使用GPS坐标系，这仅限于地图产品。<strong>定位是可以直接获取GPS坐标的！</strong></p><p>如果定位数据要放到地图中使用，则要保证统一坐标系，不然会出现偏差。</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="系统定位"><a href="#系统定位" class="headerlink" title="系统定位"></a>系统定位</h3><p>系统定位返回的经纬度为GPS坐标。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> locationM = <span class="type">CLLocationManager</span>()</span><br><span class="line">locationM.delegate = <span class="keyword">self</span></span><br><span class="line">locationM.requestWhenInUseAuthorization() <span class="comment">//使用app时定位</span></span><br><span class="line">locationM.startUpdatingLocation() <span class="comment">//开始定位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 定位的代理方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">locationManager</span><span class="params">(<span class="number">_</span> manager: CLLocationManager, didUpdateLocations locations: [CLLocation])</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> locations.last != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"经纬度 = \(locations.last!.coordinate)"</span>)</span><br><span class="line">        manager.stopUpdatingLocation() <span class="comment">//停止定位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="百度定位SDK"><a href="#百度定位SDK" class="headerlink" title="百度定位SDK"></a>百度定位SDK</h3><p>百度定位SDK获取的经纬度默认为火星坐标系（GCJ02），百度地图中是百度坐标系（BD09），如果要定位的坐标放到地图里用，则需要统一坐标系，指定坐标系为<code>.BMK09LL</code>。</p><p>也可以获取其他坐标系中的定位坐标：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> locationM = <span class="type">BMKLocationManager</span>()</span><br><span class="line">locationM.delegate = <span class="keyword">self</span></span><br><span class="line">locationM.coordinateType = .<span class="type">BMK09LL</span> <span class="comment">//指定坐标系</span></span><br><span class="line">locationM.startUpdatingLocation()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bmkLocationManager</span><span class="params">(<span class="number">_</span> manager: BMKLocationManager, didUpdate location: BMKLocation?, orError error: Error?)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> coordinate = location?.location?.coordinate &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"经纬度 = \(coordinate)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高德定位SDK"><a href="#高德定位SDK" class="headerlink" title="高德定位SDK"></a>高德定位SDK</h3><p>高德的定位和地图SDK只使用了一种坐标系：火星坐标系（GCJ02）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> locationM = <span class="type">AMapLocationManager</span>()</span><br><span class="line">locationM.delegate = <span class="keyword">self</span></span><br><span class="line">locationM.locatingWithReGeocode = <span class="literal">true</span> <span class="comment">//返回逆地理信息</span></span><br><span class="line">locationM.startUpdatingLocation() <span class="comment">//开始定位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 代理方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">amapLocationManager</span><span class="params">(<span class="number">_</span> manager: AMapLocationManager!, didUpdate location: CLLocation!, reGeocode: AMapLocationReGeocode!)</span></span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"经纬度 = \(location.coordinate)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><p><a href="https://www.jianshu.com/p/3cd701299cef" target="_blank" rel="noopener">iOS 火星坐标/地球坐标/百度坐标整理及解决方案汇总？如何转火星坐标？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;地图：系统地图（MKMapView），百度地图（BMKMapView），高德地图（MAMapView）&lt;/li&gt;
&lt;li&gt;坐标系：GPS坐标系（WGS84），火星坐标系（GCJ02），百度坐标系（BD09）&lt;/li&gt;
&lt;li&gt;定位：系统定位（CLLocationManager），百度定位SDK（BMKLocationManager），高德定位SDK（AMapLocationManager）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="地图" scheme="http://markmiao.com/tags/%E5%9C%B0%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>mRemind - 提醒你每一件小事</title>
    <link href="http://markmiao.com/2020/05/08/mremind/"/>
    <id>http://markmiao.com/2020/05/08/mremind/</id>
    <published>2020-05-08T08:54:02.000Z</published>
    <updated>2021-09-18T08:46:37.037Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://apps.apple.com/cn/app/mremind-提醒你每一件小事/id1449698904?mt=12" target="_blank" rel="noopener"><img src="https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/mremindicon.png" alt="mRemind"></a></p><p>mRemind 是一款专为 macOS 设计的待办提醒应用，操作简单而功能强大。</p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://apps.apple.com/cn/app/mremind-提醒你每一件小事/id1449698904?mt=12" target="_blank" rel="noopener"><img src="https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/badge-download-on-the-mac-app-store_s.png" alt=""></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当我们专注于工作或某项任务时，往往会忽略计划好的其他事情。当想起时，已经错过了最佳时间。</p><p>mRemind 是为解决这类烦恼而生的，它能帮你记录待办事项。当你把任务交给 mRemind 记录后，你便可以专注于当下工作，时间到了，mRemind 会提醒你的待办事项该做了。</p><p>mRemind，让你保持专注不遗漏。</p><p><img src="https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/mremindappstore.png" alt="mRemind"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>在状态栏中一键添加待办提醒</li><li>查看添加的所有待办提醒</li><li>时间到了，通知栏提醒待办</li><li>在消息通知上可一键操作完成</li></ul><h2 id="mRemind基础功能"><a href="#mRemind基础功能" class="headerlink" title="mRemind基础功能"></a>mRemind基础功能</h2><ul><li><p>添加不超过3条的mRemind提醒</p></li><li><p>5/10/20/30分钟的倒计时提醒</p></li><li><p>全部提醒的完成/删除操作</p></li><li><p>其他 mRemind 提供的服务</p></li></ul><h2 id="mRemind高级版"><a href="#mRemind高级版" class="headerlink" title="mRemind高级版"></a>mRemind高级版</h2><ul><li><p>添加多条mRemind提醒</p></li><li><p>日期选择功能，可随意指定未来时间</p></li><li><p>自定义时间功能，可设置任意倒计时</p></li></ul><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><p>订阅 mRemind高级版 解锁全部功能，您可自由选择月度订阅或年度订阅：</p><ul><li><p>按月订阅：¥6.00/月</p></li><li><p>按年订阅：¥60.00/年（推荐，约节省17%）</p></li></ul><p>确认订阅后，将向您的Apple ID账户收款。除非您在当前计费周期结束前至少24小时取消订单，否则项目会自动续订，您的账户将在当前计费周期结束前24小时内收取续订费用。当前订阅被激活后不可取消。购买后，您可在App Store的账户设置中管理您的订阅。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>我们欢迎您对 mRemind 提出意见或建议，请邮件联系 <a href="mailto:i@markmiao.com">i@markmiao.com</a> ，我们会认真对待每一个反馈，将 mRemind 做的更好。</p><hr><p>隐私政策：<a href="https://blog.markmiao.com/2018/12/25/yinsizhengce/" target="_blank" rel="noopener">https://blog.markmiao.com/2018/12/25/yinsizhengce/</a></p><p>使用条款：<a href="https://blog.markmiao.com/2018/12/26/shiyongtiaokuan/" target="_blank" rel="noopener">https://blog.markmiao.com/2018/12/26/shiyongtiaokuan/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://apps.apple.com/cn/app/mremind-提醒你每一件小事/id1449698904?mt=12&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/mremindicon.png&quot; alt=&quot;mRemind&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;mRemind 是一款专为 macOS 设计的待办提醒应用，操作简单而功能强大。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS开发" scheme="http://markmiao.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="应用" scheme="http://markmiao.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>macOS开发笔记(2)</title>
    <link href="http://markmiao.com/2020/04/29/macosdevelnote2/"/>
    <id>http://markmiao.com/2020/04/29/macosdevelnote2/</id>
    <published>2020-04-28T22:05:19.000Z</published>
    <updated>2020-04-29T02:00:28.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSToolbar"><a href="#NSToolbar" class="headerlink" title="NSToolbar"></a>NSToolbar</h2><p>常用<code>NSToolbar</code>开发偏好设置界面，在xib中可以直接拖<code>NSToolbar</code>到<code>Window</code>中，可以自定义图片文字。</p><a id="more"></a><p>勾选<code>Behavior</code>中的<code>Selectable</code>，<code>NSToolbarItem</code>是可选中样式的。</p><p>设置某个<code>NSToolbarItem</code>默认选中，需要先设置默认选中的<code>NSToolbarItem</code>的<code>Identifier</code>，使用下面代码完成默认选中：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toolbar.selectedItemIdentifier = <span class="type">NSToolbarItem</span>.<span class="type">Identifier</span>(rawValue: <span class="string">"id"</span>)</span><br></pre></td></tr></table></figure><h2 id="Window按钮"><a href="#Window按钮" class="headerlink" title="Window按钮"></a>Window按钮</h2><p>控制window左上角关闭、最小化、最大化按钮的是否可用，以及显示隐藏。</p><p>可以在xib中勾选<code>Controls</code>中的<code>Close</code>、<code>Minimize</code>、<code>Resize</code>，控制按钮是否可用。或者使用代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.window?.standardWindowButton(.closeButton)?.isEnabled = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>使用代码可以隐藏按钮：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.window?.standardWindowButton(.miniaturizeButton)?.isHidden = <span class="literal">true</span></span><br><span class="line"><span class="keyword">self</span>.window?.standardWindowButton(.zoomButton)?.isHidden = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="NSButton"><a href="#NSButton" class="headerlink" title="NSButton"></a>NSButton</h2><p>设置按钮为蓝色背景，需要设置按钮的<code>Key Equivalent</code>为回车键</p><h2 id="Label"><a href="#Label" class="headerlink" title="Label"></a>Label</h2><p>macOS中<code>Label</code>继承自<code>NSTextField</code>，有两种：<code>Label</code> 和<code>Wrapping Label</code></p><p><code>Wrapping Label</code>为多行Label，无需设置Line Break为<code>Character Wrap</code></p><p>使用<code>Label</code> 设置Line Break也无法折行显示。</p><p>当<code>Label</code>仅作为文字显示时，鼠标移上不变光标显示，需要设置Action为<code>Sent On End Editing</code></p><h2 id="NSTableCellView"><a href="#NSTableCellView" class="headerlink" title="NSTableCellView"></a>NSTableCellView</h2><p>移除默认的Cell点击变蓝，设置NSTableView的<code>selectionHighlightStyle</code> :</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.selectionHighlightStyle = .<span class="keyword">none</span></span><br></pre></td></tr></table></figure><p>NSTableCellView根据存放的Label内容自适应高度，OSX 10.13以后，在xib中设置正确的约束，设置Row自适应高度即可：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">self</span>.tableView.usesAutomaticRowHeights = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>无需指定默认高度<code>rowHeight</code>，亦无需实现row高度的代理方法<code>func tableView(_ tableView: NSTableView, heightOfRow row: Int) -&gt; CGFloat</code></p><p><a href="https://www.itranslater.com/qa/details/2325926279662535680" target="_blank" rel="noopener">基于视图的NSTableView，其行具有动态高度</a></p><h2 id="NSTextField"><a href="#NSTextField" class="headerlink" title="NSTextField"></a>NSTextField</h2><p>限制输入框<code>NSTextField</code>的输入内容，仅允许输入数字，需要自定义<code>Formatter</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnlyIntegerValueFormatter</span>: <span class="title">NumberFormatter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">isPartialStringValid</span><span class="params">(<span class="number">_</span> partialString: String, newEditingString newString: AutoreleasingUnsafeMutablePointer&lt;NSString?&gt;?, errorDescription error: AutoreleasingUnsafeMutablePointer&lt;NSString?&gt;?)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> partialString.isEmpty &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 禁止输入非数字 &amp;&amp; 首位不能为0 &amp;&amp; 最多输入3位</span></span><br><span class="line">        <span class="keyword">return</span> <span class="type">Int</span>(partialString) != <span class="literal">nil</span> &amp;&amp; <span class="type">Int</span>(partialString)! &gt; <span class="number">0</span> &amp;&amp; partialString.<span class="built_in">count</span> &lt; <span class="number">4</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NSToolbar&quot;&gt;&lt;a href=&quot;#NSToolbar&quot; class=&quot;headerlink&quot; title=&quot;NSToolbar&quot;&gt;&lt;/a&gt;NSToolbar&lt;/h2&gt;&lt;p&gt;常用&lt;code&gt;NSToolbar&lt;/code&gt;开发偏好设置界面，在xib中可以直接拖&lt;code&gt;NSToolbar&lt;/code&gt;到&lt;code&gt;Window&lt;/code&gt;中，可以自定义图片文字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS开发" scheme="http://markmiao.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS" scheme="http://markmiao.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记5-初探Widget布局</title>
    <link href="http://markmiao.com/2020/03/19/flutter5/"/>
    <id>http://markmiao.com/2020/03/19/flutter5/</id>
    <published>2020-03-19T06:30:50.000Z</published>
    <updated>2020-03-19T07:26:32.114Z</updated>
    
    <content type="html"><![CDATA[<p>Flutter核心思想：用Widget构建UI界面、万物皆Widget。</p><p>Flutter渲染思想：Widget描述UI，当Widget的状态改变，会重新构建UI。flutter会比对前后两者的差异，确定底层渲染树的最小更改。</p><a id="more"></a><h2 id="初探Widget布局"><a href="#初探Widget布局" class="headerlink" title="初探Widget布局"></a>初探Widget布局</h2><ul><li>Text：带样式的文本</li><li>Row和Column：水平/垂直布局</li><li>Container：矩形控件</li></ul><p>使用这些常用的Widget自定义一个导航栏样式：</p><p><img src="https://imagedb-1257991841.cos.ap-beijing.myqcloud.com/flutterdemo20200319100137.png" alt="示例"></p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>对整个页面进行分解，分为导航栏和展示内容两部分，这两者垂直排布，所以使用<code>Column</code>，导航栏内控件水平排布，所以用<code>Row</code>。</p><p>先自定义导航栏，导航栏分四部分：矩形背景、标题、两个icon。矩形背景可以用<code>Container</code>，标题用<code>Text</code>, 标题与icon的布局用<code>Row</code>实现。自定义导航栏，标题和icon要求外部传值。</p><p>因为内容不变，导航栏使用<code>StatelessWidget</code>，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAppBar</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  MyAppBar(&#123;<span class="keyword">this</span>.titleStr, <span class="keyword">this</span>.leftIcon, <span class="keyword">this</span>.rightIcon&#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> titleStr;<span class="comment">//标题</span></span><br><span class="line">  <span class="keyword">final</span> IconData leftIcon;<span class="comment">//左边的icon</span></span><br><span class="line">  <span class="keyword">final</span> IconData rightIcon;<span class="comment">//右边的icon</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(<span class="comment">//导航栏矩形背景</span></span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">      padding: EdgeInsets.only(top:<span class="number">30</span>),</span><br><span class="line">      color: Colors.red,</span><br><span class="line">      child: Row(<span class="comment">//采用横向的Row布局</span></span><br><span class="line">        children: &lt;Widget&gt; [</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(leftIcon, color: Colors.white,),</span><br><span class="line">            onPressed: <span class="keyword">null</span>,<span class="comment">//点击事件</span></span><br><span class="line">          ),</span><br><span class="line">          Expanded(<span class="comment">//标题填充展示</span></span><br><span class="line">            child: Text(</span><br><span class="line">              titleStr,</span><br><span class="line">              style: Theme.of(context).primaryTextTheme.title,<span class="comment">//标题的style</span></span><br><span class="line">              textAlign: TextAlign.center,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(rightIcon, color: Colors.white,),</span><br><span class="line">            onPressed: <span class="keyword">null</span>,</span><br><span class="line">          ),</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>展示内容部分比较简单，文本填充，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyContent</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  MyContent(&#123;<span class="keyword">this</span>.contentStr&#125;);</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> contentStr;<span class="comment">//显示内容外部传参</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Expanded(<span class="comment">//填充显示</span></span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text(</span><br><span class="line">          contentStr,</span><br><span class="line">          style: TextStyle(</span><br><span class="line">            color: Colors.red,</span><br><span class="line">            fontSize: <span class="number">50</span>,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两部分组合在一个Widget中，使用<code>Column</code>布局，代码如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStateless</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      child: Column(</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          MyAppBar(titleStr: <span class="string">'Hello World'</span>, leftIcon: Icons.menu, rightIcon: Icons.track_changes),<span class="comment">//导航栏，传递参数</span></span><br><span class="line">          MyContent(contentStr: <span class="string">'Hello Flutter'</span>),<span class="comment">//显示内容部分，传递参数</span></span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>demo的完整代码见工程中的 <a href="https://github.com/mxdios/flutter-demo" target="_blank" rel="noopener">flutter_widgets</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flutter核心思想：用Widget构建UI界面、万物皆Widget。&lt;/p&gt;
&lt;p&gt;Flutter渲染思想：Widget描述UI，当Widget的状态改变，会重新构建UI。flutter会比对前后两者的差异，确定底层渲染树的最小更改。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记4-UI框架</title>
    <link href="http://markmiao.com/2020/03/18/flutter4/"/>
    <id>http://markmiao.com/2020/03/18/flutter4/</id>
    <published>2020-03-18T06:30:50.000Z</published>
    <updated>2020-03-18T06:32:08.613Z</updated>
    
    <content type="html"><![CDATA[<p>flutter是跨平台的UI框架，非UI层面的任务，通过插件机制与iOS或Android通讯。</p><a id="more"></a><h2 id="UIView-与-Widget"><a href="#UIView-与-Widget" class="headerlink" title="UIView 与 Widget"></a>UIView 与 Widget</h2><p>UIView是iOS中最常用的视图控件，Widget并不完全等同于UIView，它可以被称为“声明和构造 UI 的方法”。UIView是可变的，直接对UIView修改并不会导致重新创建实例。Widget不可变，只能通过修改Widget的state来使其改变。</p><p>两种Widget：有状态的 <code>StatefulWidget</code> 和无状态的<code>StatelessWidget</code>， <code>StatefulWidget</code>有一个<code>State</code>对象，用来存储状态。</p><p>示例：Text，Text继承自无状态Widget：<code>class Text extends StatelessWidget</code>，只能渲染初始化时的内容。想变更Text内容，需要放到<code>StatefulWidget</code>中：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangedText</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;<span class="comment">//有状态的StatefulWidget</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ChangedTextState createState() =&gt; _ChangedTextState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangedTextState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ChangedText</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> titleText = <span class="string">'hello world'</span>;<span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">void</span> _textBtnClik() &#123;  </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      titleText = <span class="string">'hello flutter'</span>;<span class="comment">//修改变量</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  Widget _changedTextView() &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Column (</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          Text(titleText),<span class="comment">//Text赋值变量</span></span><br><span class="line">          FloatingActionButton(</span><br><span class="line">            onPressed: _textBtnClik, <span class="comment">//点击按钮修改变量</span></span><br><span class="line">            child: Icon(Icons.add_circle),</span><br><span class="line">          )</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ); </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">'home'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _changedTextView()</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改变量要在<code>setState()</code>方法中修改，会为State对象触发<code>build()</code>方法，会让UI更新。如果不在该方法中，直接更改变量值，可更改变量，UI不会更新。</p><p><em>VS Code支持代码块，输入state时能快速创建自定义StatefulWidget</em></p><h2 id="布局约束"><a href="#布局约束" class="headerlink" title="布局约束"></a>布局约束</h2><p>iOS中有storybody和xib布局，直接对视图设置约束，或者用代码设置约束，来适配屏幕。在flutter中也可以通过代码设置约束。</p><p>比如自定义按钮可以添加padding：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FlatButton(</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  padding: EdgeInsets.only(top:<span class="number">10</span>,bottom: <span class="number">10</span>, left: <span class="number">60</span>, right: <span class="number">60</span>),</span><br><span class="line">  child: Text(<span class="string">'Btn'</span>),</span><br><span class="line">  onPressed: _textBtnClik, </span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="添加移除组件"><a href="#添加移除组件" class="headerlink" title="添加移除组件"></a>添加移除组件</h2><p>在iOS原生开发中，可以使用 <code>addSubview()</code>和<code>removeFromSuperview()</code> 添加移除控件，flutter中没有这类方法。flutter的视图添加移除可以动态解决，在Widget中动态添加视图，未添加上的便是移除了。Widget不可变，更改State后会重绘一个Widget代替原来的Widget，所以动态添加便完成了添加移除组件操作。</p><p>示例代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ChangedTextState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ChangedText</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">String</span> text = <span class="string">'hello wrold'</span>;</span><br><span class="line">  <span class="built_in">bool</span> textBool = <span class="keyword">true</span>;</span><br><span class="line">  _textBtnClik() &#123;  </span><br><span class="line">    setState(() &#123;</span><br><span class="line">      index ++;</span><br><span class="line">      textBool = !textBool;<span class="comment">//bool值控制添加组件</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  _viewShow() &#123;<span class="comment">//返回不同的组件</span></span><br><span class="line">    <span class="keyword">if</span> (textBool) &#123;</span><br><span class="line">      <span class="keyword">return</span> Text(text);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Text(<span class="string">'<span class="subst">$index</span>'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Widget _changedTextView() &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: </span><br><span class="line">      Column (</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: &lt;Widget&gt;[</span><br><span class="line">          _viewShow(),<span class="comment">//添加组件</span></span><br><span class="line">          FlatButton(</span><br><span class="line">            color: Colors.blue,</span><br><span class="line">            padding: EdgeInsets.only(top:<span class="number">10</span>,bottom: <span class="number">10</span>, left: <span class="number">60</span>, right: <span class="number">60</span>),</span><br><span class="line">            child: Text(<span class="string">'Btn'</span>),</span><br><span class="line">            onPressed: _textBtnClik, <span class="comment">//按钮控制bool值</span></span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    ); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="声明式UI"><a href="#声明式UI" class="headerlink" title="声明式UI"></a>声明式UI</h2><p>通过上面的组件添加移除可以看出flutter的UI操作和原生iOS的区别，原生iOS对UI操作，是对UI组件直接进行命令操作，比如：执行<code>addSubview()</code>和<code>removeFromSuperview()</code> 添加移除UI。</p><p>在flutter中Widget是不可变的，只有调用<code>setState()</code>方法触发Widget重建，这时是构造了一个新的Widget实例。</p><blockquote><p>框架使用 RenderObjects 管理传统 UI 对象的职责（比如维护布局的状态）。 RenderObjects 在帧之间保持不变， Flutter 的轻量级 widget 通知框架在状态之间修改 RenderObjects， Flutter 框架则处理其余部分。</p></blockquote><p>这就是flutter中的声明式UI</p><p><strong>demo的完整代码见工程中的 <a href="https://github.com/mxdios/flutter-demo" target="_blank" rel="noopener">flutter_ios</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;flutter是跨平台的UI框架，非UI层面的任务，通过插件机制与iOS或Android通讯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记3-收藏交互</title>
    <link href="http://markmiao.com/2020/03/12/flutter3/"/>
    <id>http://markmiao.com/2020/03/12/flutter3/</id>
    <published>2020-03-12T08:02:50.000Z</published>
    <updated>2020-03-12T08:10:58.948Z</updated>
    
    <content type="html"><![CDATA[<p>demo的功能如下：对词组列表加收藏功能，跳转到收藏夹页面，更改整个APP的主题。</p><ul><li>添加交互</li><li>页面跳转</li><li>更改主题</li></ul><a id="more"></a><h2 id="添加收藏图标"><a href="#添加收藏图标" class="headerlink" title="添加收藏图标"></a>添加收藏图标</h2><p>所有动态功能的实现还是在 <code>State</code> 中去做，找到 <code>ListTile</code>在后面增加收藏图标，类似iOS中UITableViewCell中的accessoryView，但添加方法不一样。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Widget _cellView(WordPair name) &#123;</span><br><span class="line">  <span class="keyword">return</span> ListTile(</span><br><span class="line">    title: Text(</span><br><span class="line">      name.asPascalCase</span><br><span class="line">    ),</span><br><span class="line">    trailing: Icon( <span class="comment">//在trailing上添加Icon，Icons的图标很多，favorite是个心形</span></span><br><span class="line">      Icons.favorite,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样便为每一个Tile增加了收藏图标，收藏图标有两种状态——已收藏、未收藏。需要有个bool值去控制，要得到这个bool值就要对每个Tile的title判断，判断这个title是否被收藏。</p><p>这时需要有个数组专门存放已收藏的词组：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">Set</span>&lt;WordPair&gt;_likeNameArray = <span class="built_in">Set</span>&lt;WordPair&gt;();</span><br></pre></td></tr></table></figure><p>这是存放收藏词组的数组，存放的类型是 `WordPair，用Set而不用List的原因是：Set中不允许有重复元素。更适合收藏操作。</p><p><code>_likeNameArray</code> 中存放了收藏词组，在创建<code>ListTile</code>的方法中将每个<code>WordPair</code>值跟这个数组比对即可得到bool值。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="built_in">bool</span> isLike = _likeNameArray.contains(name);</span><br></pre></td></tr></table></figure><p>有了bool值便可修改收藏图标的状态：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trailing: Icon(</span><br><span class="line">    isLike ? Icons.favorite : Icons.favorite_border, <span class="comment">//支持三目元算符，赋值不同收藏图标</span></span><br><span class="line">color: isLike ? Colors.red : <span class="keyword">null</span>, <span class="comment">//为已收藏的心形设置红色，未收藏的不设置颜色</span></span><br><span class="line">),</span><br></pre></td></tr></table></figure><h2 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h2><p>有了收藏图标，需要增加收藏的点击交互。也是在创建<code>ListTile</code>的方法中为其添加点击事件<code>onTap</code>，在点击事件中操作收藏数据：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onTap: () &#123;<span class="comment">//点击事件</span></span><br><span class="line">  setState(() &#123;<span class="comment">//setState()方法</span></span><br><span class="line">    <span class="keyword">if</span> (isLike) &#123;</span><br><span class="line">      _likeNameArray.remove(name);<span class="comment">//移除收藏</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _likeNameArray.add(name);<span class="comment">//收藏</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>flutter是响应式框架，<code>setState()</code>方法会为State对象触发<code>build()</code>方法，会让UI更新。点击的时候还有水波特效，是Material Design自带的。</p><p>至此，便能完成点击收藏和取消收藏的操作了。</p><h2 id="导航栏按钮"><a href="#导航栏按钮" class="headerlink" title="导航栏按钮"></a>导航栏按钮</h2><p>在导航栏添加一个收藏夹按钮，点击收藏夹按钮跳转收藏夹页面。</p><p>在 <code>appBar</code> 中添加收藏夹按钮：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">'home'</span>),</span><br><span class="line">      actions: &lt;Widget&gt;[<span class="comment">//actions需要一个Widget组</span></span><br><span class="line">        <span class="keyword">new</span> IconButton(icon: Icon(Icons.list), onPressed: _pushVc),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">    body: _listView(),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些widget需要单个widget属性，<code>actions</code>需要一个widget组，可以添加多个IconButton，会把title挤到一边。类似iOS中的<code>rightBarButtonItems</code>。</p><p>数组中是<code>IconButton</code>，设置了Icon，和点击事件<code>_pushVc</code>，这个方法中完成页面跳转操作。</p><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><p>页面跳转在iOS中是控制器跳转，常用push，页面称为控制器。在flutter中页面称为路由<code>route</code>，从主路由切换到新路由，就是页面跳转。</p><p>flutter中也是push和pop控制路由跳转，将路由push到导航器的栈中就是跳转新页面，将路由pop出导航器，就会返回上一个路由。</p><p>在<code>_pushVc</code>方法中创建路由，并将其push到导航器的栈中。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _pushVc() &#123;</span><br><span class="line">    Navigator.push(context, route);<span class="comment">//路由入栈的push方法，route处创建一个新路由</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h2><p>在 <code>MaterialPageRoute</code> 中创建要显示的收藏夹列表：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Navigator.push(context, </span><br><span class="line">  <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">    builder: (contex) &#123;<span class="comment">//1.在builder方法中构建路由，builder方法是匿名函数</span></span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">Iterable</span>&lt;ListTile&gt; tiles = _likeNameArray.map(</span><br><span class="line">        (WordPair name) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ListTile (<span class="comment">//2. 创建ListTile：tiles</span></span><br><span class="line">            title: Text(</span><br><span class="line">              name.asPascalCase</span><br><span class="line">            ),</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; divided = ListTile <span class="comment">//6. divided最后含有分割线的列表</span></span><br><span class="line">      .divideTiles(<span class="comment">//3. ListTile的divideTiles()方法在每个tile之间添加1像素分割线，不用像之前判断奇偶添加Divider()</span></span><br><span class="line">        context: context,</span><br><span class="line">        tiles: tiles,<span class="comment">//4. 这是上面根据收藏数组创建的ListTile</span></span><br><span class="line">      )</span><br><span class="line">      .toList();<span class="comment">//5. 转换成列表显示</span></span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上述方法创建了收藏夹，还未结束，<code>builder</code>返回一个<code>Scaffold</code>，在这里将上面创建的列表添加到body，形成整个要push的路由</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _pushVc() &#123;</span><br><span class="line">  Navigator.push(context, </span><br><span class="line">    <span class="keyword">new</span> MaterialPageRoute(</span><br><span class="line">      builder: (contex) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">Iterable</span>&lt;ListTile&gt; tiles = _likeNameArray.map(</span><br><span class="line">          (WordPair name) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ListTile (</span><br><span class="line">              title: Text(</span><br><span class="line">                name.asPascalCase</span><br><span class="line">              ),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; divided = ListTile</span><br><span class="line">        .divideTiles(</span><br><span class="line">          context: context,</span><br><span class="line">          tiles: tiles,</span><br><span class="line">        )</span><br><span class="line">        .toList();<span class="comment">//创建收藏夹列表</span></span><br><span class="line">        <span class="keyword">return</span> Scaffold(</span><br><span class="line">          appBar: AppBar(</span><br><span class="line">            title: Text(<span class="string">'like'</span>),<span class="comment">//路由标题</span></span><br><span class="line">          ),</span><br><span class="line">          body: ListView(children: divided), <span class="comment">//路由内容</span></span><br><span class="line">        );</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，完成路由跳转的工作。跳转之后在新路由页面自动添加返回按钮，点击会返回，不用额外添加pop。这点和iOS很像，而且也支持手势右滑返回页面。</p><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>在flutter中，使用theme控制APP主题，可更改颜色修改主题：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">new</span> ThemeData(</span><br><span class="line">  primaryColor: Colors.white,<span class="comment">//白色主题</span></span><br><span class="line">),</span><br></pre></td></tr></table></figure><p>这里有个小坑，VSCode新建项目时，这个字段默认是<code>primarySwatch</code>，在设置白色时会报错。因为white和black是<code>Color</code>类型，不是<code>MaterialColor</code>。像yellow、blue等颜色属于<code>MaterialColor</code>。</p><p>或者直接使用<code>dark()</code>，设置暗黑主题：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: <span class="keyword">new</span> ThemeData.dark(),</span><br></pre></td></tr></table></figure><p><strong>demo的完整代码见工程中的 <a href="https://github.com/mxdios/flutter-demo" target="_blank" rel="noopener">flutter_listview</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;demo的功能如下：对词组列表加收藏功能，跳转到收藏夹页面，更改整个APP的主题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;添加交互&lt;/li&gt;
&lt;li&gt;页面跳转&lt;/li&gt;
&lt;li&gt;更改主题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记2-第一个Flutter Demo</title>
    <link href="http://markmiao.com/2020/03/12/flutter2/"/>
    <id>http://markmiao.com/2020/03/12/flutter2/</id>
    <published>2020-03-12T02:02:50.000Z</published>
    <updated>2020-03-12T02:04:41.004Z</updated>
    
    <content type="html"><![CDATA[<p>第一个flutter demo—— 无限滚动的列表应用</p><p>Material Design （质感设计），Google开发的设计语言，拓展于Google即时的卡片设计。</p><p>flutter提供了丰富的质感设计风格的widgets，在flutter中，几乎所有都是widget，</p><a id="more"></a><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>; <span class="comment">//导入Material Design</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dart中的单行函数，main()是应用程序的主函数，执行结果是runApp(MyApp()), MyApp()就是下面自定义的函数。</span></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp()); </span><br><span class="line"></span><br><span class="line"><span class="comment">//MyApp继承自StatelessWidget</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">'Welcome to Flutter'</span>,</span><br><span class="line">      home: Scaffold(<span class="comment">//Scaffold是material提供的widget，具有默认导航栏，标题，主屏幕的body属性</span></span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(<span class="string">'Hello World'</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由此可知，一个App是由widget组成的。widget可以一层层嵌套，它的最终显示样式，由它嵌套的子widget决定</p><p>示例中，body是一个widget，里面包含了Center widget，Center widget又包含了Text widget，Center widget决定了子widget以居中样式呈现，所以body的呈现样式是居中显示了文本 <code>Hello World</code></p><h2 id="引入开源包"><a href="#引入开源包" class="headerlink" title="引入开源包"></a>引入开源包</h2><p>使用 <a href="https://pub.flutter-io.cn/packages/english_words" target="_blank" rel="noopener">english_words</a> 资源包，英文单词数据资源</p><p>项目中 <code>pubspec.yaml</code> 是资源管理包，类似iOS开发中使用cocopads的 <code>Podfile</code>。</p><p>在 <code>dependencies</code> 栏下添加资源包名：<code>english_words: ^3.1.5</code> （3.1.5 或更高版本）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">cupertino_icons:</span> <span class="string">^0.1.2</span></span><br><span class="line">  <span class="attr">english_words:</span> <span class="string">^3.1.5</span></span><br></pre></td></tr></table></figure><p>添加之后，在VSCode右上角，有一个方块加向下箭头的图标 <code>Get Packages</code>，点击便可安装资源包，控制台会打印安装结果：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[first_demo] flutter packages get</span><br><span class="line">Running <span class="string">"flutter pub get"</span> <span class="keyword">in</span> first_demo...                          <span class="number">0.4</span>s</span><br><span class="line"><span class="keyword">exit</span> code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>同时会在 <code>pubspec.lock</code> 文件中增加了添加的包名和版本信息：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">english_words:</span></span><br><span class="line"><span class="symbol">    dependency:</span> <span class="string">"direct main"</span></span><br><span class="line"><span class="symbol">    description:</span></span><br><span class="line"><span class="symbol">      name:</span> english_words</span><br><span class="line"><span class="symbol">      url:</span> <span class="string">"https://pub.flutter-io.cn"</span></span><br><span class="line"><span class="symbol">    source:</span> hosted</span><br><span class="line"><span class="symbol">    version:</span> <span class="string">"3.1.5"</span></span><br></pre></td></tr></table></figure><h2 id="使用资源包English-words"><a href="#使用资源包English-words" class="headerlink" title="使用资源包English words"></a>使用资源包English words</h2><p>示例代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:english_words/english_words.dart'</span>; <span class="comment">//引入english_words，写类WordPair时，会自动引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/material.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> name = WordPair.random(); <span class="comment">//english_words中的随机词对，final是定义不变更的变量的关键字</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: Text(name.asPascalCase), <span class="comment">//asPascalCase是大驼峰命名法，每个单次首字母大写，相应的还有asCamelCase等，可以尝试。</span></span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击 <code>command + s</code> （也可点击VSCode上悬浮栏的闪电按钮）会热重载，APP中的文字会不断变化。</p><h2 id="StatefulWidget"><a href="#StatefulWidget" class="headerlink" title="StatefulWidget"></a>StatefulWidget</h2><p>上述demo中，是用的StatelessWidget，这是不可变的widget，属性不能改变，都是final的。</p><p>StatefulWidget是可变的widget，它本身不可变，但它有一个 <code>State</code> 状态类，这个在widget整个生命周期一直存在，是可变的。</p><p>创建一个StatefulWidget，和创建StatelessWidget一样，示例代码：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomWorld</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  WorldState createState() =&gt; WorldState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中 <code>WorldState</code> 是StatefulWidget的 State 类，这个类通过createState()方法创建，后跟创建 State类的自定义方法 <code>WorldState()</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWorld</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">final</span> name = WordPair.random();</span><br><span class="line">    <span class="keyword">return</span> Text(name.asPascalCase);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是创建State的实现方法，WorldState集成自State，<code>&lt;RandomWords&gt;</code> 代表着专门用于<code>RandomWorld</code> 的State泛型类。里面的build方法比较容易理解，就是创建widget的build方法，里面返回了一个动态的Text。这说明State也是一个widget。</p><p><em>万物皆widget啊！</em></p><p>剩下的就是使用StatefulWidget，在MyApp中使用StatefulWidget的自定义RandomWorld，动态name用不到了，直接使用<code>RandomWorld()</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// final name = WordPair.random();</span></span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">'Welcome to Flutter'</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: RandomWorld()</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，跟之前别无二致，还是APP中的英文词组在变化。但变化从由<code>StatelessWidget</code>里的一个widget控制，变为由<code>StatefulWidget</code> 的 <code>State</code>控制。</p><h2 id="无限滚动列表"><a href="#无限滚动列表" class="headerlink" title="无限滚动列表"></a>无限滚动列表</h2><p>无限滚动是动态的，在上述demo中开发无限滚动列表，需要在State类 <code>WorldState</code> 中操作。</p><p>无限滚动列表，需要有个无限的数组数据源，所以首先在 <code>WorldState</code> 创建一个数组，用于存放数据源：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorldState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">RandomWorld</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _worldArray = &lt;WordPair&gt;[]; <span class="comment">//创建数组，存放内容是WordPair。在Dart中，使用_前缀，会强制使其变为私有</span></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了数据源，开始创建一个ListView，这是列表widget：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Widget _listView() &#123;</span><br><span class="line">    <span class="keyword">return</span> ListView.builder( <span class="comment">//ListView类的builder方法</span></span><br><span class="line">      itemBuilder: (context, i) &#123; <span class="comment">//itemBuilder 是ListView的builder属性，是匿名回调函数，接收两个参数BuildContext和 i，i从0开始自增</span></span><br><span class="line">        <span class="keyword">if</span> (i.isOdd) &#123; <span class="comment">//在奇数行添加分割线</span></span><br><span class="line">          <span class="keyword">return</span> Divider();<span class="comment">//分割线</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> index = i ~/ <span class="number">2</span>; <span class="comment">// i/2向下取整，能得到偶数列按照0、1、2、3……的index</span></span><br><span class="line">        <span class="keyword">if</span> (index &gt;= _worldArray.length) &#123;</span><br><span class="line">          _worldArray.addAll(generateWordPairs().take(<span class="number">10</span>)); <span class="comment">//当index是数组长度时，数组最后一位了，再生成10个词组添加到数组中。generateWordPairs()是WordPairs的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _buildRow(_worldArray[index]); <span class="comment">//偶数行，向列表中添加文本</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>向列表中添加文本也是个私有方法 <code>_buildRow</code> :</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Widget _buildRow(WordPair name) &#123; <span class="comment">//传参，数组中的元素WordPair</span></span><br><span class="line">    <span class="keyword">return</span> ListTile( <span class="comment">//返回列表的Tile，类似于iOS中的cell</span></span><br><span class="line">      title: Text(</span><br><span class="line">        name.asPascalCase,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>至此，无限列表已经创建完了。要将无限列表添加到 <code>WorldState</code> 中，替换原来赋值词组的方法 ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold( <span class="comment">//将整个Scaffold 都放到这里处理</span></span><br><span class="line">      appBar: AppBar (</span><br><span class="line">        title: Text(<span class="string">'Home'</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: _listView(), <span class="comment">//body存放自定义的无限列表。</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最后再更改MyApp的方法：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: RandomWorld() <span class="comment">//home直接赋值自定义的动态widget即可。</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行便呈现了无限滚动列表！</p><p><strong>demo的完整代码见工程中的 <a href="https://github.com/mxdios/flutter-demo" target="_blank" rel="noopener">first_demo</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一个flutter demo—— 无限滚动的列表应用&lt;/p&gt;
&lt;p&gt;Material Design （质感设计），Google开发的设计语言，拓展于Google即时的卡片设计。&lt;/p&gt;
&lt;p&gt;flutter提供了丰富的质感设计风格的widgets，在flutter中，几乎所有都是widget，&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Flutter笔记1-搭建开发环境</title>
    <link href="http://markmiao.com/2020/03/12/flutter1/"/>
    <id>http://markmiao.com/2020/03/12/flutter1/</id>
    <published>2020-03-12T01:35:50.000Z</published>
    <updated>2021-06-04T04:07:51.977Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在macOS上搭建flutter开发环境"><a href="#在macOS上搭建flutter开发环境" class="headerlink" title="在macOS上搭建flutter开发环境"></a>在macOS上搭建flutter开发环境</h2><h3 id="获取flutter-sdk"><a href="#获取flutter-sdk" class="headerlink" title="获取flutter sdk"></a>获取flutter sdk</h3><p>官网地址：<a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos" target="_blank" rel="noopener">https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos</a></p><p>github：<a href="https://github.com/flutter/flutter/releases" target="_blank" rel="noopener">https://github.com/flutter/flutter/releases</a></p><a id="more"></a><p>查看flutter SDK版本号：解压后 flutter/version</p><p>添加flutter到path中，’pwd’是解压后flutter的文件路径。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=`pwd`/flutter/bin:$PATH</span><br></pre></td></tr></table></figure><p>export命令文件所在：</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile</span><br></pre></td></tr></table></figure><p>至此，只能在当前路径下使用flutter命令</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>运行 <code>flutter doctor</code> 命令，查看是否需要安装其他依赖。根据提醒安装缺少的环境依赖。</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Doctor</span> <span class="selector-tag">summary</span> (<span class="selector-tag">to</span> <span class="selector-tag">see</span> <span class="selector-tag">all</span> <span class="selector-tag">details</span>, <span class="selector-tag">run</span> <span class="selector-tag">flutter</span> <span class="selector-tag">doctor</span> <span class="selector-tag">-v</span>):</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Flutter</span> (<span class="selector-tag">Channel</span> <span class="selector-tag">stable</span>, <span class="selector-tag">v1</span><span class="selector-class">.12</span><span class="selector-class">.13</span>+<span class="selector-tag">hotfix</span><span class="selector-class">.8</span>, <span class="selector-tag">on</span> <span class="selector-tag">Mac</span> <span class="selector-tag">OS</span> <span class="selector-tag">X</span> 10<span class="selector-class">.15</span><span class="selector-class">.2</span> 19<span class="selector-tag">C57</span>, <span class="selector-tag">locale</span> <span class="selector-tag">zh-Hans-CN</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Android</span> <span class="selector-tag">toolchain</span> <span class="selector-tag">-</span> <span class="selector-tag">develop</span> <span class="selector-tag">for</span> <span class="selector-tag">Android</span> <span class="selector-tag">devices</span> (<span class="selector-tag">Android</span> <span class="selector-tag">SDK</span> <span class="selector-tag">version</span> 28<span class="selector-class">.0</span><span class="selector-class">.3</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Xcode</span> <span class="selector-tag">-</span> <span class="selector-tag">develop</span> <span class="selector-tag">for</span> <span class="selector-tag">iOS</span> <span class="selector-tag">and</span> <span class="selector-tag">macOS</span> (<span class="selector-tag">Xcode</span> 11<span class="selector-class">.3</span><span class="selector-class">.1</span>)</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">Android</span> <span class="selector-tag">Studio</span> (<span class="selector-tag">version</span> 3<span class="selector-class">.3</span>)</span><br><span class="line"><span class="selector-attr">[!]</span> <span class="selector-tag">IntelliJ</span> <span class="selector-tag">IDEA</span> <span class="selector-tag">Ultimate</span> <span class="selector-tag">Edition</span> (<span class="selector-tag">version</span> 2019<span class="selector-class">.2</span><span class="selector-class">.3</span>)</span><br><span class="line">    ✗ <span class="selector-tag">Flutter</span> <span class="selector-tag">plugin</span> <span class="selector-tag">not</span> <span class="selector-tag">installed</span>; <span class="selector-tag">this</span> <span class="selector-tag">adds</span> <span class="selector-tag">Flutter</span> <span class="selector-tag">specific</span> <span class="selector-tag">functionality</span>.</span><br><span class="line">    ✗ <span class="selector-tag">Dart</span> <span class="selector-tag">plugin</span> <span class="selector-tag">not</span> <span class="selector-tag">installed</span>; <span class="selector-tag">this</span> <span class="selector-tag">adds</span> <span class="selector-tag">Dart</span> <span class="selector-tag">specific</span> <span class="selector-tag">functionality</span>.</span><br><span class="line"><span class="selector-attr">[✓]</span> <span class="selector-tag">VS</span> <span class="selector-tag">Code</span> (<span class="selector-tag">version</span> 1<span class="selector-class">.42</span><span class="selector-class">.1</span>)</span><br><span class="line"><span class="selector-attr">[!]</span> <span class="selector-tag">Connected</span> <span class="selector-tag">device</span></span><br><span class="line">    ! <span class="selector-tag">No</span> <span class="selector-tag">devices</span> <span class="selector-tag">available</span></span><br></pre></td></tr></table></figure><p>问题：</p><p>执行 <code>flutter doctor</code> 命令时，提示“无法打开“idevice_id”，因为无法验证开发者”。</p><p>去Mac的“系统偏好设置–&gt;安全隐私–&gt;通用–&gt;允许idevice_id”，重新运行 <code>flutter doctor</code> 命令，弹窗会出现打开按钮。</p><h3 id="全局可用flutter命令"><a href="#全局可用flutter命令" class="headerlink" title="全局可用flutter命令"></a>全局可用flutter命令</h3><ol><li><p>获取flutter SDK路径，用在第2步中添加的路径。</p></li><li><p>不同系统文件目录可能会不相同，以 <code>.bash_profile</code> 为例。在 <code>.bash_profile</code> 文件中添加路径。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="string">"<span class="variable">$PATH</span>:/Users/inspiry/Desktop/work/flutter/bin"</span></span><br></pre></td></tr></table></figure></li><li><p>运行 <code>source $HOME/.bash_profile</code> 刷新命令行</p></li><li><p>使用 <code>echo $PATH</code> 命令查看SDK路径是否已添加</p></li><li><p>使用 <code>which flutter</code> 查找flutter，验证是否可用全局命令</p></li></ol><p>至此，开发环境配置完成。</p><h3 id="flutter其他命令"><a href="#flutter其他命令" class="headerlink" title="flutter其他命令"></a>flutter其他命令</h3><ol><li>查看安装的flutter版本：<code>flutter --version</code></li><li>查看线上flutter分支：<code>flutter channel</code> ，”stable”是稳定版分支，”master”是开发版分支</li><li>升级flutter sdk和依赖包：<code>flutter upgrade</code></li><li>flutter项目中获取项目的依赖包：<code>flutter packages get</code></li><li>flutter项目中升级项目依赖包的最新版：<code>flutter packages upgrade</code></li></ol><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="VS-Code配置"><a href="#VS-Code配置" class="headerlink" title="VS Code配置"></a>VS Code配置</h3><ol><li>安装flutter插件，在Extension中搜索flutter插件，安装，重启VSCode</li><li>验证flutter，在命令面板 <code>command + shift + p</code> 中输入doctor，选择 <code>Flutter: Run Flutter Doctor</code> 运行。查看输出是否有问题。打印结果和命令行中doctor命令结果一致。</li></ol><h3 id="VS-Code新建项目"><a href="#VS-Code新建项目" class="headerlink" title="VS Code新建项目"></a>VS Code新建项目</h3><ol><li>命令面板运行 <code>Flutter:New Project</code></li><li>输入项目名称，回车，选择项目存放目录</li></ol><p>简单的两步便创建了一个flutter项目，项目所需代码在 <code>lib/main.dart</code> </p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>在vscode最下面的状态栏中选择模拟器，点击 <code>运行 - 启动调试</code>，demo会运行到模拟器中</p><p>flutter支持热重载，直接修改 <code>lib/main.dart</code> 中的代码，保存后即刻呈现在APP上。</p><p>问题：</p><ol><li>找不到状态栏：<code>查看 - 外观 - 勾选显示状态栏</code></li><li>提醒在flutter SDK中找不到Dart，要求在命令行中运行 <code>flutter doctor</code> 命令重试，运行命令则无反应。解决办法：在进程中找到 dart 关闭，重启vscode重试。</li></ol><p>至此，开发环境搭建完成。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在macOS上搭建flutter开发环境&quot;&gt;&lt;a href=&quot;#在macOS上搭建flutter开发环境&quot; class=&quot;headerlink&quot; title=&quot;在macOS上搭建flutter开发环境&quot;&gt;&lt;/a&gt;在macOS上搭建flutter开发环境&lt;/h2&gt;&lt;h3 id=&quot;获取flutter-sdk&quot;&gt;&lt;a href=&quot;#获取flutter-sdk&quot; class=&quot;headerlink&quot; title=&quot;获取flutter sdk&quot;&gt;&lt;/a&gt;获取flutter sdk&lt;/h3&gt;&lt;p&gt;官网地址：&lt;a href=&quot;https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github：&lt;a href=&quot;https://github.com/flutter/flutter/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/flutter/flutter/releases&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Flutter" scheme="http://markmiao.com/categories/Flutter/"/>
    
    
      <category term="Flutter" scheme="http://markmiao.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>mRemind 使用条款</title>
    <link href="http://markmiao.com/2018/12/26/shiyongtiaokuan/"/>
    <id>http://markmiao.com/2018/12/26/shiyongtiaokuan/</id>
    <published>2018-12-26T12:09:00.000Z</published>
    <updated>2020-05-07T09:17:20.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用条款"><a href="#使用条款" class="headerlink" title="使用条款"></a>使用条款</h2><p>在购买 mRemind 高级版之前，您应当阅读并遵守以下使用条款。</p><a id="more"></a><h2 id="订阅服务"><a href="#订阅服务" class="headerlink" title="订阅服务"></a>订阅服务</h2><p>我们使用订阅制来管理 mRemind 高级版的用户权益，采用月度订阅和年度订阅。</p><p>确认购买订阅服务后，将向您的Apple ID账户收款。购买连续包年项目，除非您在当前计费周期结束前至少24小时取消订单，否则项目会自动续订，您的账户将在当前计费周期结束前24小时内收取续订费用。</p><p>任何时候，您都可在App Store的账户设置中进行订阅管理。</p><h2 id="订阅服务内容"><a href="#订阅服务内容" class="headerlink" title="订阅服务内容"></a>订阅服务内容</h2><ul><li>添加多条mRemind提醒</li><li>日期选择功能</li><li>自定义时间功能</li></ul><p>这三项为 mRemind 高级版所具备的功能，未购买 mRemind 高级版，也可以使用 mRemind 提供的基础服务：</p><ul><li>添加不超过3条的mRemind提醒</li><li>5、10、20、30分钟的倒计时提醒</li><li>全部提醒的勾选/删除操作</li><li>以及其他 mRemind 提供的服务</li></ul><h2 id="功能可用性"><a href="#功能可用性" class="headerlink" title="功能可用性"></a>功能可用性</h2><p>mRemind 采用订阅制来管理高级功能服务，当订阅过期未续费时，mRemind 将不提供高级版的服务。具体细节如下：</p><ul><li>将无法新增超过3条的 mRemind 提醒</li><li>将无法添加自定义的倒计时时间</li><li>添加 mRemind 提醒时，将无法使用日期选择功能</li></ul><p>但您处在订阅期间所添加的 mRemind 提醒和自定义时间都会保留，继续供您使用。</p><h2 id="退款"><a href="#退款" class="headerlink" title="退款"></a>退款</h2><p>如果您对 mRemind 所提供的服务不满意，请优先考虑通过联系方式联系我们，将您的不满意告知我们，我们会认真考虑您的意见或建议，对 mRemind 作出调整更改，为您提供更好的服务。</p><p>如果您依旧有退款的需求，对此我们表示遗憾，但应用的内购退款流程并不受开发者掌握，您可以通过邮件反馈您的诉求，但还是建议您联系 Apple 的支持团队来进行退款操作处理，具体可查看：<a href="https://support.apple.com/zh-cn/HT204084" target="_blank" rel="noopener">针对从 Apple 购买的 App 或内容申请退款</a>。</p><h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>我们有权根据 mRemind 产品计划和运营情况，独立决定会员订阅服务的具体内容，并有权根据电子内容的版权情况新增或移除电子内容或暂停、终止提供会员订阅服务的部分服务。</p><p>我们也会不时更新本使用条款，我们建议您定期查看该协议，了解变更内容。</p><p>前述更改在此页面上发布立即生效，你同意我们对此免责。</p><h2 id="联系我们"><a href="#联系我们" class="headerlink" title="联系我们"></a>联系我们</h2><p>mRemind 是独立开发项目，您的支持会让 mRemind 有更好的发展，感谢所有 mRemind 的用户。</p><p>如果您对 mRemind 或使用条款有任何疑问或建议，请随时通过 <a href="mailto:i@markmiao.com">i@markmiao.com</a> 与我们联系。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用条款&quot;&gt;&lt;a href=&quot;#使用条款&quot; class=&quot;headerlink&quot; title=&quot;使用条款&quot;&gt;&lt;/a&gt;使用条款&lt;/h2&gt;&lt;p&gt;在购买 mRemind 高级版之前，您应当阅读并遵守以下使用条款。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>隐私政策</title>
    <link href="http://markmiao.com/2018/12/25/yinsizhengce/"/>
    <id>http://markmiao.com/2018/12/25/yinsizhengce/</id>
    <published>2018-12-25T12:09:00.000Z</published>
    <updated>2020-05-07T08:28:05.283Z</updated>
    
    <content type="html"><![CDATA[<p>本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，我们会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。您在使用本应用及服务前，请您务必仔细阅读本政策。你在同意本应用服务使用协议之时，即视为您同意本《隐私政策》（含更新版本）全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。</p><a id="more"></a><ol><li><p>适用范围<br>(a) 在您注册本应用帐号时，您根据本应用要求提供的个人注册信息；<br>(b) 在您使用本应用网络服务，或访问本应用平台网页时，本应用自动接收并记录的您的浏览器和计算机上的信息，包括但不限于您的IP地址、浏览器的类型、使用的语言、访问日期和时间、软硬件特征信息及您需求的网页记录等数据；<br>(c) 本应用通过合法途径从商业伙伴处取得的用户个人数据。 您了解并同意，以下信息不适用本隐私权政策：<br>(a) 您在使用本应用平台提供的搜索服务时输入的关键字信息；<br>(b) 违反法律规定或违反本应用规则行为及本应用已对您采取的措施。</p></li><li><p>信息使用<br>(a)本应用不会向任何无关第三方提供、出售、出租、分享或交易您的个人信息，除非事先得到您的许可，或该第三方和本应用（含本应用关联公司）单独或共同为您提供服务，且在该服务结束后，其将被禁止访问包括其以前能够访问的所有这些资料。<br>(b) 本应用亦不允许任何第三方以任何手段收集、编辑、出售或者无偿传播您的个人信息。任何本应用平台用户如从事上述活动，一经发现，本应用有权立即终止与该用户的服务协议。<br>(c) 为服务用户的目的，本应用可能通过使用您的个人信息，向您提供您感兴趣的信息，包括但不限于向您发出产品和服务信息，或者与本应用合作伙伴共享信息以便他们向您发送有关其产品和服务的信息（后者需要您的事先同意）。</p></li><li><p>信息披露<br>在如下情况下，本应用将依据您的个人意愿或法律的规定全部或部分的披露您的个人信息：<br>(a) 经您事先同意，向第三方披露；<br>(b)为提供您所要求的产品和服务，而必须和第三方分享您的个人信息；<br>(c) 根据法律的有关规定，或者行政或司法机构的要求，向第三方或者行政、司法机构披露；<br>(d) 如您出现违反中国或其他国家有关法律、法规或者本应用服务协议或相关规则的情况，需要向第三方披露；<br>(e) 如您是适格的知识产权投诉人并已提起投诉，应被投诉人要求，向被投诉人披露，以便双方处理可能的权利纠纷；<br>(f) 在本应用平台上创建的某一交易中，如交易任何一方履行或部分履行了交易义务并提出信息披露请求的，本应用有权决定向该用户提供其交易对方的联络方式等必要信息，以促成交易的完成或纠纷的解决。<br>(g) 其它本应用根据法律、法规或者网站政策认为合适的披露。</p></li><li><p>信息存储和交换<br>本应用收集的有关您的信息和资料将保存在本应用及（或）其关联公司的服务器上，这些信息和资料可能传送至您所在国家、地区或本应用收集信息和资料所在地的境外并在境外被访问、存储和展示。</p></li><li><p>Cookie的使用<br>(a) 在您未拒绝接受cookies的情况下，本应用会在您的计算机上设定或取用cookies ，以便您能登录或使用依赖于cookies的本应用平台服务或功能。本应用使用cookies可为您提供更加周到的个性化服务，包括推广服务。<br>(b) 您有权选择接受或拒绝接受cookies。您可以通过修改浏览器设置的方式拒绝接受cookies。但如果您选择拒绝接受cookies，则您可能无法登录或使用依赖于cookies的本应用网络服务或功能。<br>(c) 通过本应用所设cookies所取得的有关信息，将适用本政策。</p></li><li><p>信息安全<br>(a) 本应用帐号均有安全保护功能，请妥善保管您的用户名及密码信息。本应用将通过对用户密码进行加密等安全措施确保您的信息不丢失，不被滥用和变造。尽管有前述安全措施，但同时也请您注意在信息网络上不存在“完善的安全措施”。<br>(b) 在使用本应用网络服务进行网上交易时，您不可避免的要向交易对方或潜在的交易对方披露自己的个人信息，如联络方式或者邮政地址。请您妥善保护自己的个人信息，仅在必要的情形下向他人提供。如您发现自己的个人信息泄密，尤其是本应用用户名及密码发生泄露，请您立即联络本应用客服，以便本应用采取相应措施。<br>7.本隐私政策的更改<br>(a)如果决定更改隐私政策，我们会在本政策中、本公司网站中以及我们认为适当的位置发布这些更改，以便您了解我们如何收集、使用您的个人信息，哪些人可以访问这些信息，以及在什么情况下我们会透露这些信息。<br>(b)本公司保留随时修改本政策的权利，因此请经常查看。如对本政策作出重大更改，本公司会通过网站通知的形式告知。</p></li><li><p>联系我们</p><p>如果您对我们的隐私政策有任何疑问或建议，请随时通过 <a href="mailto:i@markmiao.com">i@markmiao.com</a> 与我们联系。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本应用尊重并保护所有使用服务用户的个人隐私权。为了给您提供更准确、更有个性化的服务，我们会按照本隐私权政策的规定使用和披露您的个人信息。但本应用将以高度的勤勉、审慎义务对待这些信息。除本隐私权政策另有规定外，在未征得您事先许可的情况下，本应用不会将这些信息对外披露或向第三方提供。本应用会不时更新本隐私权政策。您在使用本应用及服务前，请您务必仔细阅读本政策。你在同意本应用服务使用协议之时，即视为您同意本《隐私政策》（含更新版本）全部内容。本隐私权政策属于本应用服务使用协议不可分割的一部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Runtime(1)：消息传递</title>
    <link href="http://markmiao.com/2018/03/16/runtime1/"/>
    <id>http://markmiao.com/2018/03/16/runtime1/</id>
    <published>2018-03-16T09:35:50.000Z</published>
    <updated>2018-03-16T09:37:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>OC是动态语言，只有在运行时才会根据方法名去调用方法，称为给方法发送消息，是因为当调用<code>[demoObj setTest]</code>方法时，编译器会转化为<code>objc_msgSend(demoObj, @selector(setTest))</code>。如果携带参数，如<code>[demoObj setTest:str]</code>，会转化为<code>objc_msgSend(demoObj, @selector(setTest), str)</code>。</p><a id="more"></a><h2 id="unrecognized-selector-sent-to-instance"><a href="#unrecognized-selector-sent-to-instance" class="headerlink" title="unrecognized selector sent to instance"></a>unrecognized selector sent to instance</h2><p><code>unrecognized selector sent to instance</code>是开发中经常遇到的异常，诸如点击事件没有实现，调用了只声明未实现的方法，向NSArray调用了NSMutableArray的方法等等。</p><p>我们定义类<code>DemoObject</code>，在<code>.h</code>中声明方法<code>- (void)setTest;</code>，<code>.m</code>中不写方法实现。然后调用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DemoObject *demoObj &#x3D; [[DemoObject alloc] init];</span><br><span class="line">[demoObj setTest];</span><br></pre></td></tr></table></figure><p>程序会很听话的崩掉，并抛出异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-[DemoObject setTest]: unrecognized selector sent to instance 0x60000000bda0</span><br></pre></td></tr></table></figure><p>在程序崩溃之前，消息会经过下面几个方法转发：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    NSLog(@&quot;解析实例方法&quot;);</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel &#123;</span><br><span class="line">    NSLog(@&quot;解析类方法&quot;);</span><br><span class="line">    return [super resolveClassMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;转发目标选择器&quot;);</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;选择器方法签名&quot;);</span><br><span class="line">    return [super methodSignatureForSelector:aSelector];</span><br><span class="line">&#125;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    NSLog(@&quot;转发调用&quot;);</span><br><span class="line">&#125;</span><br><span class="line">- (void)doesNotRecognizeSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSLog(@&quot;不识别选择器，崩溃&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息会经过上述方法传递，最终未果才会崩溃。在上述方法中我们有三次机会操作消息传递，防止崩溃。</p><ol><li>动态添加方法：<code>+ (BOOL)resolveInstanceMethod:(SEL)sel</code>或<code>+ (BOOL)resolveClassMethod:(SEL)sel</code></li><li>方法重定向：<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code></li><li>消息转发：<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>和<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code></li></ol><h2 id="动态添加方法"><a href="#动态添加方法" class="headerlink" title="动态添加方法"></a>动态添加方法</h2><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><p>在类DemoObject中引入runtime：<code>#import &lt;objc/runtime.h&gt;</code>，使用<code>class_addMethod</code>动态添加方法实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void resolveTest(id self, SEL _cmd) &#123;</span><br><span class="line">    NSLog(@&quot;动态添加方法调用 &#x3D; %@&quot;, NSStringFromSelector(_cmd));</span><br><span class="line">&#125;</span><br><span class="line">+ (BOOL)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel &#x3D;&#x3D; @selector(setTest)) &#123;</span><br><span class="line">        class_addMethod([self class], sel, (IMP)resolveTest, &quot;v@:&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法<code>class_addMethod</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OBJC_EXPORT BOOL</span><br><span class="line">class_addMethod(Class _Nullable cls, SEL _Nonnull name, IMP _Nonnull imp, </span><br><span class="line">                const char * _Nullable types) </span><br><span class="line">    OBJC_AVAILABLE(10.5, 2.0, 9.0, 1.0, 2.0);</span><br></pre></td></tr></table></figure><p>参数意义如下：</p><ul><li>cls：消息接收者</li><li>name：SEL方法名</li><li>imp：要动态添加方法的IMP指针</li><li>types：参数和返回值的符号字符串，<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html" target="_blank" rel="noopener">查看格式文档</a></li></ul><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>解析类方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ (BOOL)resolveClassMethod:(SEL)sel &#123;</span><br><span class="line">    if (sel &#x3D;&#x3D; @selector(setTestClass)) &#123;</span><br><span class="line">        class_addMethod(object_getClass(self), sel, (IMP)resolveTest, &quot;v@:&quot;);</span><br><span class="line">        return YES;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super resolveClassMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的区别在于cls：消息接收者，解析实例方法使用的<code>[self class]</code>，解析类方法使用的<code>object_getClass(self)</code>。</p><p>当self为实例对象时，<code>[self class]</code>与<code>object_getClass(self)</code>等价，因为前者会调用后者。<code>object_getClass([self class])</code>得到元类。</p><p>当self为类对象时，<code>[self class]</code>返回值为自身，还是self，所以上面解析实例方法将<code>[self class]</code>换成<code>self</code>也可以。<code>object_getClass(self)</code>与<code>object_getClass([self class])</code>等价。</p><h2 id="方法重定向"><a href="#方法重定向" class="headerlink" title="方法重定向"></a>方法重定向</h2><h3 id="实例方法-1"><a href="#实例方法-1" class="headerlink" title="实例方法"></a>实例方法</h3><p>重写<code>- (id)forwardingTargetForSelector:(SEL)aSelector</code>方法，可以将消息的接收者替换成其他对象。</p><p>新创建一个类<code>DemoNewObject</code>，将类<code>DemoObject</code>未实现的方法<code>- (void)setTest</code>，在<code>.m</code>中实现，无需在<code>.h</code>中暴露方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (void)setTest &#123;</span><br><span class="line">    NSLog(@&quot;实例方法重定向&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法重定向操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(setTest)) &#123;</span><br><span class="line">        DemoNewObject *obj &#x3D; [[DemoNewObject alloc] init];</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类方法-1"><a href="#类方法-1" class="headerlink" title="类方法"></a>类方法</h3><p>类方法重定向需要重写<code>+ (id)forwardingTargetForSelector:(SEL)aSelector</code>方法，注意是<code>+</code>开头的类方法。</p><p>同样在新类<code>DemoNewObject</code>中实现类方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (void)setTestClass &#123;</span><br><span class="line">    NSLog(@&quot;类方法重定向&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写重定向方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (id)forwardingTargetForSelector:(SEL)aSelector &#123;</span><br><span class="line">    if (aSelector &#x3D;&#x3D; @selector(setTestClass)) &#123;</span><br><span class="line">        return NSClassFromString(@&quot;DemoNewObject&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return [super forwardingTargetForSelector:aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法重定向就是将当前类未实现的方法，重定向到一个实现该方法的新类中，调用新类中的方法实现。实例方法中返回实例对象，类方法中返回类对象。</p><h2 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h2><p>消息转发是通过方法<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>实现的，它可以将不能处理的消息转发给其他对象处理，参数<code>anInvocation</code>是通过方法<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>产生的。</p><p>所以需要重写两个方法，<code>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</code>和<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector &#123;</span><br><span class="line">    NSMethodSignature *signature &#x3D; [super methodSignatureForSelector:aSelector];</span><br><span class="line">    if (!signature) &#123;</span><br><span class="line">        if ([DemoNewObject instancesRespondToSelector:aSelector]) &#123;</span><br><span class="line">            signature &#x3D; [DemoNewObject instanceMethodSignatureForSelector:aSelector];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return signature;</span><br><span class="line">&#125;</span><br><span class="line">- (void)forwardInvocation:(NSInvocation *)anInvocation &#123;</span><br><span class="line">    if ([DemoNewObject instancesRespondToSelector:anInvocation.selector]) &#123;</span><br><span class="line">        [anInvocation invokeWithTarget:[[DemoNewObject alloc] init]];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        [super forwardInvocation:anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考资料</strong></p><p><a href="http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/" target="_blank" rel="noopener">Objective-C Runtime</a></p><p><a href="https://www.jianshu.com/p/60c251712df7" target="_blank" rel="noopener">iOS中的unrecognized selector sent to instance..</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;OC是动态语言，只有在运行时才会根据方法名去调用方法，称为给方法发送消息，是因为当调用&lt;code&gt;[demoObj setTest]&lt;/code&gt;方法时，编译器会转化为&lt;code&gt;objc_msgSend(demoObj, @selector(setTest))&lt;/code&gt;。如果携带参数，如&lt;code&gt;[demoObj setTest:str]&lt;/code&gt;，会转化为&lt;code&gt;objc_msgSend(demoObj, @selector(setTest), str)&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Runtime" scheme="http://markmiao.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发笔记三</title>
    <link href="http://markmiao.com/2018/03/02/ios3/"/>
    <id>http://markmiao.com/2018/03/02/ios3/</id>
    <published>2018-03-02T06:31:49.000Z</published>
    <updated>2018-03-02T06:34:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSInterger-to-NSData"><a href="#NSInterger-to-NSData" class="headerlink" title="NSInterger to NSData"></a>NSInterger to NSData</h2><p>NSInterger to NSData，数字转化为Data，打印出来以十六进制形式展示</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- (NSData *)getDataWithInt:(NSInteger)interger &#123;</span><br><span class="line">    Byte b1&#x3D;interger &amp; 0xff;</span><br><span class="line">    Byte b2&#x3D;(interger&gt;&gt;8) &amp; 0xff;</span><br><span class="line">    Byte b3&#x3D;(interger&gt;&gt;16) &amp; 0xff;</span><br><span class="line">    Byte b4&#x3D;(interger&gt;&gt;24) &amp; 0xff;</span><br><span class="line">    if (interger &lt;&#x3D; 255) &#123;</span><br><span class="line">        Byte byte[] &#x3D; &#123;b1&#125;;</span><br><span class="line">        return [NSData dataWithBytes:byte length:sizeof(byte)];</span><br><span class="line">    &#125; else if (interger &lt;&#x3D; 65535) &#123;</span><br><span class="line">        Byte byte[] &#x3D; &#123;b2,b1&#125;;</span><br><span class="line">        return [NSData dataWithBytes:byte length:sizeof(byte)];</span><br><span class="line">    &#125; else if (interger &lt;&#x3D; 16777215) &#123;</span><br><span class="line">        Byte byte[] &#x3D; &#123;b3,b2,b1&#125;;</span><br><span class="line">        return [NSData dataWithBytes:byte length:sizeof(byte)];</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        Byte byte[] &#x3D; &#123;b4,b3,b2,b1&#125;;</span><br><span class="line">        return [NSData dataWithBytes:byte length:sizeof(byte)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SHA1加密"><a href="#SHA1加密" class="headerlink" title="SHA1加密"></a>SHA1加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- (NSString *)SHA1Encrypt:(NSString *)string&#123;</span><br><span class="line">    const char *cstr &#x3D; [string UTF8String];</span><br><span class="line">    NSData *data &#x3D; [NSData dataWithBytes:cstr length:string.length];</span><br><span class="line">    uint8_t digest[CC_SHA1_DIGEST_LENGTH];</span><br><span class="line">    CC_SHA1(data.bytes, (CC_LONG)data.length, digest);</span><br><span class="line">    NSMutableString *output &#x3D; [NSMutableString stringWithCapacity:CC_SHA1_DIGEST_LENGTH *2];</span><br><span class="line">    for (int i &#x3D; 0; i&lt;CC_SHA1_DIGEST_LENGTH; i++) &#123;</span><br><span class="line">        [output appendFormat:@&quot;%02x&quot;,digest[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    return output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iPhone屏幕单位"><a href="#iPhone屏幕单位" class="headerlink" title="iPhone屏幕单位"></a>iPhone屏幕单位</h2><p>ios开发中设置的size为pt，pt是绝对长度，等于1/72英寸，等于1/72*25.4毫米。</p><p>px是像素，像素点的密度代表着屏幕清晰度。这就是开发中@1x、@2x、@3x的区别。</p><p>iPhone 3GS是@1x像素级，分辨率为480px * 320px，iPhone4是@2x像素级，分辨率为960px * 640px。这两者尺寸是一样的，所以pt是一样的，在同样大的范围内，iPhone 4的像素点比iPhone 3GS的多一倍。</p><h2 id="QR码的一些知识点"><a href="#QR码的一些知识点" class="headerlink" title="QR码的一些知识点"></a>QR码的一些知识点</h2><p>QR码有40个版本，版本1是21 x 21个小方块组成，版本2是25 x 25个小方块，每增加1版本，二维码长宽各增加4个方块。所以最高版本40，方块数为177 * 177。计算公式是：(V-1) * 4 + 21</p><p>使用CIFilter生成QR码</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生码Objective-C</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)markCode:(<span class="built_in">NSString</span> *)code &#123;</span><br><span class="line">    <span class="built_in">CIFilter</span> *filter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIQRCodeGenerator"</span>];</span><br><span class="line">    [filter setDefaults];</span><br><span class="line">    <span class="built_in">NSData</span> *data = [code dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    [filter setValue:data forKey:<span class="string">@"inputMessage"</span>];</span><br><span class="line">    [filter setValue:<span class="string">@"L"</span> forKey:<span class="string">@"inputCorrectionLevel"</span>]; <span class="comment">//二维码的纠错级别 L &lt; H &lt; Q &lt; M</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CIColor</span> *color1 = [<span class="built_in">CIColor</span> colorWithCGColor:[<span class="built_in">UIColor</span> blackColor].CGColor];<span class="comment">//二维码颜色</span></span><br><span class="line">    <span class="built_in">CIColor</span> *color2 = [<span class="built_in">CIColor</span> colorWithCGColor:[<span class="built_in">UIColor</span> whiteColor].CGColor];<span class="comment">//背景色</span></span><br><span class="line">    <span class="built_in">NSDictionary</span> *parameters = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys: filter.outputImage ,<span class="string">@"inputImage"</span>, color1,<span class="string">@"inputColor0"</span>, color2,<span class="string">@"inputColor1"</span>,<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">CIFilter</span> *newFilter = [<span class="built_in">CIFilter</span> filterWithName:<span class="string">@"CIFalseColor"</span> withInputParameters:parameters];</span><br><span class="line">    <span class="built_in">CIImage</span> *outPutImage = [newFilter outputImage];</span><br><span class="line">    <span class="keyword">int</span> version = (<span class="keyword">int</span>)((outPutImage.extent.size.width - <span class="number">21</span>) / <span class="number">4.0</span> + <span class="number">1</span>); <span class="comment">//获取该二维码的版本号</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> createNonInterpolatedUIImageFormCIImage:outPutImage withSize:<span class="number">600</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//让二维码变的清楚</span></span><br><span class="line">- (<span class="built_in">UIImage</span> *)createNonInterpolatedUIImageFormCIImage:(<span class="built_in">CIImage</span> *)image withSize:(<span class="built_in">CGFloat</span>) size &#123;</span><br><span class="line">    <span class="built_in">CGRect</span> extent = <span class="built_in">CGRectIntegral</span>(image.extent);</span><br><span class="line">    <span class="built_in">CGFloat</span> scale = MIN(size/<span class="built_in">CGRectGetWidth</span>(extent), size/<span class="built_in">CGRectGetHeight</span>(extent));</span><br><span class="line">    size_t width = <span class="built_in">CGRectGetWidth</span>(extent) * scale;</span><br><span class="line">    size_t height = <span class="built_in">CGRectGetHeight</span>(extent) * scale;</span><br><span class="line">    <span class="built_in">CGColorSpaceRef</span> cs = <span class="built_in">CGColorSpaceCreateDeviceRGB</span>();</span><br><span class="line">    <span class="built_in">CGContextRef</span> bitmapRef = <span class="built_in">CGBitmapContextCreate</span>(<span class="literal">nil</span>, width, height, <span class="number">8</span>, <span class="number">0</span>, cs, (<span class="built_in">CGBitmapInfo</span>)kCGImageAlphaPremultipliedLast);</span><br><span class="line">    <span class="built_in">CIContext</span> *context = [<span class="built_in">CIContext</span> contextWithOptions:<span class="literal">nil</span>];</span><br><span class="line">    <span class="built_in">CGImageRef</span> bitmapImage = [context createCGImage:image fromRect:extent];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGContextSetInterpolationQuality</span>(bitmapRef, kCGInterpolationNone);</span><br><span class="line">    <span class="built_in">CGContextScaleCTM</span>(bitmapRef, scale, scale);</span><br><span class="line">    <span class="built_in">CGContextDrawImage</span>(bitmapRef, extent, bitmapImage);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">CGImageRef</span> scaledImage = <span class="built_in">CGBitmapContextCreateImage</span>(bitmapRef);</span><br><span class="line">    <span class="built_in">CGContextRelease</span>(bitmapRef); <span class="built_in">CGImageRelease</span>(bitmapImage);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIImage</span> *outputImage = [<span class="built_in">UIImage</span> imageWithCGImage:scaledImage];</span><br><span class="line">    <span class="keyword">return</span> outputImage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;NSInterger-to-NSData&quot;&gt;&lt;a href=&quot;#NSInterger-to-NSData&quot; class=&quot;headerlink&quot; title=&quot;NSInterger to NSData&quot;&gt;&lt;/a&gt;NSInterger to NSData&lt;/h2&gt;&lt;p&gt;NSInterger to NSData，数字转化为Data，打印出来以十六进制形式展示&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
</feed>
