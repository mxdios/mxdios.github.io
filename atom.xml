<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mark Miao</title>
  <subtitle>Mark’s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://markmiao.com/"/>
  <updated>2017-12-05T07:53:19.000Z</updated>
  <id>http://markmiao.com/</id>
  
  <author>
    <name>Mark</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>APP国际化</title>
    <link href="http://markmiao.com/2017/12/01/duoyuyan/"/>
    <id>http://markmiao.com/2017/12/01/duoyuyan/</id>
    <published>2017-12-01T06:53:14.000Z</published>
    <updated>2017-12-05T07:53:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>旧文新录，好多主流app都支持多语言(或者叫本地化/国际化)，有的是自动适应系统语言，有的是用户选择修改。比如微信支持如下语言，可以根据系统自适应，也可以用户更改。</p>
<a id="more"></a>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/QQ20161117-0.png?raw=true" alt="微信支持的语言环境"></p>
<h2 id="创建多语言文件"><a href="#创建多语言文件" class="headerlink" title="创建多语言文件"></a>创建多语言文件</h2><p>在工程中<code>command + n</code>创建文件，选择<code>iOS</code> -&gt; <code>Resource</code> -&gt; <code>Strings File</code>文件，自定义文件名，创建完成。</p>
<h2 id="添加多语言"><a href="#添加多语言" class="headerlink" title="添加多语言"></a>添加多语言</h2><p>选中新创建的多语言文件，展开右侧的侧边栏，在侧边栏里，点击<code>Localization</code>下的<code>Localize...</code>按钮，选择<code>English</code>，点击<code>Localize</code>。</p>
<p>选中工程在<code>PROJECT</code>里面的<code>Localizations</code>，添加语言。</p>
<p>每添加一个，在新建的多语言文件下就会多一个以<code>.strings</code>为后缀名的文件，这就是每个语言对应的语言文件。里面存放的语言文字是以<code>key - value</code>形式保存，每个文件中<code>key</code>是一样的，<code>value</code>对应着该语言下的文字。比如：</p>
<p>中文简体文件<code>File.strings(Chinese(Simplified))</code>里面存放的是：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"text"</span>=<span class="string">"世界，你好。"</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p>英文文件<code>File.strings(English)</code>里存放的是：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">"text"</span>=<span class="string">"hello,world."</span><span class="comment">;</span></div></pre></td></tr></table></figure>
<p><code>key</code>值保持一致<code>text</code>，<code>value</code>对应该处文本的每种语言翻译。</p>
<h2 id="适应系统语言"><a href="#适应系统语言" class="headerlink" title="适应系统语言"></a>适应系统语言</h2><p>访问语言文件的宏定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#define NSLocalizedString(key, comment) \</div><div class="line">	    [NSBundle.mainBundle localizedStringForKey:(key) value:@&quot;&quot; table:nil]</div><div class="line">#define NSLocalizedStringFromTable(key, tbl, comment) \</div><div class="line">	    [NSBundle.mainBundle localizedStringForKey:(key) value:@&quot;&quot; table:(tbl)]</div><div class="line">#define NSLocalizedStringFromTableInBundle(key, tbl, bundle, comment) \</div><div class="line">	    [bundle localizedStringForKey:(key) value:@&quot;&quot; table:(tbl)]</div><div class="line">#define NSLocalizedStringWithDefaultValue(key, tbl, bundle, val, comment) \</div><div class="line">	    [bundle localizedStringForKey:(key) value:(val) table:(tbl)]</div></pre></td></tr></table></figure>
<p>使用<code>NSLocalizedStringFromTable(key, tbl, comment)</code>宏定义赋值显示多语言的控件，<code>key</code>是多语言文件里的<code>key</code>值，<code>tbl</code>是多语言文件名，<code>comment</code>是注释，可空填nil。使用方式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">_label.text = NSLocalizedStringFromTable(@&quot;text&quot;, @&quot;File&quot;, nil);</div></pre></td></tr></table></figure>
<p>还可以使用宏<code>NSLocalizedString(key, comment)</code>，没有<code>tbl</code>文件名参数，这时工程里的多语言文件名必须为<code>Localizable</code>。</p>
<h2 id="手动设定语言"><a href="#手动设定语言" class="headerlink" title="手动设定语言"></a>手动设定语言</h2><p>语言文件在工程内是以<code>.lproj</code>格式存储的，比如简体中文是<code>zh-Hans.lproj</code>，繁体中文是<code>zh-Hant.lproj</code>，英文是<code>en.lproj</code>。</p>
<p>手动设定语言就是让工程访问哪个文件。要保留app的语言设置，下次打开app还是上次设置好的语言环境。语言设置属于偏好设置，一般用<code>NSUserDefaults</code>存储。</p>
<p>保存环境设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSUserDefaults *userd = [NSUserDefaults standardUserDefaults];</div><div class="line">[userd setObject:@&quot;zh-Hans&quot; forKey:@&quot;appLanguage&quot;];//以简体中文为例</div><div class="line">[userd synchronize];</div></pre></td></tr></table></figure>
<p>设置语言环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">NSString *lanType =[NSString stringWithFormat:@&quot;%@&quot;, [[NSUserDefaults standardUserDefaults] objectForKey:@&quot;appLanguage&quot;]];</div><div class="line">NSString *path = [[NSBundle mainBundle] pathForResource:lanType ofType:@&quot;lproj&quot;];</div><div class="line">NSString *showValue = [[NSBundle bundleWithPath:path] localizedStringForKey:@&quot;showTxt&quot; value:nil table:@&quot;File&quot;];</div><div class="line">_label.text = showValue;</div></pre></td></tr></table></figure>
<h2 id="第一次打开app"><a href="#第一次打开app" class="headerlink" title="第一次打开app"></a>第一次打开app</h2><h3 id="手动设置默认语言"><a href="#手动设置默认语言" class="headerlink" title="手动设置默认语言"></a>手动设置默认语言</h3><p>第一次打开app，本地UserDefaults没有存储语言信息，这时可以代码存入一个，后续即可正常访问。</p>
<p>在<code>didFinishLaunchingWithOptions</code>里简单判断一下即可。如果没有，即存入简体中文</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSUserDefaults *userd = [NSUserDefaults standardUserDefaults];</div><div class="line">if (![userd objectForKey:@&quot;appLanguage&quot;]) &#123; </div><div class="line">     [userd setObject:@&quot;zh-Hans&quot; forKey:@&quot;appLanguage&quot;];</div><div class="line">     [userd synchronize];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="显示系统语言设置"><a href="#显示系统语言设置" class="headerlink" title="显示系统语言设置"></a>显示系统语言设置</h3><p>首先要获取系统环境的语言，然后与app支持的语言做比较，如果app支持的语言里有目前系统语言，则显示该语言，如果没有则显示默认语言。</p>
<p>获取系统环境语言：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString *language = [[NSLocale preferredLanguages] objectAtIndex:0];</div></pre></td></tr></table></figure>
<p>具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">NSUserDefaults *userd = [NSUserDefaults standardUserDefaults];</div><div class="line">if (![userd objectForKey:@&quot;appLanguage&quot;]) &#123;//如果本地没有设置语言</div><div class="line">    NSString *language = [[NSLocale preferredLanguages] objectAtIndex:0];//获取系统语言环境</div><div class="line">    if ([language hasPrefix:@&quot;zh-Hans&quot;]) &#123;//简体中文</div><div class="line">        [userd setObject:@&quot;zh-Hans&quot; forKey:@&quot;appLanguage&quot;];//设置为简体中文</div><div class="line">    &#125; else if ([language hasPrefix:@&quot;zh-TW&quot;] || [language hasPrefix:@&quot;zh-HK&quot;] || [language hasPrefix:@&quot;zh-Hant&quot;]) &#123;//台湾繁体，香港繁体和繁体</div><div class="line">        [userd setObject:@&quot;zh-Hant&quot; forKey:@&quot;appLanguage&quot;];//设置为繁体</div><div class="line">    &#125; else if ([language hasPrefix:@&quot;en&quot;]) &#123;//英文</div><div class="line">        [userd setObject:@&quot;en&quot; forKey:@&quot;appLanguage&quot;];//设置为英文</div><div class="line">    &#125;else&#123;//没有支持的语言</div><div class="line">        [userd setObject:@&quot;zh-Hans&quot; forKey:@&quot;appLanguage&quot;];//设置为简体中文</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="多语言开发的坑"><a href="#多语言开发的坑" class="headerlink" title="多语言开发的坑"></a>多语言开发的坑</h2><p><code>LaunchScreen</code>不支持多语言开发，苹果建议不要对启动页进行多语言开发。在<code>LaunchScreen.strings</code>文件中更改不同语言环境下的字符串，并没有效果。</p>
<p>解决办法：删除这些没用的<code>LaunchScreen.strings</code>文件</p>
<p>每种语言添加一个<code>LaunchScreen.storyboard</code>。比如英文对应：<code>LaunchScreen_en.storyboard</code>，繁体中文对应<code>LaunchScreen_zhHant.storyboard</code>。</p>
<p>在<code>InfoPlish.strings</code>下面对应的语言文件中，分别添加如下字段：</p>
<figure class="highlight abnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">UILaunchStoryboardName</span> = <span class="string">"LaunchScreen_en"</span><span class="comment">;//英文文件下添加的</span></div></pre></td></tr></table></figure>
<p>其实这样做也有局限性，在首次安装启动时能选择正确的语言显示，手动更改手机语言环境，重新打开app则无法显示更改后的语言。—— 在模拟器上测试</p>
<h2 id="storyboard和xib多语言"><a href="#storyboard和xib多语言" class="headerlink" title="storyboard和xib多语言"></a>storyboard和xib多语言</h2><p><code>storyboard</code>和<code>xib</code>多语言只支持跟随系统，不支持手动切换。</p>
<p>选中<code>storyboard</code>或<code>xib</code>文件，在右侧面板的<code>Localization</code>中添加语言文件，语言文件会自动检测该<code>storyboard</code>或<code>xib</code>文件中哪些地方进行多语言化。并在文件中给出类似下面的内容，只需要在相应语言文件中修改<code>&quot;title&quot;</code>文本即可</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/* <span class="keyword">Class</span> = <span class="string">"NSMenuItem"</span>; title = <span class="string">"Item 1"</span>; ObjectID = <span class="string">"sxW-84-y91"</span>; */</div><div class="line"><span class="string">"sxW-84-y91.title"</span> = <span class="string">"title"</span>;</div></pre></td></tr></table></figure>
<p><code>storyboard</code>和<code>xib</code>的多语言化是根据<code>ObjectID</code>来区分的。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-12-05-11-49-56.png" alt="ObjectID"></p>
<h3 id="国际化自动脚本"><a href="#国际化自动脚本" class="headerlink" title="国际化自动脚本"></a>国际化自动脚本</h3><p>有一个很大的问题是多语言文本不能实时更新，当你新拖入一个控件，多语言文件中并不会更新该控件的<code>ObjectID</code>。添加脚本，实现编译工程多语言文件实时更新。</p>
<ol>
<li><p>Xcode中添加脚本，脚本地址和添加脚本的方法：<a href="https://github.com/onezens/AutoLocalization" target="_blank" rel="external">AutoLocalization</a></p>
</li>
<li><p>终端运行脚本，首先更改脚本文件中的<code>filePath</code></p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果在终端运行，注意要修改自己需要国际化的项目文件夹的路径！</span></div><div class="line">filePath = <span class="string">'/Users/inspiry/Desktop/work/workCode/XDProject/mremind/mremind'</span></div></pre></td></tr></table></figure>
<p>然后在终端中执行Python文件</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">python</span> AutoGenStrings.<span class="keyword">py</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旧文新录，好多主流app都支持多语言(或者叫本地化/国际化)，有的是自动适应系统语言，有的是用户选择修改。比如微信支持如下语言，可以根据系统自适应，也可以用户更改。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>十一长假旅行记</title>
    <link href="http://markmiao.com/2017/11/26/sycjlxj/"/>
    <id>http://markmiao.com/2017/11/26/sycjlxj/</id>
    <published>2017-11-26T07:09:52.000Z</published>
    <updated>2017-11-27T01:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我迄今为止写的最长的一篇游记，详细记录了我们这次旅行的所有事情。为的是我们老的那一天，可以拿出来自己回忆，或者给孩子们讲讲我们年轻时的故事。开篇之前，感谢晓带我去了那么多地方，也感谢你一直陪着我，我们一起面对了那么多事。以后，你负责带我玩，我负责记录玩的故事。</p>
<p>开始吧，一万五千多字呢！加油，读到结尾。</p>
<a id="more"></a>
<h2 id="出发之前"><a href="#出发之前" class="headerlink" title="出发之前"></a>出发之前</h2><p>今年国庆和中秋在一起，十一长假比往年多了一天。晓没有假期，但玩心可比我这有假期的大多了。不安分的小心思又开始蠢蠢欲动：“咱们放假去哪玩？”我说：“你十一有假？”“我可以换班。”“……”</p>
<p>在决定去三亚之后，我没拖延便订了往返机票。10月06日-10月9日4天3晚，三亚畅快浪一圈。晓纠结了好几天，最后在大东海附近，订了一家依山傍海、自带泳池的酒店。看来这次挥霍是要可劲儿地往腐败里造了。</p>
<p>在出发前一周的时候，我贱嗖嗖的看了一眼某程上的机票，这一看不要紧，直接导致了珠海之行。</p>
<p>我发现返程机票比预定的便宜了近2000块钱，谁能了解一个资深的、抠搜的穷逼，此刻的心情？我急急忙忙向晓汇报了这个重大发现，她估计是忙，让我自己思量着办。</p>
<p>我有一个大胆的想法：“退了重买！”退票需要花700多的退票费。我看过改签，改签花的更多不合适。思前想后，退了重买还能省1000多！赚大了啊！按耐不住激动心情的同时，我仍不失谨慎地仔细核对了航班的起飞时间、地点，反复刷新了几次，确实是5折低价机票。</p>
<p>机不可失，时不再来，不再犹豫地点了退票……然后，然后就掉坑里了。</p>
<p>当时为什么不去某猪上看一下此次航班的票价呢？为什么不让晓核实一下？为什么不先买后退呢？事后的这些扪心自问还有什么用？最应该自问的是：已经订完了，为什么还要去看机票？贱不贱！</p>
<p>后续情节：我退了票，再去看的时候，5折低价已经不见了，取而代之的是8折，比我买的时候更贵了！“这可怎么办？”刹那间，如坠冰窟，脑袋嗡嗡的，有种凉飕飕的憋屈感。太坑了！紧接着我意识到一个更恐怖的问题——怎么跟晓交代？</p>
<p>晓没有怪我，我也该长记性：买完的东西，别贱嗖嗖的再去看价格！以后的几天，各种比价机票，加降价提醒。结果很明显，5折低价再也没出现。后来打算在珠海转机回京，这样相对便宜。我说：“都这样了，索性去珠海玩一天。你想去哪玩？”“长隆！”晓脱口而出，地铁上滚动播出的广告还是有效果的。于是在某猪（对某程怀恨在心）分别订了三亚到珠海，珠海到北京的机票。</p>
<p>事后我猜，某程是不是有诱导退票的嫌疑？对已购航班显示大折扣低价，诱导退票重买，赚取退票费。当退完之后，低价立马回升。对于某程，使这么阴暗的手段不是没可能。或者换个高大上的说法：对于已购航班，某程鼓励低价增加乘机人，让利用户。我不知道是哪种，也没研究过。但确实是退票之前存在低价机票，退票之后折扣就变了。</p>
<h2 id="启程"><a href="#启程" class="headerlink" title="启程"></a>启程</h2><p>10月6日早7:25的飞机。晓从单位出发，我从家里带着行李出发。我原本计划坐地铁，起得有点晚，安检测出行李箱中有喷雾，开箱检查，因此又错过了一班地铁，下一班地铁到了已经5点半了。我算了一下：再坐一个半小时地铁，7点多，飞机舱门都关了。我当机立断：出地铁，打车去！早干嘛去了？</p>
<p>晓从单位出发稍微近点，我走的早一些，比她早到了几分钟。打印登机牌，办理行李托运，飞机准时起飞，除了没来得及吃早餐，一切完美。</p>
<p>11:35到三亚凤凰机场，下飞机的时候正在下雨。从我们准备去三亚，我就一直关注天气，我们玩的这几天，天气预报一直显示下雨。比起机票，我更纠结的是三亚的天气。可万万没想到的是：最坑我们的不是三亚的雨，而是北京的一场雨。</p>
<p>从机场坐出租车到酒店，一路上都在下雨。我们的心情也随着这场雨越来越低落，看看这阴雨连绵的天，难道要在酒店度假了？</p>
<p>到酒店已经12点多了。虽然在飞机上吃了点，但这时也饿的前心贴后背了。在网上搜到一家“鹿港海鲜店”，步行1公里，中间要乘坐轮渡。抱着对乘船的向往去了渡口。渡口空无一人，有点废弃的样子，我看了一下地图，这里是“三亚河”和“临春河”的入海口，到对岸也就20米的距离，没有桥，只有轮渡2元一位。等了几分钟丝毫没有船过来的意思，我去旁边店铺问店主，船什么时候会来。店主不耐烦的嘟嘟囔囔的说了一大堆，我大概听懂的意思是：“人够了才有船，俩人都不够油钱……”得了，打车吧。</p>
<p>打车绕了一大圈，终于到了所谓的“鹿港海鲜店”。我俩下车，四处张望，一片破败萧条，到处都是拆了一半的房子。海鲜店不会被拆了吧？我们在电线杆上发现“鹿港海鲜店”的牌子，下面一个箭头指向小巷深处。我俩战战兢兢地走进小巷，一排低矮的门房像是后厨，这什么玩意？网上的五星好评和光鲜亮丽的海鲜餐厅去哪了？我俩四目相对，从对方的眼神中都能看到饥饿如火。</p>
<p>好在附近有一个“三亚国际购物中心”，这里应该有吃的。在购物中心里找到一家“匠子烤鱼”，美美的吃了一顿带汤的烤鱼。汤不是烤鱼的汤汁，是差点没过鱼的汤水，这煮烤兼备的做法还是第一次见，更突兀的是上面立着的两根麻花，我咬了一口，硌牙。值得称赞的是鱼很嫩，很鲜，味道很好。这是抵达三亚的第一餐。</p>
<h2 id="三亚湾"><a href="#三亚湾" class="headerlink" title="三亚湾"></a>三亚湾</h2><p>在我的计划里，今天下午要去：鹿回头、大东海、三亚湾、椰梦长廊、天涯海角。吃完饭，逛了一会儿，还是一直下雨，然后决定回酒店睡觉，计划不如变化快嘛。雨天睡觉是最惬意的，这一觉睡到晚上七点多，雨已经停了。走吧，去体验三亚的夜生活，我们去了三亚湾。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WechatIMG156.jpeg" alt="酒店夜景"></p>
<p>这个夜晚终于有了度假的样子：品尝海鲜大排档，欣赏海南广场舞，参加海滩大捕鱼，对了，还吃了个特别甜的大芒果。</p>
<p>晓说来三亚必须要吃一次海鲜大排档，在玻璃柜里有供人选择的各式各样的活海鲜，现场称重，现场做。我们要了一只大螃蟹、一盘大虾，一盘扇贝、一个椰子，海鲜并没有想象中的那么好吃，但是很新鲜。打车的时候，司机师傅告诉我们：“三亚是个旅游消费城市，现在没有宰客现象，都是明码标价的贵。”在这里想要实惠？不存在的。游客的尝鲜心理才是卖点，贵不贵、好不好吃另说，不尝一口总有些遗憾，卖的就是这个体验。</p>
<p>吃完海鲜，满嘴的腥气油腻。晓买了一个大芒果，我觉得以前的芒果都白吃的，这才是芒果该有的味道。吃着芒果向海边走去，远远便听到有音乐声。原来是一群中年男人围着一个音响在跳舞，一个个的上下扭动着身子，像被音乐控制了的印度蛇一样，那妖娆的身段，真骚。我说：“这广场舞跟咱们那果然不是同一个舞种。”</p>
<p>海边的夜景很美，霓虹璀璨，映照海面。一浪一浪的海水冲刷着海滩，还有一些人在海里游泳。远处的高楼大厦灯光闪烁，组成了各种图案。为了腾出手拍照，我三下五除二把最后一块带核的芒果肉吃完，吃的这个爽，我觉得比刚才的大螃蟹好吃。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01042.JPG" alt="大东海夜景"></p>
<p>沿着海边走了一段，发现有人在从海里往海滩上拽绳子，游客也帮着拽。渐渐地海里的网露出来了，有人在捕鱼。这是一张很长的网，呈扇形埋在海里，两头两拨人在往上拽。拽的人大部分都是游客，看来捕鱼的人也是为了玩。好多人聚拢过来，网里出现一只螃蟹，一条鱼都会引发阵阵惊叫。晓对这个兴趣颇大，拿着手机帮忙照明，晓一发现有海鲜，就急忙招呼我：“那、那、那……照相、照相、拍视频啊！”我手忙脚乱的摆弄着相机和手机，差点把手机掉海里。网被拉上来了，这一网没有多少海鲜，几只到处跑的螃蟹，几条带鱼，其中一条比较惨，拦腰折了，还有一些小鱼小虾。</p>
<p>我们沿着海岸线走了很长一段，玩到尽兴，9点多才回酒店。</p>
<h2 id="国际免税城"><a href="#国际免税城" class="headerlink" title="国际免税城"></a>国际免税城</h2><p>第二天的计划是蜈支洲岛和三亚国际免税城。我们住在鹿回头，离蜈支洲岛有一个多小时的车程。酒店有到免税城的免费巴士，我们坐巴士到免税城，逛完之后再去蜈支洲岛。这是今天的行程安排。</p>
<p>早上7点多起床，外面阳光明媚，下着瓢泼大雨，没错，晴天下大雨。没一会儿雨就停了，天空中挂起了两道彩虹，好似从海面升起，跨在绿树葱葱的山上。蜈支洲岛和免税城是三亚之旅的重头戏，清晨的雨后彩虹让我们心情大好，酒店供应的早餐让我们吃的十分满足。多么完美的早晨，让我们对即将到来的购物和游玩充满了期待。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01093.JPG" alt="雨后双彩虹"></p>
<p>9点免费巴士准时到了酒店，我们乘坐巴士向三亚国际免税城出发。在车上，有一位小哥给我们详细讲述了免税城的购物限制、购物方式、提货方式、商品分布等等。只有凭返程航班才能在免税店购物，称为“离岛免税”。每个人都有额度限制，可以现场提货或者机场提货。免税城分AB区，A区几乎全都是女士化妆品，B区有手表、衣服、进口食品等。在这里，你能买到超贵的，但又比其他地方便宜。这种诱惑让三亚国际免税城成为游客必到之处，不来挥霍一点，都不好意思说你来过三亚。</p>
<p>1小时10分钟，到了三亚国际免税城。首先进去的是B区，然后就直接穿过，去了A区。毕竟A区的商品才是晓关心的，我只负责拎包，其他的说了也不算，唉……只能在游记里吐槽一下怨念了。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01099.JPG" alt="三亚国际免税城"></p>
<p>偌大一个A区，全都是女士化妆品，什么迪奥、香奈儿、雅诗兰黛应有尽有，晓两眼放光，看的眼花缭乱，毕竟年轻呐，low相毕露。相反我就比较沉稳，因为我一个牌子都不认识。晓边逛边说：“这个好便宜啊，在外面多少钱多少钱……这个这么便宜！我之前买的多少钱多少钱……哇，还有这个呢……这个我喜欢，这个我也想要……”我没看出哪便宜，价格没有低于三位数的。跟着晓欢快的步子，我迈着重重的步伐，像个思考人生的木偶：我是谁？我在哪里？我在干什么？我身上怎么有个这么重的包？</p>
<p>对于晓来说，逛街总是愉快的。对于我来说，逛街总是饿得快。两个小时过去了，A区全逛了一遍，晓并没有买多少东西，但依旧很开心。我也很开心，因为终于逛完了，该吃饭了。在B区二层点了一份海南鸡饭，一份排骨饭。海南鸡饭号称海南美食，我怎么觉得还没有酒店供应的早餐好吃呢。</p>
<p>吃完饭都12点多了，晓说：“走，陪你在B区逛逛？”我说：“不逛了，咱们赶紧去蜈支洲岛吧，都12点多了。”“真不逛了？什么也没给你买，心里能平衡？”这阴阳怪气的语气，我说：“切，我是那种人吗？我都看了，这里没电子产品，没有我感兴趣的。劳力士，江诗丹顿我也买不起。”“嗯……不仅买不起，你也没那范儿。”“……”</p>
<p>晓买的化妆品全部由免税城打包寄往机场，我们走的时候从机场取货就可以了，购物游玩两不误，花了钱服务就是好。我们在B区溜达了一圈，然后打车去蜈支洲岛。</p>
<h2 id="蜈支洲岛"><a href="#蜈支洲岛" class="headerlink" title="蜈支洲岛"></a>蜈支洲岛</h2><p>蜈支洲岛在三亚海棠湾，远离陆地，是海上的一座小岛，号称“中国的马尔代夫”。</p>
<p>我们1点半抵达蜈支洲岛售票处，天已经下起了毛毛细雨。上岛需要乘坐游轮，我们取了票，去乘船码头。可能是因为天气或已经下午的原因，人并不是很多。登上游轮，工作人员喊话：“有晕船的坐后面啊。”记忆中我好像没晕过船，当然我也没坐过几次船，最近一次还是和晓在香港维多利亚港坐天星小轮。除此之外，就是小时候坐人工撑的小木船渡河去姥姥家。</p>
<p>游轮挺大的，只是有些破旧。我们找了个靠窗的位置坐下，看着窗外毛毛细雨慢慢变大，起伏的海水上布满了雨点，大海像长了麻子一样。望向远处的蜈支洲岛，岛上弥漫着厚厚的乌云，我有一种不详的预感。晓完全没有半点不安，随着游轮起伏，坐在位子上开心的像个傻子——不对——孩子，还问我：“激动不？”</p>
<p>船开了，今天的风浪很大，船十分颠簸。离陆地越远，颠簸的越厉害，我有种坐过山车的感觉。船上的游客都十分激动，随着起伏发出阵阵惊呼，我也激动的有些“上涌”。终于有人支持不住了“呕……哇……哇……”，幸运的是我们没看见，只听见工作人员喊道：“唉呀，去后面，晕船的坐后面。大家都抓好了，今天浪比较大。”我好像明白了，刚才走过来的时候，为什么有的地方有些粘脚了。想到这，“上涌”的劲儿更大了。</p>
<p>游轮行驶了半个多小时，终于到了蜈支洲岛。这时雨已经停了，空中的云依旧有种随时下雨的气势，我都有祷告的冲动了：云爷，高抬贵手，先别下雨，让我们玩半天吧，然而并没有什么卵用。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01130.JPG" alt="蜈支洲岛的海滩"></p>
<p>上岛的第一印象是：没有照片中那么漂亮（好像所有景点都是这样）。人也没有想象的那么多，海滩上都没有下饺子的感觉，更别提比基尼美女了，穿泳衣的都很少。蜈支洲岛的美有一半是由阳光映照出来的吧，现在阳光被乌云遮住了，马尔代夫变成了荒山野岛。</p>
<p>虽然没有阳光，但海岸毕竟还是蜈支洲岛的海岸，盛名之下，其实——还是挺令人激动的。我们在海滩上溜达了一会儿，穿泳衣的虽不多，但也有。我俩有些按耐不住了，来蜈支洲岛游海泳，是我俩盘算好久了的。事后发现，我们既高估了自己的泳技，又低估了海浪的大小。以为在泳池面对人工浪能来去自如，在大海里就能劈波斩浪了。还是太年轻了。</p>
<p>我们找了个可以冲澡换泳衣和寄存衣服的地方，换完泳衣发现这边的海边不让游泳，我们穿着泳衣往让游泳的海水浴场走去。我这四百度近视看啥都模糊，为了游泳把眼镜也一块寄存了，只能戴着有点度数的泳镜还能看清楚点，跟个奥特曼似的。到海水浴场挺远的，模糊的视线导致我对这段的记忆都有些模糊。</p>
<p>终于到了海水浴场，浪挺大的，好多人都带着游泳圈。我俩对视了一眼，想了想只会狗刨的我和只会乱扑腾的晓，不由得有些打怵。走这么远过来，水都不下，都对不起我这亮相了一路的奥特曼造型。后来发现，这种不甘心，呛一口水就治好了。</p>
<p>我俩战战兢兢的下了水，哎呦……哎呦呦……呦呦呦……海水可凉可凉了。我俩都是第一次游海泳，小浪头一浪一浪的，晃晃悠悠倒是能站住。“这和在泳池里也差不多嘛，我先游为敬……”我边说边往里游，晓也大着胆子在浅水区游了两下。一个浪头迎面盖过来，我急忙往上扑通，“卧次——咕噜——奥——”，真咸、真苦、真涩，这口海水虽然没咽进去，但也漱口了。终于切身体会到了为什么海水不能喝，这根本咽不下去好不好。</p>
<p>晓看我被浪拍了，急忙问我：“呛到了吗？”我说：“没有，漱口了。”“什么味？”“你舔一下嘴唇。”“哦？呸——”看来是尝到了，不尝一口海水怎么能算游过海泳呢。</p>
<p>这边海水浴场走几步就到深水区，我试了一下能没过头顶。今天的风浪确实挺大，我俩游了一会儿，各呛了一口水。呛水的感觉比淡水中刺激多了，鼻腔刺挠，喉咙噎得慌，喘不动气，阵阵反胃，眼泪都能呛出来了。我咳了半天，口水都吐干了，才缓过来。我说：“上岸吧，不游了。”晓十分赞同，一口水呛掉了我俩对海泳的所有向往。</p>
<p>上岸往回走，又开始下雨了，下的并不大，我俩一身泳衣也用不着躲雨，没下两分钟又停了。路过用枯树枝摆成的HAPPY、KISS、LOVE的海滩，也并没有图片上那么有意境，但还是好多人在照相。我们让一对情侣帮忙拍了张合影，我一看，“我的肚子这么大了吗？”晓给了我一个白眼：“你以为呢。”后来说给我P一下再发朋友圈，原来只是拿个图给我盖住。</p>
<p>回去换回衣服，算是告别海泳了。蜈支洲岛有好多海上娱乐项目，比如潜水、摩托艇、电动船、水上自行车等，现在的天气和海浪根本不适合玩这些项目。剩下的时间就是领略蜈支洲岛的美丽景色，虽然没有想象中的那么惬意，但也美景怡人，偶尔的小阵雨不仅不扫兴，还增加了些小情调呢。后来发现，还是高兴的太早了。</p>
<p>冯小刚的电影《私人订制》里有个漂亮的泳游池，碧蓝的泳池、绿色的草坪、挺拔的椰子树、巨大茶壶状的藤编房子，旁边当然还立着那个电影里出现的“私人订制”的大牌子。我们在“茶壶”里的藤椅上坐了一会儿，这漂亮到有点小资情调的景致真让人有点不想走。美中不足的是不让进泳池游泳，立了个正在维修的牌子。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01147.JPG" alt="私人订制里的泳池"></p>
<p>我们沿着小路溜达着，走一会儿就会有一片海滩，海滩上都会有一些巨大的石头，有些石头像是沙滩里凸起的一座小山丘，有些则层层靠在一起，还有些半身没在海里，被海浪拍打着。拍照自然是必备任务，我贱嗖嗖的站在了一块被海浪反复冲刷的岩石上，照还没拍完，一个浪差点打湿我半条短裤。</p>
<p>有个叫情人岛的地方，传说龙王被一对秀恩爱的情侣塞狗粮了，一怒之下将情侣变成了两座大山石——去你的海枯石烂吧。这里有一大片珊瑚石，各式各样的。这些珊瑚石上面都是密密麻麻的小窟窿，看着有点起鸡皮疙瘩，但还是捡了两块带回来了。</p>
<p>沿着海岸线到了观海长廊，观海长廊是沿着海岸，在礁石上修建的木质走廊。海面上的云压得很低，海风也变大了，远处开始打雷了，好几次看到乌云中一道闪电直击海面。只可惜没能拍下来，不能将雷神电鱼的劳动场景保留下来，很遗憾。感觉海风越来越大了，观海长廊的下面海浪击打着礁石，发出阵阵轰鸣声。山雨欲来风满楼啊。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01197.JPG" alt="要下雨了"></p>
<p>时间不早了，我们没再多待，坐上回程摆渡车，回到我们寄存衣物，也就是靠近进出岛屿的地方。刚到地方就开始下雨了，不是那种不扫兴的小阵雨了，是桶浇般的大暴雨啊，比瓢泼还猛。我俩买了点吃的，躲避在一个餐桌的太阳伞下。眼前都下白了，像发怒的龙王用海水冲刷蜈支洲岛一般，大雨滂沱啊。</p>
<p>过了好一会儿雨才渐渐变小，我将寄存的包取回来，已经5点多了，该离岛了。码头上，离岛的人早就浩浩荡荡地排起了长队，没办法，排队吧。</p>
<p>进岛时不详的预感应验了，终究没躲过这场大雨。排着队，大雨一阵阵袭来，你能体会到一群撑着伞的人挤在一起时的感觉吗？说不定谁的伞角就抵在我的后脖颈子上了，雨水顺流而下，凉飕飕地一激灵，偶尔的炸雷让人群更骚乱，晓比小孩还害怕打雷，滋儿哇乱叫的。还有带孩子来的，大人将雨伞盖在婴儿车上，但是雨太大，只能遮挡孩子上半身不被雨淋，腿都湿了，可怜的娃。</p>
<p>晓抱怨说：“为什么每次都能遇上下大雨，去香港迪士尼遇上台风大雨，来蜈支洲岛又遇上大雨。”我说：“龙行雨，虎行风。说明我是真龙天子。”“嗯，这个牛逼吹的稳，淋死你都不冤枉。”</p>
<p>足足排了半个小时的队，终于上船了，几乎浑身湿透。回程的游轮底部中间凹两边吃水，稳当多了，没有呕吐事件发生。上岸后便没有雨了，好像只有蜈支洲岛那边在下雨。我的祷告没用，云爷还是欺负了我们。</p>
<p>晚上在“大菠萝”（大东海国际购物中心）对面的一个小吃街吃的饭，干炒牛河、蛏子、烤鱿鱼、扇贝，味道挺好的，虽然不是很贵，但也谈不到实惠。吃完饭去“大菠萝”买了一大堆吃的，还买了个椰子冻。对于爱吃甜品和果冻的我来说，椰子冻真是特别好吃，乳白色果冻状，吃一勺满嘴椰香，回味无穷。晓对此就没啥兴趣，她不爱吃甜食，吃了一勺就没再吃。所以便宜了我，她如果爱吃，我也就能吃一勺。</p>
<h2 id="森林公园"><a href="#森林公园" class="headerlink" title="森林公园"></a>森林公园</h2><p>转眼到第三天，也是我们在三亚的最后一天，明天就要去珠海长隆了。今天的天气很好，蔚蓝的天空，洁白的云，今天的行程安排是“亚龙湾热带天堂森林公园”。最后一天了，不想那么赶，在酒店吃了早餐，10点多到了森林公园。</p>
<p>出发前在网上订的门票，森林公园的门票要提前1小时预订，不知道为什么会有这个规定。我取票的时候，售票员告诉我还差6分钟。等了一会儿，取完票，开始了“亚龙湾热带天堂森林公园”的旅程。</p>
<p>由于今天是十一假期的最后一天，游玩的人不多。门票是包含游览车的，因为公园很大，山路陡峭崎岖，单靠俩腿可走不完。就像九寨沟一样，游玩的景点错落分布在山上，逛完一个景点，直接坐游览车去下一个景点。游览车的司机技术超牛，两辆车宽的山路七扭八拐地，有些地方斜坡近45度了，一边是悬崖，一边是高山，坐上面跟坐过山车一样。我们还发现，当两车相遇的时候，下山的车会主动停下来，让上山的车先过，是因为上山的车停下来很难再起步吧，如果溜车的话会很危险。</p>
<p>森林公园植被繁茂，在里面感觉特别闷热潮湿，而且还有蚊子。晓抱怨为什么没把驱蚊液带上，昨天去蜈支洲岛也忘记带了。</p>
<p>第一站是”兰花谷“，可能由于刚下过雨，一座石板浮桥已经被水没过了，溪水潺潺，只能脱鞋趟水。浮桥上游是一个莲花池，池子里并没有多少荷叶莲花，旁边有一排吐水的动物石雕，但个别的已经吐不出水了。对面有个凉亭，凉亭旁的池子里还有个骑水牛、吹笛子的牧童石雕。这算是一个陈旧的中国风公园景观。比起这些，感觉周围的茂密的热带丛林更有吸引力。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01241.JPG" alt="莲花池"></p>
<p>往前走一段，是一片茂密的竹林。竹子都有大碗口那么粗，中间是并排的大石条延伸进去的小路。导游说这里还没完全开发，建议不要进去，以免迷路。这个比刚才的公园吸引人多了，我俩顺着这曲径通幽的小路往里走了一段，发现这条小路能延伸到很远。我们没再往深了探索，怕走丢了。</p>
<p>森林公园有个“飞跃雨林”的项目，有4段滑索和一些过关项目。我订的只是门票，并不包含这些娱乐项目。我俩觉得只看景色过于平淡，和我们年轻人的青春活力有些不符（我还没开始保温杯泡枸杞呢，还年轻），不安分的玩心又开始蠢蠢欲动了。在导游的撺掇下，买了“飞跃雨林”的票。建议去玩的朋友提前在网上订通票，会便宜些。</p>
<p>“飞跃雨林”的起始点是山顶，导游说玩这个会有照片赠送，后来才发现，原来是今天所有游玩的人都加入一个微信群，所有照片发到群里，自己找去吧。当晚，从几百人的群里翻找几千张照片，终于从中找出十几张我们的。为了玩“飞跃雨林”，中间索桥的景点都没过去，打算下山时再去看看。我们到了山顶，把包寄存起来，在身上绑上那些绳绳套套的，戴上头盔，像给大厦擦玻璃的蜘蛛人。然后就签了一张“生死状”，慷慨赴玩！</p>
<p>有漫步人生、速度与激情、飞跃龙门、步步惊心、空中飞度、荆棘人生、太极梅花桩、空中单骑、极限挑战、翻山越岭、地动山摇、时空穿越等十二个丛林拓展体验项目。这么唬人的名字我哪记得住，是从网上抄的。其实就是一些攀爬过障碍的体验，过横梯、踩木板、踩钢索、过栅栏、蹬自行车、滑索道……恩，还是这些接地气的名字比较符合实际。安全措施挺完善的，下面有安全网，上面有安全绳，有部分项目需要体力。结束后，晓直呼胳膊都酸了。其实还是蛮刺激的，特别是乘坐索道，飞过丛林时的速度体验，这就是心跳的感觉吧？头顶上滑轮的刺啦声真令人不安。</p>
<p>结束”飞跃雨林“的体验，直接乘坐游览车返回山顶。山顶有云顶咖啡体验，有炭烧咖啡、椰奶咖啡、白咖啡，还有个咸味的海盐咖啡，说在外面喝不到的。我也没喝出那种高端人士的范儿，感觉不如给我来一碗薏米红豆粥。晓老嫌弃我喝这种益气补血的养生粥，我是不是真的老了？</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01307.JPG" alt="山顶"></p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01332.JPG" alt="龙行天下广场"></p>
<p>山顶视野非常好，极目望去，海天一色，景色美不胜收。左边矗立着南海第一楼——沧海楼，右边是龙行天下广场，紫铜浇筑的巨大龙雕，俯瞰天下第一湾——亚龙湾。烟波浩渺，凭海临风，意气风发，胸怀天下。此刻的我们不禁感觉到——有点渴，走，去买两个小菠萝。</p>
<p>小菠萝挺甜的，买的时候旁边的游客问店家：“菠萝是这山上摘得不？”我一愣，咋这么天真呢？店家明显没顾忌到游客的天真无邪，耿直地说：“山上哪有菠萝，都是果园里的。”听得我们直想乐。吃着小菠萝逛一逛山顶的小店，有卖手鼓的，我们体验了一把，完全敲不到点上。还有一个卖字画的，大叔一笔写名字，还可以写反字，在镜子里看才是正过来的，感觉好厉害。</p>
<p>山顶还有《非诚勿扰2》的试婚房，能一览错落分布的鸟巢度假村。下山的时候去了“千里伞”，是在巨石上搭建的圆形平台，上有一个伞盖，站在平台上可以看到下面的“峭壁天池”，都是《非诚勿扰2》的主要拍摄地。最终还是没去索桥，上山爬高走的实在是太累了。</p>
<p>下午2点多离开了“亚龙湾热带天堂森林公园”，午饭又是在大菠萝对面小吃街解决的。晚上六点多去了大东海，我发现海泳如果不呛水也挺好。</p>
<h2 id="大东海"><a href="#大东海" class="headerlink" title="大东海"></a>大东海</h2><p>明天早上就要走了，今晚计划去大东海逛一逛，吃个晚饭，休闲一下。我们根本没打算游泳，毕竟在蜈支洲岛游泳呛水的感觉还记忆犹新。所以也没带泳衣，穿个拖鞋，背个包就出来了。</p>
<p>大东海海水浴场里人挺多的，大人小孩好多都在游泳。晓看出来我也想下水游泳，说：“给你买个泳裤，下去游会吧。”我十分扭捏地说：“不了吧，咱们逛逛算了，不游泳了。”晓说：“去吧，一看你就想游。”泳裤60块钱一条，顿时感觉太贵不值得，加上之前游泳呛水，晓又不和我一起下水，我也没有太大的游泳欲望了。晓一直催促我：“去游吧，最后一下午了，明天咱就走了，想游都没的游了。”纠结了半天，最后——穿短裤直接下水了，穷人最后的倔强。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01412.JPG" alt="大东海"></p>
<p>大东海的海水浴场有很长很长的浅滩区，我往里游了很远，水还是只没过腰部。今晚的浪很小，这种小幅度的起伏，我的狗刨完全应付得了。为了看的清楚，全程眼镜也没摘，也没有呛水，游了大概十多分钟。忽然觉得这才是我们梦想中的海泳，在蜈支洲岛时风大浪大，真不适合游泳。</p>
<p>海滩上摆放着供游客休息的躺椅，我们躺在上面，静静地听着海风卷起一股股海浪，海浪哗啦哗啦冲刷着海滩，夕阳的余晖洒在海面，波光荡漾，一切都是那么的静谧幽美，这才是享受生活嘛。此刻我内心深处只有一个想法——我的短裤什么时候能干？</p>
<p>夕阳终于消失在海平面，天慢慢黑了，灯慢慢亮了，海滩上各式各样的餐馆早就如火如荼的开始营业。我们点了两杯“超级芒果冰”，几串鱿鱼、海螺、扇贝、土豆片等烤串，开始慢慢品尝在三亚的最后一顿晚餐。还遇到一只躺在地上懒萌懒萌的小柯基，一个玩直播搭讪妹子的东北大哥。</p>
<p>在大东海吃完晚餐，回到酒店。我们到三亚三天了，还一直没去酒店的泳池游泳。最后一晚了，本着不能留遗憾的态度，去泳池游了个畅快。泳池有浅水区、深水区，还有专门供孩子游泳的小泳池。晚上有点凉，但在泳池里感觉不到凉。游泳的人还挺多，泳池对面有个大屏幕，放着英叔的僵尸片。我们租了一个游泳圈，游累了坐在游泳圈里歇一会儿。我们也算游了N多次泳了，晓一直没学会潜泳，说潜不下去，往水底钻，扒拉两下就漂上来了。人都是漂不上来，你这潜不下去。</p>
<h2 id="珠海"><a href="#珠海" class="headerlink" title="珠海"></a>珠海</h2><p>10月9日，我们十一之旅的最后一天，也是行程最赶、玩的最爽、囧事最多的一天，总的来说是这次旅程中最精彩的一天。</p>
<p>8:10从三亚凤凰机场飞往珠海金湾机场。我们5:30从酒店出发，走的时候三亚还下着小雨，约的送机服务是位女司机，一辆小车开的四平八稳。6:40到机场，过安检，打印登机牌，托运行李，去cdf(三亚国际免税城提货点)取在免税城买的东西，在汉堡王买了俩汉堡，然后就开始检票登机了。</p>
<p>8点刚过，飞机就急匆匆地起飞了，也就是说这趟航班提前起飞了。着急到什么程度呢，空姐刚说完安全须知，行李架都没检查一遍就起飞了，导致起飞的时候一个行李架的盖子开了，幸运的是没有行李跌落。这么着急起飞一直令我惴惴不安，我胡思乱想：不会有人劫机，逼机长提前起飞吧？这些乱七八糟的想法也一直没告诉晓。</p>
<p>9:20飞机平稳降落在珠海金湾机场，我提起的心也彻底落地了。原来这趟航班大多数乘客都转机，估计是这个原因才提前起飞的。</p>
<p>从金湾机场到“珠海长隆海洋王国”有一个小时的车程，我们计划将行李箱寄存在机场，打车去长隆。晓去了洗手间，我发现机场有好多巴士站，便问了一下。果然有直达长隆海洋王国的巴士，给晓发了个微信就买了最近的一班，买完后发现9:45发车，还有5分钟。这一早上，飞机这么着急，巴士也这么着急。</p>
<p>我急忙给晓发微信催她快点，晓出来就给我一顿乱批：“催什么催，你怎么不跟我商量就订了，也不提前问问几点发车，你行李寄存了吗？”我忽然发现手里还拉着个大行李箱，忘了寄存行李了。急忙去旁边的行李寄存处，他们说大件行李得去楼上寄存，坑我啊。门口有人喊：“去长隆的两位，抓紧检票，发车了。”我晕……</p>
<p>最终还是拎着大行李箱上了巴士，晓一路上都在生我的气。巴士上播放小品，我看小品都憋着不敢笑。车到站了，晓也终于消气了，这煎熬的一路……</p>
<p>车停在“长隆海洋王国”旁边的横琴湾酒店，到景区有几百米的距离。不在酒店住也没法将行李寄存在酒店，幸运的是景区内有行李寄存，只不过是付费的。每半小时就有一班到金湾机场的巴士，下午逛完“海洋王国”坐巴士直接到机场，19:20乘坐从金湾机场到北京首都机场的飞机，22:30抵达北京首都机场，0点之前能到家睡觉。这计划是多么的完美，岂不知计划有多么完美，变化就有多么残忍。</p>
<h2 id="海洋王国"><a href="#海洋王国" class="headerlink" title="海洋王国"></a>海洋王国</h2><p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01442.JPG" alt="长隆海洋王国"><br><img src="http://oalg33nuc.bkt.clouddn.com/DSC01453.JPG" alt="长隆海洋王国"></p>
<p>“长隆海洋王国”的景观用一个字形容就是：大！各种巨大的海洋动物建筑，让你感觉像是真的走进海底，进入一个陆地上不存在的“海洋王国”。景区入口上面就趴着一只巨大的“蓝色鳐鱼”，从“鳐鱼”下面穿过就到了景区内。“鳐鱼”腹部是一个巨大的弧形显示屏，上面播放着海洋奇观。北京世贸天阶的天幕号称世界第一，但我感觉远没有这个漂亮、震撼。从踏入景区的一刹那开始，我俩心情就变得格外舒畅，路上的不愉快早已忘得一干二净，剩下的就是一个字——玩，痛痛快快地玩。</p>
<p>进门左转，第一站“海象山”。名副其实真的是山，石头垒成的两只巨大海象，足有几十米高，如同两座对立的山峰，中间是倾斜的滑道直达水面，是一个叫“超级激流”的水上项目。我俩按耐不住激动，先玩一把刺激刺激。今天已经是工作日了，所以游客特别少，去哪都不用排队，这种感觉真爽。</p>
<p>“超级激流”会溅一身水，入场前需要买雨衣穿上。如果想湿身，不穿也行。我俩穿着薄到透明的小雨衣，坐在第一排，向“海象山”进发。开始是随着水流往前漂，漂到爬坡的地方有链条往上拽。到了坡顶，滑道分明在右侧，船竟然往左转——倒着下去！刚反应过来，身体像是被猛拽下去，耳畔尖叫声骤然而起。急速下降、上升，船停在了两座“大海象山”中间，“超级激流”的最高点。最刺激的要来了，我和晓对望一眼，深吸一口气，大吼一声：“啊——”，我感受到了自由落体，跟跳悬崖似的，穿过“海象山”上的小瀑布，撞开滑道上的水平面，“嘭——”的一声，水溅起了足有三四米高，“哗啦——”洒了一身，多亏了小雨衣。</p>
<p>两座“海象山”是中空的，里面是海象、海狮等海洋动物馆。现在回想起来，我们去过好几个海洋馆了：香港海洋公园，蓬莱海洋极地世界，长隆海洋王国。感觉长隆这次是最好玩的，见到的海洋景观也是最美的。“长隆海洋王国”正式列为第二个有孩子后要带他来的地方，第一个是香港迪士尼。真的适合孩子玩。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01468.JPG" alt="海象山"></p>
<p>从“海象山”里出来，去了“海鸟世界”。这里有各式各样的海鸟，看标牌也叫不上名字。有大长腿的，有大长嘴的，有的看见游客过来就凑上来，伸着长喙要吃的。我们没吃的，太靠近它估计会被啄，那大块头比社会鹅大多了，惹不起，惹不起。</p>
<p>海鸟世界不止有海鸟，还有各种半水栖动物。我们第一次见水豚，像特大个的老鼠，感觉如同老鼠跟猪的后代一样。这里还有各种龟类，有水里的大海龟，陆地上的象龟。我们有幸目睹了两只象龟做羞羞的事情，象龟的壳像个大面包，圆鼓鼓的，爬起来相当费劲。那只公象龟十分艰难地爬上去，却不小心摔了下来。唉……我十分替它惋惜。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01514.JPG" alt="不可描述"></p>
<p>从“海鸟世界”出来，在“缤纷世界”的鳐鱼池附近有小丑表演，在音乐地伴奏下跳舞耍杂技，表演搞笑。围观的游客慢慢多起来，小丑表演经典杂技，同时扔四个球、五个球。游客也不吝啬掌声、呼喊声，大家玩的就是开心。中途邀请游客上去配合表演，晓如愿以偿地被选中了。让她站在中间，两个小丑互相扔道具，晓看着眼前的道具翻飞，也不敢喝彩。表演结束，晓收到了一朵气球小花，开心的像个孩子（这次不是傻子）。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01526.JPG" alt="表演的小丑"></p>
<p>下一站是“极地探险”，这里有企鹅馆、白鲸馆、北极熊馆。在企鹅馆里看到各式各样的企鹅，全球有18种企鹅，体型最大的是帝企鹅。我们还看到了刚出生的小帝企鹅，毛绒绒地，完全没有威风凛凛的样子。它们周围倒是站了一圈身高1米的帝企鹅，如同护卫一般。</p>
<p>出企鹅馆的时候路过一段山洞，山洞后面有个石台上站了两只企鹅雕塑，我俩没在意，突然“嗷——”的一声，一只大蜥蜴向着企鹅，张着大口就蹿出来了。晓被吓得“啊——”的嗓子，比蜥蜴叫声还大，我被吓得一哆嗦。我俩拔腿就要跑，这才回过神来，明显是假的嘛。再去看时，那只假蜥蜴慢慢地缩回去了。我俩被吓够呛，企鹅馆这么萌的地方，为啥设计这么个玩意，神经病啊！</p>
<p>出了企鹅馆就是北极熊馆，北极熊馆有内外两个场地，室外是棕熊，室内是北极熊。在室外，威武雄壮的棕熊正在向游客作揖要吃的呢。有的游客会买两个苹果扔给它，幸运能接住就吃了，不幸运掉深沟里就没得吃了，这一天能为场馆创不少收。室内北极熊过得比较滋润，不用靠卖萌卖苹果，随时可以游泳、睡觉。室内还有因纽特人的冰屋，还有可爱的雪狐。</p>
<p>从“极地探险”出来已经1点多了，我俩找了个餐厅，大快朵颐地吃了一顿。出来玩的这几天，终于吃到大肉块+白米饭了，能让我吃到超满足的标配。“海洋王国”里的“海底餐厅”是最出名的，号称可以和一万多条鱼共进午餐。“海底餐厅”是在地下，有一整面墙是玻璃的，透过玻璃可以看到各种海洋动物，如同置身海底。我们没有去“海底餐厅”吃饭，想体验置身海底的感觉，“海底餐厅”的一面玻璃墙远不如四周和顶部全是玻璃墙的“海洋奇观”。</p>
<p>“长隆海洋王国”的地标性建筑——在鲸鲨馆旁边，一条高达68米的巨大蓝色鲸鲨，这里便是“海洋王国”里最出名的地方——“海洋奇观”。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01577.JPG" alt="巨大的鲸鲨"></p>
<p>我们在蓬莱极地海洋世界也感受过海底的玻璃走廊，看起来头晕，没什么惊艳的。这次不一样，我们真被惊艳到了。这种震撼力是跟场馆大小成正比的，体验的海底环境越大，感受到的震撼力越大，就越能被惊艳到。置身在四周全是玻璃墙，头顶是巨大圆形玻璃穹顶的水底，五光十色的海底世界，几万条鱼在水中游动，这可比躺在自家茶几底下看鱼缸惊艳的多。</p>
<p>除了这个玻璃穹顶，还有一面巨大的玻璃墙，里面是鲸鲨、魔鬼鱼这类大型海洋动物。这面玻璃足有近十米高，几十米宽，旁边有展示这玻璃的，这叫“亚克力玻璃“，厚度有0.65米，我看是有几十片玻璃合在一起，这得承受多大的水压。正对玻璃墙的是个宽阔场地，场地四周有珊瑚树、珊瑚石，还有野营帐篷，可以在这里住一宿。幽蓝的灯光透过海水映照着，太漂亮了。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20171126-140338@2x.png" alt="魔鬼鱼"></p>
<p>“海洋奇观”里还有个“海底互动船”，是一个穿过各种海底奇观的实景互动体验项目。和香港迪士尼的“迷离大宅”类似，也是坐着一个小车上，随着小车前进，会看到各种神奇景观，只是主题不一样。“海底互动船”会穿过玻璃海底走廊、海盗沉船、海底旋涡、海底火山等等奇妙之地，我们看到大鲨鱼、水母游过，会感知到旋涡的旋转，火山的炙热。这绝对又是一次难忘的奇妙旅程。</p>
<p>下午3点有花车巡游，沿着景区内大道巡游表演。音乐响起，开路的小丑会和游客石头剪刀布，赢了的会给个气球，然后我们赢了三四个。后面有各种海洋动物扮演，有代表各个海洋馆主体的花车，有大鲨鱼车、珊瑚车、南极冰山车，还有各种载歌载舞的表演人员，有踩高跷的小丑、跳舞的公主、骑自行车的魔鬼鱼、跳舞的水母、玩滑板的水手，最后是一个巨大的鲸鱼花车。我们没赶上香港迪士尼的花车巡游，这次长隆巡游表演也算弥补了当时的遗憾。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/DSC01682.JPG" alt="花车巡游"></p>
<p>看完花车巡游，又去了海牛馆，这边有过山车和雨林升降塔。看到过山车就想起欢乐谷大爷了，“这年轻人胆子真大，这不是玩命吗？”我们也不年轻了，没敢去玩过山车。只坐了雨林升降塔，俯瞰一下“长隆海洋王国”。后来又去了“海豚馆”，看看晓最喜欢的海豚。这里也有白鲸表演，我们没去看。</p>
<p>这一天下来把我俩累够呛，但也玩的过瘾。出场馆的时候已经下午4点多了，我们是晚上7点20的飞机，路上得花1个多小时，该准备准备去机场了。</p>
<h2 id="回程"><a href="#回程" class="headerlink" title="回程"></a>回程</h2><p>我们本以为这将是十一长假旅行的完美结局。确实，完美的结束了，不完美的才刚刚开始……</p>
<p>回到横琴湾酒店，买了4:30去机场的巴士票。时间都过了，巴士迟迟不来。工作人员打电话咨询，说路上堵车会晚半个小时。怎么办？做决定的时候到了。我当机立断，把车票退了，打车去机场。晓说：“不等等了？”我说：“不等了。”这是我最坚决，也是我最正确的一次决定。</p>
<p>上了出租车，司机师傅说：“看看珠海大桥堵车吗？”我看了一下并不堵。我们丝毫没意识到这边也会堵车，而且堵得是特别厉害。多亏打车，我们在珠海大桥西向车道完全堵死之前过了桥，而接我们的大巴就堵在珠海大桥那，可不是晚半个小时的事。我们在车上看到从西向东的车道已完全堵死了，密密麻麻的车堵了足足六七里路，完全是一动不动，个别幸运的车在可掉头的地方直接掉头回去了，我俩都惊呆了。司机师傅说：“今天已经是工作日了，去机场的路没堵这么厉害，昨天没有四五个小时根本到不了机场。我曾经在这里被堵了七个小时。”我的天呐！</p>
<p>我俩长舒了一口气，如果堵在路上不得急死了。司机师傅也十分健谈，一路上净聊风土人情。他说话港台腔，我得仔细听才能听懂，晓的语言天分比我不知道高到哪里去了，我听不懂的她给我翻译一下。路上看见两辆挂双车牌的车，我们也是第一次见，上面一个广东牌照“粤”，下面一个香港牌照“港”，车的方向盘在右边，是港澳那边的车。司机师傅说这是两地车，可以自由出入香港。还告诉我们，光这一个车牌60万。</p>
<p>快到机场了，我们也没吃晚饭，本打算去机场随便吃点。司机师傅说：“我也没吃饭，前边有家快餐特别好，我去打包一份，你们也可以去尝尝。”我们也去打包了两份快餐，好多肉、好多菜、好多米饭，一份才十几块钱。而且味道特别好，比机场几十上百块的饭好吃多了。</p>
<p>美美的吃完这顿饭，开始了漫长的等待。我们在路上的时候就开始下雨了，机场外雨越下越大。我感觉：飞机不会晚点吧？恭喜我吧，我的感觉是对的。原定19:20起飞，22:30抵达北京。但现在22:30了，还没登机！没登机！</p>
<p>外面的雨早停了，候机厅里有些冷，晓盖了个毯子坚持不住睡着了，我就静静地等着，啥时候登机，啥时候起飞啊？俺想回家……</p>
<p>我问过好几次机场工作人员，他们说：“北京在下大暴雨，还没接到登机通知，请您耐心等待。”担心了半个月三亚会下雨，最后被北京的雨坑了，防不胜防啊。</p>
<p>终于等到登机通知，登机、起飞，一路平安。到北京已经凌晨3点了，天还在下雨，打出租车得排几百米的队，打滴滴得排在20分钟以后。怎么这么多人啊？最后没办法，找了一个拼车，价钱贼黑。没办法，俺想回家啊……</p>
<p>进家门的那一刻，我们俩对视了一下，不由得苦笑，简直是身心俱疲……</p>
<p>(对，这个结尾就是去香港时的游记结尾，完全适用)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我迄今为止写的最长的一篇游记，详细记录了我们这次旅行的所有事情。为的是我们老的那一天，可以拿出来自己回忆，或者给孩子们讲讲我们年轻时的故事。开篇之前，感谢晓带我去了那么多地方，也感谢你一直陪着我，我们一起面对了那么多事。以后，你负责带我玩，我负责记录玩的故事。&lt;/p&gt;
&lt;p&gt;开始吧，一万五千多字呢！加油，读到结尾。&lt;/p&gt;
    
    </summary>
    
      <category term="记事" scheme="http://markmiao.com/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
      <category term="生活" scheme="http://markmiao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="游记" scheme="http://markmiao.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>RxSwift学习笔记(1)</title>
    <link href="http://markmiao.com/2017/11/24/rxswiftlearn1/"/>
    <id>http://markmiao.com/2017/11/24/rxswiftlearn1/</id>
    <published>2017-11-24T06:32:44.000Z</published>
    <updated>2017-11-24T07:29:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a>，是Swift的函数响应式编程框架，以函数为工具，绑定数据联动，数据改变实时反映到结果呈现。这对我来说是一种全新的编程思想，我想去了解，学习。</p>
<p>本文记录了我学习RxSwift的历程，包含遇到的各种问题和我的一些理解。</p>
<a id="more"></a>
<h2 id="运行官方示例"><a href="#运行官方示例" class="headerlink" title="运行官方示例"></a>运行官方示例</h2><p>从github上克隆RxSwift项目</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:ReactiveX/RxSwift.git</div></pre></td></tr></table></figure>
<p>双击打开<code>Rx.xcworkspace</code>，在工程中选择<code>RxExample-iOS</code>或<code>RxExample-macOS</code>，选择模拟器或真机，运行。</p>
<h2 id="项目集成RxSwift"><a href="#项目集成RxSwift" class="headerlink" title="项目集成RxSwift"></a>项目集成RxSwift</h2><p>将RxSwift集成到项目中，推荐使用CocoaPods的方式，pod版本<code>1.3.1</code>亲测有效：</p>
<ul>
<li><p>创建项目时勾选<code>Include Unit Tests</code>，包含单元测试。</p>
</li>
<li><p>创建<code>Podfile</code>文件，输入如下内容：</p>
</li>
</ul>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Podfile</span></div><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target <span class="string">'工程名字'</span> <span class="keyword">do</span></div><div class="line">    pod <span class="string">'RxSwift'</span>,    <span class="string">'~&gt; 4.0'</span></div><div class="line">    pod <span class="string">'RxCocoa'</span>,    <span class="string">'~&gt; 4.0'</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="comment"># RxTests 和 RxBlocking 将在单元/集成测试中起到重要作用</span></div><div class="line">target <span class="string">'单元测试文件夹名字'</span> <span class="keyword">do</span></div><div class="line">    pod <span class="string">'RxBlocking'</span>, <span class="string">'~&gt; 4.0'</span></div><div class="line">    pod <span class="string">'RxTest'</span>,     <span class="string">'~&gt; 4.0'</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<ul>
<li>将工程名和单元测试名换成自己的，执行命令：</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="keyword">install</span></div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题1. 可能由于CocoaPods版本过低，pod失败，建议更新后重试，执行更新命令：</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem <span class="keyword">install</span> cocoapods</div></pre></td></tr></table></figure>
<p>问题2. </p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">None <span class="keyword">of</span> your spec sources contain a spec satisfying the dependency: `RxSwift (~&gt; <span class="number">4.0</span>)`.</div></pre></td></tr></table></figure>
<p>执行命令：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="built_in">setup</span></div></pre></td></tr></table></figure>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>RxSwift的本质是观察者模式，时刻观察者一个序列，当序列达到预定条件，执行某种操作。比如钟表时间是一个序列，当到6点时就下班。时间是一个被观察的序列，6点是预定条件，下班是操作。</p>
<p>Rx中用<code>observable</code>表示变化序列，也就是被观察者。到达预定条件的操作用<code>subscribe</code>表示，被称为订阅。订阅完成之后，要对其进行清理，清理方式是丢掉处理袋<code>DisposeBag</code>中。</p>
<p>这是一个基本的Rx执行流程。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>用RxSwift写一个基本的按钮点击事件。在<code>ViewController</code>中引入头文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"><span class="keyword">import</span> RxCocoa</div></pre></td></tr></table></figure>
<p>在<code>Main.storyboard</code>中拖入按钮，并连线到<code>ViewController</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> button: <span class="type">UIButton</span>!</div></pre></td></tr></table></figure>
<p>创建全局变量处理袋：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div></pre></td></tr></table></figure>
<p>给按钮添加点击事件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">button.rx.tap</div><div class="line">	.subscribe(onNext: &#123;</div><div class="line">		<span class="built_in">print</span>(<span class="string">"点击"</span>)</div><div class="line">	&#125;).disposed(by: disposeBag)</div></pre></td></tr></table></figure>
<p>完整代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> RxSwift</div><div class="line"><span class="keyword">import</span> RxCocoa</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    <span class="meta">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> button: <span class="type">UIButton</span>!</div><div class="line">    <span class="keyword">private</span> <span class="keyword">let</span> disposeBag = <span class="type">DisposeBag</span>()</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        button.rx.tap</div><div class="line">            .subscribe(onNext: &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"按钮点击"</span>)</div><div class="line">            &#125;).disposed(by: disposeBag)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didReceiveMemoryWarning</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.didReceiveMemoryWarning()</div><div class="line">        <span class="comment">// Dispose of any resources that can be recreated.</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>demo地址：<a href="https://github.com/mxdios/XDRxSwiftLearn" target="_blank" rel="external">XDRxSwiftLearn</a></p>
<p>学习资料：</p>
<p><a href="http://t.swift.gg/d/2-rxswift" target="_blank" rel="external">靛青K神出品RxSwift 学习指导索引</a></p>
<p><a href="https://beeth0ven.github.io/RxSwift-Chinese-Documentation/" target="_blank" rel="external">RxSwift中文本文档</a></p>
<p><a href="https://darkhandz.com/categories/iOS/Swift/" target="_blank" rel="external">RxSwift入门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;，是Swift的函数响应式编程框架，以函数为工具，绑定数据联动，数据改变实时反映到结果呈现。这对我来说是一种全新的编程思想，我想去了解，学习。&lt;/p&gt;
&lt;p&gt;本文记录了我学习RxSwift的历程，包含遇到的各种问题和我的一些理解。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://markmiao.com/tags/swift/"/>
    
      <category term="RxSwift" scheme="http://markmiao.com/tags/RxSwift/"/>
    
  </entry>
  
  <entry>
    <title>用apiDoc写接口文档</title>
    <link href="http://markmiao.com/2017/11/13/apidoc/"/>
    <id>http://markmiao.com/2017/11/13/apidoc/</id>
    <published>2017-11-13T09:44:16.000Z</published>
    <updated>2017-11-14T02:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为移动端开发，接口文档看得多，写得少。最近对已开发完成的app进行接口文档整理，发现了<a href="http://apidocjs.com/" target="_blank" rel="external">apiDoc</a>这款神器。见识到接口文档也可以写的这么高大上，之前用markdown写弱爆了，用word的自杀吧。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在安装<code>npm</code>的基础上，执行命令安装apiDoc</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> apidoc -g</div></pre></td></tr></table></figure>
<p>安装完成，Mac上便具备apiDoc环境，可以开始写文档了。用apiDoc写接口文档就是写注释，支持各种语言的注释，比如：C#、Go、Java、JavaScript、PHP等等。</p>
<h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在任意位置创建存放文档的文件夹，在该文件夹内创建文件<code>apidoc.json</code>，这是apiDoc的配置文件。内容示例如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"文档名称"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.1.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"文档描述"</span>,</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"文档网页标题"</span>,</div><div class="line">  <span class="attr">"url"</span> : <span class="string">"https://api.github.com/v1"</span>,</div><div class="line">  <span class="attr">"sampleUrl"</span>: <span class="string">"https://api.github.com/v1"</span>,</div><div class="line">  <span class="attr">"header"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"页眉"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"header.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"footer"</span>: &#123;</div><div class="line">    <span class="attr">"title"</span>: <span class="string">"页脚"</span>,</div><div class="line">    <span class="attr">"filename"</span>: <span class="string">"footer.md"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"template"</span>: &#123;</div><div class="line">  	 <span class="attr">"withCompare"</span>: <span class="literal">true</span>,</div><div class="line">  	 <span class="attr">"withGenerator"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>字段解释：</p>
<ul>
<li><code>version</code>：文档版本号。</li>
<li><code>url</code>：域名的主地址，接口中不变的那一块。</li>
<li><code>sampleUrl</code>：测试API方法接口，如果设置，在每个接口下都有一个测试接口的表单。如果不想显示测试表单，需要在接口文档中增加<code>@apiSampleRequest off</code>。</li>
<li><code>header</code>、<code>footer</code>：页眉、页脚，可以不写。里面分别跟着页眉页脚的标题和markdown文件路径，markdown文件和<code>apidoc.json</code>同级目录。</li>
<li><code>withCompare</code>：版本比较，默认开启，<code>withGenerator</code>：生成器，页面底部显示apiDoc，默认开启。</li>
</ul>
<h2 id="创建接口源文档"><a href="#创建接口源文档" class="headerlink" title="创建接口源文档"></a>创建接口源文档</h2><p>我是以<code>js</code>文件写的接口文档，在配置文件<code>apidoc.json</code>统计目录下创建接口文件<code>接口.js</code>，文件名称自定义。</p>
<p>apiDoc最大的亮点是可以版本比较，接口更改过，可以通过接口右侧的版本号选择进行变化比较。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-11-14-09-36-28.png" alt="版本比较"></p>
<p>这需要在源文档中保留每个历史版本，所以每个接口都可能对应N个历史版本，所以建议一个接口用一个文件。</p>
<h3 id="内容示例"><a href="#内容示例" class="headerlink" title="内容示例"></a>内容示例</h3><p>创建一个<code>编辑资料.js</code>文件，并输入以下内容：</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"><span class="meta">@api</span> &#123;POST&#125; users/userinfo.asp [编辑资料]</div><div class="line"><span class="meta">@apiVersion</span> <span class="number">0.1</span><span class="number">.0</span></div><div class="line"><span class="meta">@apiName</span> userinfo</div><div class="line"><span class="meta">@apiGroup</span> users</div><div class="line"><span class="meta">@apiSampleRequest</span> off</div><div class="line"><span class="meta">@apiDescription</span> 编辑用户资料</div><div class="line"></div><div class="line"><span class="meta">@apiParam</span> &#123;<span class="built_in">String</span>&#125; userid 用户id</div><div class="line"><span class="meta">@apiParam</span> &#123;<span class="built_in">String</span>&#125; username 用户名</div><div class="line"><span class="meta">@apiParam</span> &#123;<span class="built_in">String</span>&#125; usersex 性别</div><div class="line"><span class="meta">@apiParam</span> &#123;<span class="built_in">String</span>&#125; token token</div><div class="line"></div><div class="line"><span class="meta">@apiSuccess</span> &#123;Object&#125;   data  对象数据</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   data.userheadimg     头像</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   data.username     用户名</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   data.userphone     手机号</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   data.usersex     性别</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   errorcode  错误码</div><div class="line"><span class="meta">@apiSuccess</span> &#123;<span class="built_in">String</span>&#125;   errormessage  信息</div><div class="line"></div><div class="line"><span class="meta">@apiExample</span> 返回示例</div><div class="line">HTTP/<span class="number">1.0</span> <span class="number">0</span> ok</div><div class="line">&#123;</div><div class="line">    data =     &#123;</div><div class="line">        userheadimg = <span class="string">"http://xxxxxxx/api/user/2017/11/13/5EC93450A72741FA92AB4E08D4A96710.jpg"</span>;</div><div class="line">        username = markmiao;</div><div class="line">        userphone = <span class="number">13000000000</span>;</div><div class="line">        usersex = <span class="string">"男"</span>;</div><div class="line">    &#125;;</div><div class="line">    errorcode = <span class="number">0</span>;</div><div class="line">    errormessage = <span class="string">"success"</span>;</div><div class="line">&#125;</div><div class="line">*/</div></pre></td></tr></table></figure>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-11-14-09-52-10.png" alt="部署完成后的显示样式"></p>
<h3 id="字段解释"><a href="#字段解释" class="headerlink" title="字段解释"></a>字段解释</h3><p>文档中所有内容是包含在<code>/**   */</code>注释中的，用apiDoc写接口文档就是写注释。</p>
<p><code>@api {POST} users/userinfo.asp [编辑资料]</code> </p>
<ul>
<li>必需，<code>{}</code>内是接口请求方式，GET、POST、PUT等，后面的是接口地址改变部分，会与<code>apidoc.json</code>中的<code>&quot;url&quot;</code>组成完整接口地址显示。<code>[]</code>内是接口标题。</li>
</ul>
<p><code>@apiVersion 0.1.0</code></p>
<ul>
<li>接口版本号，如果接口改变了，需要将上面内容复制一份，修改版本号，修改接口内容，就可以在文档中进行版本内容比对。</li>
</ul>
<p><code>@apiName userinfo</code></p>
<ul>
<li>接口名称，不会显示在文档中，是每个接口的唯一标识，以此来区别接口。</li>
</ul>
<p><code>@apiGroup users</code></p>
<ul>
<li>接口组名，接口可以分组存放，将一类接口放到一组总，组名相同的会被归到一组。</li>
</ul>
<p><code>@apiSampleRequest off</code></p>
<ul>
<li>隐藏测试表单</li>
</ul>
<p><code>@apiDescription 编辑用户资料</code></p>
<ul>
<li>接口描述</li>
</ul>
<p><code>@apiParam {String} userid 用户id</code></p>
<ul>
<li>接口请求参数，<code>{}</code>内是参数类型，后面跟着参数字段名和字段描述。</li>
</ul>
<p><code>@apiSuccess {Object}   data  对象数据</code></p>
<ul>
<li>接口返回值，<code>{}</code>内是返回值类型，后面跟着返回值字段名和字段描述。要想出现返回值表格中缩进的样式，以<code>data.userheadimg</code>这种形式写，<code>userheadimg</code>会在<code>data</code>下面缩进，表示属于<code>data</code>对象中的元素。</li>
</ul>
<p><code>@apiExample 返回示例</code></p>
<ul>
<li>接口返回的数据结构示例</li>
</ul>
<h2 id="生成接口文档"><a href="#生成接口文档" class="headerlink" title="生成接口文档"></a>生成接口文档</h2><p><code>cd</code>到接口文件夹，使用命令：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apidoc -<span class="selector-tag">i</span> . -o doc/</div></pre></td></tr></table></figure>
<p>意思是使用当前文件夹(<code>. 代表当前文件夹</code>)下的所有文件，生成apiDoc文档放到<code>doc/</code>文件夹下。</p>
<p>命令执行完毕，在<code>doc/</code>目录下点击<code>index.html</code>，便可本地浏览用apiDoc写成的接口文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为移动端开发，接口文档看得多，写得少。最近对已开发完成的app进行接口文档整理，发现了&lt;a href=&quot;http://apidocjs.com/&quot;&gt;apiDoc&lt;/a&gt;这款神器。见识到接口文档也可以写的这么高大上，之前用markdown写弱爆了，用word的自杀吧。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="http://markmiao.com/categories/HTML5/"/>
    
    
      <category term="文档" scheme="http://markmiao.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>被苹果爸爸完全碾压的通话记录</title>
    <link href="http://markmiao.com/2017/08/12/talkingtoapple/"/>
    <id>http://markmiao.com/2017/08/12/talkingtoapple/</id>
    <published>2017-08-12T08:14:28.000Z</published>
    <updated>2017-08-12T08:17:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>私情是介个样子滴~</p>
<p>最近公司开发了一款APP，是面向大众化的工具类应用。在上架App Store时遇到了阻挠，这对我来说都习以为常了，没有阻挠才奇怪呢。</p>
<a id="more"></a>
<p>这次被拒的原因之前没遇到过，但我大概预测到了：因为APP内容是属于大众化的工具类，核心功能与账户没有直接关系，所以不能在没使用APP之前强制用户登录，违反了App Store审核指南的第5.1.1条。</p>
<p>其实这条规则我也知道，并且知道如果给出了强制用户登录的原因，且原因具有说服力的话是可以这么做的。所以我在提交应用审核的备注里长篇大论的写了一百多字的说明，如此如此这般这般，所以我们采用了用户强制登录机制。</p>
<p>事实证明，这些都是废话，半毛钱说服力都没有。苹果爸爸直接拒绝，第5.1.1条规则打脸甩过来了。我还不死心，将原来备注里一多百字的说明扩充到两百字，详详细细的阐述了我们之所以这么搞，是有原因滴，然后给苹果发过去了。</p>
<p>苹果的回复是：你违反了第5.1.1条规则，后面分别用英文、简体中文、繁体中文说：“如果你不服，留下联系方式，来信砍。”当然苹果爸爸是用很文雅的语言描述了这个意思。我岂能示弱，留就留！</p>
<p>其实之前与苹果开发者客服电话联系过几次，都是些账号或应用的小问题，关于应用审核还是开天辟地头一遭。App Store应用上架审核一直是一个很神秘的机构，他们具体的工作流程和审核方法都鲜为人知。听说这个机构都在美国本土，还听说在中国台湾有个部门负责亚洲市场的应用审核。这些都是我听过的传言。之前与应用审核人员沟通都是用iTunesConnect里面的邮件，或者在Developer里面选择一项“我想干嘛”，给应用审核组发信息。从来没有电话或即时通讯这些快速的沟通途径，我曾经问过苹果开发者客服应用审核组的客服电话是多少，他直接告诉我没有。</p>
<p>没想到这次能电话联系到应用审核组！想想还有些小激动呢。</p>
<p>在我留下联系方式的三天后，也就是今天早上，我遛完狗回来接到了来自美国加利福尼亚圣何塞的电话。我清了清嗓子：“喂，您好。”</p>
<p>“喂，请问是xxx先生吗？”是一位普通话明显生硬的妹子，这样让我有些惊讶。</p>
<p>为了今天的通话，我是做了准备的。在经过友好的问候和审核问题确认之后，我率先发招：“我们的应用是有专门的用户群体，我们需要为每位使用者创建用户ID，便于后期工作展开。”我并没有在第一招就阐明这个后期工作，是希望在后面对方反驳后，再行祭出，已达到首尾呼应，加大谈判力度，我是多么的睿智。</p>
<p>“我们发现您的应用并不具备独立用户群的特性，因此在使用前不能强制用户登录，这违反了我们审核规则的第5.1.1条。”对方明显没get到我说的应用独特性，依旧强调规则。</p>
<p>“是这样的，我们会统计用户登录后使用的工具模板数量，后台大数据分析该用户经常使用哪几类，后期会对该用户着重推送这几类的工具模板。这是为用户提供更好的服务和更优质的体验，这些都是基于用户登录的。”以用户服务为向导，一切都是为了用户，有这么高大上的理由为依据，区区强制用户登录不会有问题啦，都是为了用户体验嘛。我都为我的机智和逻辑思维能力感到赞叹。</p>
<p>“不是不允许用户登录。对于针对普通用户群体的应用，在用户了解应用之前不可以强制用户注册登录，强制搜集用户信息。这违反了我们的应用审核规则。应用必须开放用户未登录时也可以使用部分功能，当使用涉及账号的功能时，再请求用户登录。否则无法上架。”对方如是说。</p>
<p>听不听爸爸的话？不听话你就别想上架。我有点委屈了，完全没考虑过人家的感受嘛。我做了一些妥协：“那这样吧，我们可以提供用户不登录的游客模式，但是只能浏览，不能使用工具模板。在使用时需要登录，这样便于我们后期有针对性的内容推送。”</p>
<p>“不可以，iOS是有本地存储机制的，用户不登录可以将工具模板保存到本地。如果用户想要将使用记录保存到服务器，同步到其他设备，这时可以让用户登录。”我的让步完全没有换来理解，反而换来了她的步步紧逼。太欺负人了！</p>
<p>“那这样一来很大一部分核心功能在用户未登录状态下都能使用，用户的登录欲望会大大降低，这不利于我们后期对用户进行有针对性的工具模板推送。”我还在做最后的挣扎，用户针对性内容是我自以为有力的筹码，我以此一再强调我们后期准备对用户的付出，想换来苹果爸爸的理解。</p>
<p>“当你们应用做得足够好，推广到位，我相信用户是会愿意主动注册登录的。”这分明是胜利后的嘲讽啊！听到她这句话时，我知道我说错话了，败得彻底，再也没有缓和的余地了。怎么让用户愿意登录不是苹果爸爸该考虑的，是我们该考虑的，想以强制用户登录来达到目的，苹果爸爸可不答应。别看她普通话略显生硬，欺负起我来，我竟毫无反驳的余地，稍微挣扎一点即被拍死。</p>
<p>“那好吧，我们对应用修改后再行上架。”我如一只斗败的公鸡，完全没有了开始时的底气和自信。这明显就不是一场势均力敌的谈判，而是爸爸教育儿子的完虐。一开始我就搞错了自己的身份地位，妄图说服苹果爸爸，这哪是胳膊拧大腿，简直是腿毛想扎大动脉，还妄图给苹果放血，太不自量力了。</p>
<p>君不见中国两大微——微信和微博，一个为了打赏，一个为了问答。微信关了iOS客户端的打赏功能，微博妥协了问答付费走内购。</p>
<p>我还是图样图森破。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私情是介个样子滴~&lt;/p&gt;
&lt;p&gt;最近公司开发了一款APP，是面向大众化的工具类应用。在上架App Store时遇到了阻挠，这对我来说都习以为常了，没有阻挠才奇怪呢。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://markmiao.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="应用" scheme="http://markmiao.com/tags/%E5%BA%94%E7%94%A8/"/>
    
      <category term="短文" scheme="http://markmiao.com/tags/%E7%9F%AD%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>那些年用过的Mac</title>
    <link href="http://markmiao.com/2017/08/03/mymacbooks/"/>
    <id>http://markmiao.com/2017/08/03/mymacbooks/</id>
    <published>2017-08-03T01:27:01.000Z</published>
    <updated>2017-08-03T01:39:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>旧文新录，这篇文是去年写的，一直放在简书上。今天把他放到blog里，日后翻出来看看也挺有意思。</p>
<a id="more"></a>
<p>记得是2014年年初接触iOS开发，作为一个资深穷逼，自然没有money去买Mac这种高端电子产品。说实话，在做iOS开发之前，我只在电视上见过MacBook，银白色金属质感，亮白的苹果logo灯，一切尽显高贵奢华。</p>
<p>多渴望拥有一台MacBook，哪怕摸摸也好啊。现在呢，每到秋冬季节，我碰都不愿碰它，静电把我快电出神经质了。但在那时候，MacBook就是我心中的白富美，让我摸摸，我可能会忍不住用舌头去舔它。</p>
<p>我一直认为MacBook是有钱人玩得起的，直到我晒出这张所谓的炫富图时，我发现自己并没有成为有钱人，依然是一个资深穷逼，真应了那句亘古不变的名言：穷玩车、富玩表、屌丝玩电脑。</p>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/WechatIMG99.jpeg?raw=true" alt="炫富图"></p>
<h2 id="ThinkPad上装的黑苹果"><a href="#ThinkPad上装的黑苹果" class="headerlink" title="ThinkPad上装的黑苹果"></a>ThinkPad上装的黑苹果</h2><p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/20110913030805516.jpg?raw=true" alt="小黑本"></p>
<p>没有白富美的MacBook，但我有一台跟了我三年的小黑本ThinkPad E40。不能体验苹果本，体验一把苹果系统也不错，狠(fēi)下(cháng)心(yú)来(kuài)的给小黑本装黑苹果。</p>
<p>不知是我的小黑本菜，还是我菜，什么五国语言错误、驱动安装失败全让我遇到了，最后去中关村花了100大洋找人安装的(看起来还是我菜)。安装了OS X 10.9，这是Mac系统最后一代拟物化系统，10.10开始扁平化。此时的iOS7已经开始扁平化了。用黑苹果最大的问题就是卡，运行Xcode的时候简直卡的要死。</p>
<p>垂垂老矣的小黑本，本来运行win7都有些卡，现在硬塞进去一套Mac OS，还是Mac OS和Windows并存双系统，每次启动选择系统启动项。小黑本跟了我也算是遇人不淑，老了老了还被我这么糟蹋。</p>
<p>黑苹果玩了差不多半年，在我已经用iMac的时候。有一天晚上开着小黑本里的黑苹果系统，用迅雷下电影（强调是正经电影），勾选了迅雷上的下载完毕自动关机。以前也常这么搞，可见小黑本真是遇人不淑。第二天，无论如何都开不了机了，小黑本死了……</p>
<p>我眼前仿佛闪过小黑本跟我在一起的一幕幕，陪我上大学，陪我敲代码，陪我在宿舍看片，陪我在教室下电影……我的眼睛模糊了，终于忍不住了，我操！可以买MacBook了！</p>
<p>其实我还是想挽救小黑本的，想重装系统只安装一个win7，平时浏览网页，看看电影就行了，让它能安度晚年，寿终正寝。去ThinkPad售后服务点，当然保修期肯定过了，我想自费修一下也行。“主板坏了，修修1200，换一个1800”，其实让小黑本就此长眠，也不失为一种壮烈。</p>
<p>后来小黑本扔回了老家，老爸花了200块修了一下，能开机了。还没等我给它重装系统，在某次关机之后再也没打开过，就此长眠吃土。</p>
<h2 id="2012款iMac-21-5英寸"><a href="#2012款iMac-21-5英寸" class="headerlink" title="2012款iMac 21.5英寸"></a>2012款iMac 21.5英寸</h2><p>iMac是我上班后用的第一台Mac，就是第一张图中中间的那台iMac，其实当时的我是强烈期望公司给我配一台MacBook的。经过这几年频繁的换Mac电脑，我觉得就单纯开发体验来说，还是iMac用着舒服，想体验一把27英寸 Retina 5K屏的iMac开发，可惜目前为止还没有体验过。</p>
<p>之前对一体机没什么好感，我觉得要么用笔记本，要么用台式机，一体机算怎么回事？iMac改变了我的看法，银白色金属质感，深黑色屏幕边框，有笔记本只插一根电源线的简约，又有台式机大屏的酸爽。相比这些，我最爱的还是配备的原装Mac鼠标和Mac键盘。</p>
<p>Mac鼠标配备Mac系统的平面触摸、页面滑动、多点触碰，以及反Windows鼠标的页面滑动方向，甚至电池安装正负极同向都是这么的反正统。但是，用起来很爽。Mac键盘和MacBook上键盘一样，除了键盘灯。Mac键盘和普通键盘差别不大，除了独有的Command键。感觉Mac键盘用硬币拧开的电池盖设计很赞。</p>
<p>还有鼠标键盘与iMac的蓝牙连接，没有USB线的纠缠。我曾试验过用鼠标关了iMac的蓝牙，一瞬间鼠标键盘失效了，没办法控制iMac。那怎么打开蓝牙啊？有同事建议我找个普通USB鼠标连上打开蓝牙，其实用不着，过一会iMac会自动开启蓝牙，连接鼠标键盘。还发现当用普通USB鼠标连接Mac的时候，Mac里所有滚动条会一直显示，而用Mac鼠标时，滚动条会隐藏。Mac系统是有多讨厌普通鼠标？</p>
<p>Mac鼠标键盘唯一感觉不好的是电池用的太快，键盘鼠标各两节带聚能环的南孚电池，显然聚能环也抵挡不了压榨，电池用不了多久就用光了，键盘还好些，鼠标太费电。后来Apple发布了可充电鼠标键盘，键盘充电还好，鼠标充电的时候总感觉怪怪的，像是把充电线插入了不可描述的部位。</p>
<h2 id="MacBook-Pro-15英寸"><a href="#MacBook-Pro-15英寸" class="headerlink" title="MacBook Pro 15英寸"></a>MacBook Pro 15英寸</h2><p>2014年圣诞节前，购买了一台15英寸的MacBook Pro，就是第一张图中左侧的那台MacBook。也圆了我多年想拥有一台MacBook的愿望。买这台MacBook还得感谢下产品经理猫哥，以8折优惠价拿下了14288的MacBook Pro。</p>
<p>记得当时买了没多久就出了触摸板Touch ID功能和蝴蝶键盘的MacBook，对于电子产品，我从来都没有买了后出了新款会感觉亏了。就像2011年买的ThinkPad E40，当时也算中高配，现在成渣渣了。穷逼永远追不上电子产品的换代速度，索性坦然面对。要不然现在都出TouchBar的MacBook了，我能怎么样？</p>
<p>当时公司还是给我配备了iMac，但是刚入手MacBook的那种喜悦兴奋感，以至于让我每天背着4斤多的电脑从昌平到国贸上班，那台iMac当显示器用了。当时我还有个iPad Air，每天挤地铁拿着9.7英寸的iPad Air看&lt;行尸走肉&gt;，背上还有个4斤多的MacBook，现在想想真傻逼。以至于现在我十分抵触背电脑，给我电脑补助我也不背自己电脑上下班(其实还是给少了，一个月给我两千块，iMac我也背)。</p>
<p>MacBook用着虽然没有iMac大屏的酸爽(由于当时有台iMac当显示屏，完全没有MacBook小屏幕的憋屈感)，但是功能强大的触摸板，柔光闪亮的键盘灯，白光的苹果logo灯，和上就走、打开就用的便捷还是让我一用就倾心。2015年出的MacBook Air取消了logo灯，2016年出的MacBook Pro依旧没有了logo灯，白光的苹果logo灯也成了历史。MacBook越来越薄，删减的东西也越来越多，光驱没了，网线口没了，呼吸灯没了，logo灯没了，USB没了，功能键没了……以后会不会变为光影键盘和触摸板合一，无线充电取消全部接口，可以折叠放在皮鼓兜里呢？</p>
<p>入手MacBook后，是我用苹果产品最多的时候，MacBook Pro是主要编程工具，iMac作为显示器在旁边辅助，iPad Air上下班看视频和做测试，用了多年的Android机也丢掉换成iPhone6了，还有一台iPhone5s测试机。当时作为一个没有女朋友的屌丝，这些奢华的设备配置填补了我内心的小空虚。然而，一切并没有什么卵用。</p>
<p>后来我用一台2011年的Mac mini也没感觉有什么心理落差，我还是一个程序猿，还是敲代码。区别的是我有女朋友了，啊哈哈哈哈……</p>
<h2 id="MacBook-Pro-13英寸"><a href="#MacBook-Pro-13英寸" class="headerlink" title="MacBook Pro 13英寸"></a>MacBook Pro 13英寸</h2><p>后来离职去了另一家公司，当时我已经不愿背电脑上下班了。公司给我配了一台全新的13英寸MacBook Pro，之所以说全新，是因为包装都是我拆的。当时对电脑没有太大要求，给我台mini也可以(黑苹果就算了吧)，新旧就更不会太在乎了。好在我已经坦然了，上家公司那种Apple设备环绕的情景直至现在都没再现过，而且配备的设备越来越老旧，越来越次。</p>
<p>用习惯了15英寸，用13英寸感觉好小。Xcode全屏都感觉放不开，而且公司没有配备外接显示器，这就有点憋屈的尴尬了。好在Mac系统可以加多个桌面，切换起来也十分方便。其实编程有个外接显示器真挺重要，至少我看原型图不用切换桌面。</p>
<p>13英寸跟15英寸的一大设计区别就是音响位置，15英寸的在键盘两边，13英寸的在电脑底部。尴尬的是躺床上看电影，把电脑放腿上容易堵住音响口。</p>
<p>自我感觉，敲代码和商务办公来说MacBook比普通Windows好些。有人吐槽Mac的office软件兼容垃圾，可应用软件少，浏览器兼容差，Mac AppStore软件价格昂贵等等。其实都是事在人为，有钱的买正版，没钱的找破解版，Mac软件并不少，少的是你知道的搜索渠道。但对于那些只支持IE浏览器而你又不得不用的网站(比如某些官方考试报名网站)，我只能说：你个垃圾！说完之后默默地打开虚拟机用IE登录。不得不说Mac的系统性能体验，操作方式的独特化简约，超强的续航能力，这些都是选择Mac的原因，当然还有绝不可忽视的装逼体验。</p>
<p>买iPhone玩游戏是上策，iOS的游戏数量、质量、游戏体验都很不错。但是买Mac玩游戏那可算是失策了，Mac AppStore上的游戏不仅少而且贵，好多单机没有Mac版，一些网游都没有Mac版支持。我电脑游戏玩的少，这方面没什么体验。记得我同学当时换了MacBook玩DNF，没有国服只能玩美服，后来为了玩国服怒装虚拟机。</p>
<h2 id="2011款Mac-mini"><a href="#2011款Mac-mini" class="headerlink" title="2011款Mac mini"></a>2011款Mac mini</h2><p>那台13英寸的MacBook Pro我用了没多久就不用了，因为我离职了，公司不让带走，我就没再用。新公司如愿以偿的给我配了台mini(所以说flag不能随便立)，值得称赞的是显示器比较大，是28英寸的(我也是能习惯性的从不幸中找到幸运)。</p>
<p>第一次用mini不习惯，一时间差点没找到开机键在哪。还有隐藏在后面的各种插孔，每次连接手机数据线USB插口转三次才能摸索着插进去。插耳机总是不小心插进旁边的话筒插孔里，而且耳机孔太紧，位置又在后面，手滑的话根本拔不出来。我还比较庆幸，mini电源插头是国标的，我一个同事用的mini的电源线是英标插头，那硕大的插头，四四方方铜脚，都快把插排撑裂了才插上。</p>
<p>开始连接mini的键盘是普通键盘，没有command键只能用Ctrl，以前是拇指按command配合使用快捷键，现在小指按Ctrl配合使用快捷键，每次都是按完之后发现不对再改。后来实在受不了，在公司找了一个Mac键盘替换了。但是鼠标自始至终都是普通鼠标，不但所有的页面滚动条都一直显示，而且没办法用鼠标快速切换桌面或排列显示桌面所有打开应用，只能control + 方向键。还有一种方法设置桌面触发角，将鼠标移动到桌面某个角，会实现某种操作，这个太不方便了，鼠标总会不小心的移动到某个角落触发某个操作。</p>
<h2 id="2010款MacBook-Pro-17英寸"><a href="#2010款MacBook-Pro-17英寸" class="headerlink" title="2010款MacBook Pro 17英寸"></a>2010款MacBook Pro 17英寸</h2><p>后来因为工作需要，公司台式机统一换本。我换了台17英寸的MacBook Pro，这是我第一次见17英寸的MacBook Pro，有光驱，有呼吸灯，有网线接口，那么厚、那么大、那么重。这台17英寸的MacBook Pro是2010年年末出的，当时售价1.7万，有6斤重，现在已经停产了。给我的时候还没有硬盘，开了半天没开开，我以为坏了。安了个硬盘装了系统，用起来还是蛮不错的。</p>
<p>天真的我以为不用自己电脑就不用背电脑上下班了，现实给了我一个大耳光，醒醒吧，背着公司的本上下班，回家随叫随到敲代码！我就呵呵了，4斤的不想背，现在让我背6斤的，而且没有电脑补贴，因为你没用自己的本。好在上班离家近，不用挤地铁。但是每天背上贴着一个6斤的金属板蹬自行车，到公司内裤都湿了，时间一长说出大天来我也不想背了。再说了，我家里有本，公司都用git，哪个本不能敲代码，把本当爹了？天天背着上下班。</p>
<p>17英寸的MacBook分辨率比Retina屏的小，但是17英寸的MacBook上显示的内容比较小，这样一来屏幕中容纳的内容就比较多。虽然17英寸的屏幕不是很大(在笔记本里还是很大的)，但是用起来感觉不到憋屈，内容显示还是很宽松的。</p>
<p>虽然这个MacBook厚重些，但是相比用mini，感觉用本还是好点。毕竟键盘+触摸板比键盘+普通鼠标体验强太多了。MacBook的光驱是吸入式光驱，键盘右上角的键是推出光驱用的，开机键独立在右上角金属板上，后来去掉了光驱，开机键也取代了推出光驱键的位置。</p>
<p>虽然有光驱，但是我从来没用过，即便是我第一台电脑ThinkPad上的光驱也没用过几次。后来的MacBook去掉了光驱和网线口可谓明智之举，现在光盘几乎退出历史舞台，无线网遍布世界。为啥呼吸灯也去掉了？睡眠的时候一闪一闪挺有睡眠的样子的。</p>
<p>2016款MacBook去掉了USB3和Thunderbolt2接口，全换成了USB-C接口，不知道这次大刀阔斧的改进，在未来会有什么样的历史评价。但是现在最新款iPhone7不能直接连接到MacBook上，这到底几个意思？</p>
<h2 id="2011款MacBook-Pro-13英寸"><a href="#2011款MacBook-Pro-13英寸" class="headerlink" title="2011款MacBook Pro 13英寸"></a>2011款MacBook Pro 13英寸</h2><p>后来因为工作原因，17英寸MacBook Pro换成了13英寸的MacBook Pro。虽然尺寸变小了，但是厚度没变，因为这款MacBook还是2011款带光驱的。</p>
<p>iOS开发环境没有什么可配置的，安装一个Xcode基本就搞定一多半了。麻烦的是证书配置，要想真机测试，打包发布应用，必须经历一系列的证书配置。像我这种电脑里有3+以上个开发者账号，个人企业公司级全有，配置起来下一步下一步下一步，真是烦透了。可喜的是在换电脑的同时，硬盘也换了。我把17英寸MacBook上的硬盘拆下来，装在了13英寸的MacBook上了，亲测证明，系统还是原来的系统，证书还是原来的配方，一切都不用重新配置。只是在打包app的时候验证一下开发者账号密码即可。</p>
<p>细数这些年用过的Mac，几经变换，从未重复用过一款。落魄时用过黑苹果、Mac mini，辉煌时桌子上摆过苹果N件套，堂堂iMac当显示器用。一切皆浮云，我依旧是个玩电脑的穷逼程序猿。一直以来陪伴我的是15英寸那款MacBook Pro(因为是我掏腰包买的)，以前陪着我，现在陪着我，将来还会陪着我，我不会像糟蹋小黑本那样糟蹋你，其他的都是工具，而你是我朋友(自己掏钱买的就是不一样)。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>从去年写这篇文章到现在，我一直用着这款13英寸的MacBook Pro，区别的是外接了一台Dell显示器，外加媳妇送的HHKB键盘和Magic Mouse 2鼠标。这台老破小Mac连接这些外设也算梅开二度、老木逢春。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旧文新录，这篇文是去年写的，一直放在简书上。今天把他放到blog里，日后翻出来看看也挺有意思。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://markmiao.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="macOS" scheme="http://markmiao.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS应用上架被拒</title>
    <link href="http://markmiao.com/2017/07/27/macosapprejected/"/>
    <id>http://markmiao.com/2017/07/27/macosapprejected/</id>
    <published>2017-07-27T08:26:58.000Z</published>
    <updated>2017-08-01T06:02:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我开发的第一个macOS客户端，名字为<a href="http://markmiao.com/2017/07/26/stenonote/">速记</a>。是用swift3.0，面向Google开发，磕磕绊绊的写完这一两个界面，相比预想功能大概实现了50%，也算完整，没有完成到预想效果，便按耐不住上传App Store，日后迭代呗。</p>
<a id="more"></a>
<p>结果昨天上传，今天早上就被苹果爸爸拒了。一看被拒理由，哐哐哐列了四五条之多，一下子有点懵。详细看过之后，发现这些问题还是蛮不错的，都是我没注意到的，特此记录下来：</p>
<h2 id="问题1：应用程序的完整性"><a href="#问题1：应用程序的完整性" class="headerlink" title="问题1：应用程序的完整性"></a>问题1：应用程序的完整性</h2><p>问题描述：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Specifically, the app shows <span class="literal">no</span> response <span class="keyword">when</span> click <span class="literal">on</span> the menubar extra icon.</div></pre></td></tr></table></figure>
<p>这个问题拒的我完全没脾气，因为点击一个按钮没有任何反应，苹果据此认为该应用没做完，我竟毫无反驳之力。</p>
<p>情况是这样的：这个<code>extra icon</code>，在有选中内容时，点击会弹出NSPopover，未选中内容时，点击没有任何反应，所以程序不完整。记住即便是空内容也要做提示处理！</p>
<h2 id="问题2：应用程序名称不统一"><a href="#问题2：应用程序名称不统一" class="headerlink" title="问题2：应用程序名称不统一"></a>问题2：应用程序名称不统一</h2><p>问题描述：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">We noticed <span class="keyword">that</span> your app <span class="built_in">name</span> <span class="keyword">to</span> be displayed <span class="keyword">on</span> <span class="keyword">the</span> App Store <span class="keyword">does</span> <span class="keyword">not</span> sufficiently match <span class="keyword">the</span> <span class="built_in">name</span> <span class="keyword">of</span> <span class="keyword">the</span> app displayed when installed <span class="keyword">on</span> macOS.</div><div class="line"></div><div class="line">iTunes Connect Name: 速记</div><div class="line">App Name when Installed: StenoNote</div><div class="line">App Name when Launched: 速记</div><div class="line">App Name <span class="keyword">in</span> About/Hide/Quit Menu: 速记</div></pre></td></tr></table></figure>
<p>在iOS开发中，工程名和应用名是完全不同的，应用名可以在<code>Info.plist</code>里的<code>Bundle display name</code>中自定义。但是macOS不同，即便是在<code>Bundle display name</code>自定义了名字，在Dock上鼠标悬浮到应用上时和Launchpad里应用图标下显示的名字仍然是工程名。还有在Mac左上角苹果图标旁边的应用名也是工程名，即便是你在xib或storyboard里改了这里的文字，这里依旧不会变。</p>
<p>我并不知道如何修改这些名字，后来在<code>Info.plist</code>里修改了<code>Bundle name</code>，Mac左上角苹果图标旁边的应用名改变了，但是Dock上和Launchpad里面的没有变化。提交应用之后，这也成了被拒理由之一。</p>
<p>解决办法当然是统一应用名称：</p>
<p>在<code>TARGETS -&gt; Build Settings -&gt; Product Name</code>这里面自定义应用名称。</p>
<h2 id="问题3：权限配置问题"><a href="#问题3：权限配置问题" class="headerlink" title="问题3：权限配置问题"></a>问题3：权限配置问题</h2><p>问题描述：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Your app uses one or more entitlements which <span class="keyword">do</span> <span class="keyword">not</span> have matching functionality <span class="keyword">within</span> the app. Apps should have <span class="keyword">only</span> the <span class="keyword">minimum</span> <span class="keyword">set</span> <span class="keyword">of</span> entitlements necessary <span class="keyword">for</span> the app <span class="keyword">to</span> <span class="keyword">function</span> properly. Please remove all entitlements that <span class="keyword">are</span> <span class="keyword">not</span> needed <span class="keyword">by</span> your app <span class="keyword">and</span> submit an <span class="keyword">updated</span> <span class="built_in">binary</span> <span class="keyword">for</span> review, <span class="keyword">including</span> the <span class="keyword">following</span>:</div><div class="line"></div><div class="line">com.apple.security.files.user-selected.read-<span class="keyword">only</span></div></pre></td></tr></table></figure>
<p>macOS客户端要想上架App Store，必须开启<code>App Sandbox</code>功能。这里面牵扯到一些权限配置：网络访问、硬件资源、联系人、定位、日历，还有文件和目录的访问。应用中不需要的权限一定不要打开，不然就会以上述理由被拒。</p>
<p>我不知道什么时候开启了<code>User Selected File</code>为<code>Read Only</code>，被拒了，马上改为<code>None</code>。</p>
<h2 id="问题4：黑暗模式"><a href="#问题4：黑暗模式" class="headerlink" title="问题4：黑暗模式"></a>问题4：黑暗模式</h2><p>问题描述：</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The user <span class="keyword">interface</span> <span class="keyword">of</span> your app <span class="keyword">is</span> <span class="keyword">not</span> consistent <span class="keyword">with</span> the macOS Human <span class="keyword">Interface</span> Guidelines. Specifically:</div><div class="line"></div><div class="line">We found that <span class="keyword">when</span> Dark Mode <span class="keyword">is</span> enabled, the menu bar extra icons aren<span class="symbol">'t</span> visible.</div></pre></td></tr></table></figure>
<p>这个问题略惊，之前恍惚听过黑暗模式，从来没用过。启动黑暗模式是在：系统偏好设置 -&gt; 通用 -&gt; 勾选使用暗色菜单和Dock</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-07-27-17-20-20.png" alt="设置黑暗模式"></p>
<p>黑暗模式下Dock和上方工具条都变为黑色半透明，工具条上的图标齐刷刷变为白色，而我的应用图标不见了…不见了…见了…了…</p>
<p>在stackoverflow找到一个问题解答：<a href="https://stackoverflow.com/questions/25379525/how-to-detect-dark-mode-in-yosemite-to-change-the-status-bar-menu-icon" target="_blank" rel="external">How to detect dark mode in Yosemite to change the status bar menu icon</a>。</p>
<p>设置分布式观察者，获取Mac模式变化：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">DistributedNotificationCenter</span>.<span class="keyword">default</span>().addObserver(<span class="keyword">self</span>, selector: #selector(changeStatusBarImage(not:)), name: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="string">"AppleInterfaceThemeChangedNotification"</span>), object: <span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>每次更改模式都会调用通知方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">changeStatusBarImage</span><span class="params">(not: Notification)</span></span> &#123;</div><div class="line">		<span class="built_in">print</span>(<span class="string">"change"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以使用下面方法获取当前Mac的模式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dict = <span class="type">UserDefaults</span>.standard.persistentDomain(forName: <span class="type">UserDefaults</span>.globalDomain)</div><div class="line"><span class="keyword">let</span> style = dict?[<span class="string">"AppleInterfaceStyle"</span>]</div><div class="line"><span class="built_in">print</span>(style)<span class="comment">//是暗黑模式下style打印Optional(Dark)，普通模式下打印nil</span></div></pre></td></tr></table></figure>
<p>stackoverflow问题解答中有一个外链，说明了如果不是根据模式切换去更换复杂图片的话，仅是白变黑，黑变白，仅需要如下几行代码设置<code>NSStatusBar</code>的图片即可：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> image:<span class="type">NSImage</span> = <span class="type">NSImage</span>(named: <span class="string">"图片名称"</span>)!</div><div class="line">image.isTemplate = <span class="literal">true</span></div><div class="line">item.button?.image = image</div></pre></td></tr></table></figure>
<h2 id="问题5：无菜单重新打开主窗口"><a href="#问题5：无菜单重新打开主窗口" class="headerlink" title="问题5：无菜单重新打开主窗口"></a>问题5：无菜单重新打开主窗口</h2><p>问题描述：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The user interface <span class="keyword">of</span> your app <span class="keyword">is</span> <span class="keyword">not</span> consistent <span class="keyword">with</span> the macOS Human Interface Guidelines.</div><div class="line"></div><div class="line">Specifically, we found <span class="literal">that</span> <span class="keyword">when</span> the user closes the main application <span class="built_in">window</span> there <span class="keyword">is</span> <span class="literal">no</span> menu item <span class="keyword">to</span> re-open <span class="literal">it</span>.</div></pre></td></tr></table></figure>
<p>对于这个问题我是存在异议的，在点击关闭按钮后主窗口退出，点击Dock上的应用图标是可以唤起应用主窗口的。但是文中强调<code>menu item</code>，难道必须右键菜单里需要加上打开客户端主窗口的操作？</p>
<p>暂且在右键菜单里添加了打开客户端主窗口的功能：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">applicationDockMenu</span><span class="params">(<span class="number">_</span> sender: NSApplication)</span></span> -&gt; <span class="type">NSMenu</span>? &#123;</div><div class="line">   <span class="keyword">let</span> menu = <span class="type">NSMenu</span>()</div><div class="line">   <span class="keyword">let</span> menuItem = <span class="type">NSMenuItem</span>(title: <span class="string">"打开速记"</span>, action: #selector(openNoteViewController), keyEquivalent: <span class="string">"O"</span>)</div><div class="line">   menu.addItem(menuItem)</div><div class="line">   <span class="keyword">return</span> menu</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写这篇文章的时候，应用经过上述修改再一次提交审核，等待审核中，期待审核结果……</p>
<hr>
<p>后面的审核历程颇有些戏剧性，当晚审核被拒，被拒原因是上面的<code>问题1</code>和<code>问题5</code>，说是在macOS10.12.6系统版本下出现的问题，这是当前macOS最新系统版本，我也是在此系统版本下开发并修改上述问题的。</p>
<p>本着苹果爸爸不欺我的崇拜之心，经过五分钟的测试+Google，最终还是没发现问题所在。十分钟后我反馈了我的疑问，第二天苹果给我的回复是：我们重新测试了你的应用，发现在macOS10.12.6上没有问题，问题是在macOS10.10.5上发现的，你的应用最低系统支持是10.10，所以要解决10.10.5上的问题。</p>
<p>有理有据，合情合理。</p>
<p>10.10.5上有问题，那就不支持10.10了，最低系统版本改为10.11，上架成功。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我开发的第一个macOS客户端，名字为&lt;a href=&quot;http://markmiao.com/2017/07/26/stenonote/&quot;&gt;速记&lt;/a&gt;。是用swift3.0，面向Google开发，磕磕绊绊的写完这一两个界面，相比预想功能大概实现了50%，也算完整，没有完成到预想效果，便按耐不住上传App Store，日后迭代呗。&lt;/p&gt;
    
    </summary>
    
      <category term="macOS开发" scheme="http://markmiao.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="macOS" scheme="http://markmiao.com/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>速记 - 快速记录每一段文字</title>
    <link href="http://markmiao.com/2017/07/26/stenonote/"/>
    <id>http://markmiao.com/2017/07/26/stenonote/</id>
    <published>2017-07-26T08:54:02.000Z</published>
    <updated>2017-11-15T06:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>[速记] 是一款可以在工具栏快速记录一段文字的应用。也支持在应用窗口添加、删除、编辑记录的文本。我们支持的是迅速、便捷、一触即达，比便签更迅速，比日记更简约。</p>
<a id="more"></a>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20170726-161903.png" alt="速记 - 快速记录每一段文字"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>点击下载<a href="https://itunes.apple.com/cn/app/id1263819789?mt=12" target="_blank" rel="external">速记 - 快速记录每一段文字</a>，在Mac App Store中安装速记</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li>在工具栏上点击速记标识，可迅速弹出文本输入框，可快速记录文本内容。</li>
<li>在应用主窗口可快速编辑文本内容，无需保存操作，应用会自动存储更改后的内容。</li>
<li>在应用主窗口可点击加号按钮，快速创建一条记录，输入内容快速便捷。</li>
<li>强大的搜索功能，会实时检索搜索词组，快速将结果反馈到速记列表中。</li>
<li>速记信息，点击应用主窗口右上角按钮，可快速查看本条信息的字数及创建时间。</li>
</ul>
<h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p>如果您对[速记]有什么意见或建议，请联系i@markmiao.com 我们会认真对待每一次反馈，将[速记]做的更好。</p>
<p>如果您喜欢该应用，请在App Store留下宝贵的评论。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[速记] 是一款可以在工具栏快速记录一段文字的应用。也支持在应用窗口添加、删除、编辑记录的文本。我们支持的是迅速、便捷、一触即达，比便签更迅速，比日记更简约。&lt;/p&gt;
    
    </summary>
    
      <category term="macOS开发" scheme="http://markmiao.com/categories/macOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="应用" scheme="http://markmiao.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>ipa重签名</title>
    <link href="http://markmiao.com/2017/07/26/ipachongqianming/"/>
    <id>http://markmiao.com/2017/07/26/ipachongqianming/</id>
    <published>2017-07-26T02:58:03.000Z</published>
    <updated>2017-07-26T03:11:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>在工作中分发内测应用是经常遇见的，常见的方式有：TestFlight，用企业级开发者账号，搜集UDID打包等方式，每种方式都各有利弊。</p>
<p>由于公司有企业级开发者账号，所以平常应用内测比较简单：直接拿企业级账号打包.ipa，将.ipa发布到内测平台（比如<a href="https://www.pgyer.com" target="_blank" rel="external">蒲公英</a>，<a href="https://fir.im/" target="_blank" rel="external">fir.im</a>），测试人员直接下载安装就可，只是第一次需要信任一下企业级证书。</p>
<a id="more"></a>
<p>在工作中，有时候我们需要分发某个app的.ipa包，并没有改app的源码，无法用自己的账号打包。这时就用到了重签名。</p>
<p>其实ipa重签名的应用场景很多，比如App Store上的付费应用，可以使用自己的开发者账号，其.ipa包重新签名，就可以安装了。各大app助手平台就是这么做的。注意直接从App Store下载的应用是加壳的，无法直接重新签名，必须砸壳。<a href="http://iosre.com/" target="_blank" rel="external">iOSRE逆向</a></p>
<h2 id="iReSign"><a href="#iReSign" class="headerlink" title="iReSign"></a>iReSign</h2><p><a href="https://github.com/maciekish/iReSign" target="_blank" rel="external">iReSign</a>是一个重签名工具</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-07-25-19-21-04.png" alt="iReSign"></p>
<p>操作步骤：</p>
<ol>
<li>选择.ipa包的路径</li>
<li>选择<code>embedded.mobileprovision</code>文件路径。<code>embedded.mobileprovision</code>是用于打包的配置文件<code>Provisioning Profiles</code>。可以直接在<code>Certificates, Identifiers &amp; Profiles</code>中下载，注意下载之后需要将名字设置为<code>embedded.mobileprovision</code>。也可以在之前用该文件打包过的.ipa中找：解压.ipa -&gt; Payload -&gt; xx.app显示包内容 -&gt; <code>embedded.mobileprovision</code></li>
<li>网上有资料说entitlements.plist不需要填写。我试过不填写或填写，我按照本文<a href="http://www.olinone.com/?p=198" target="_blank" rel="external">iOS证书及ipa包重签名探究</a>的方式写的.plist文件。</li>
<li>选中修改ID，填写修改的appid</li>
<li>选择证书，下拉列表会显示mac上有的证书。</li>
<li>点击重新签名！</li>
</ol>
<p>结果是失败了。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/6111501034232_.pic.jpg" alt="iResign运行结果"></p>
<p>错误信息如下，可以查看该错误的<a href="https://github.com/maciekish/iReSign/issues/99" target="_blank" rel="external">IResign上的issues</a></p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[General] <span class="built_in">Error</span> Domain=NSCocoaErrorDomain <span class="built_in">Code</span>=<span class="number">3840</span> <span class="string">"Unexpected character s at line 1"</span> UserInfo=&#123;NSDebugDescription=Unexpected character s at <span class="keyword">line</span> <span class="number">1</span>, kCFPropertyListOldStyleParsingError=<span class="built_in">Error</span> Domain=NSCocoaErrorDomain <span class="built_in">Code</span>=<span class="number">3840</span> <span class="string">"Unexpected ';' or '=' after key at line 1"</span> UserInfo=&#123;NSDebugDescription=Unexpected ';' <span class="keyword">or</span> '=' after <span class="built_in">key</span> at <span class="keyword">line</span> <span class="number">1</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>另外还有一个重签名工具：<a href="https://github.com/DanTheMan827/ios-app-signer" target="_blank" rel="external">ios-app-signer</a></p>
<p><a href="http://www.iosugar.com/2017/04/10/Practice-articles-iOS-application-re-signature/" target="_blank" rel="external">实践篇：iOS 应用重签名(上)</a>这篇文章介绍了entitlement文件如何写，ios-app-signer的使用。我没有测试该方法是否可行。</p>
<h2 id="使用sigh脚本"><a href="#使用sigh脚本" class="headerlink" title="使用sigh脚本"></a>使用sigh脚本</h2><p>在iReSign失败后，我在网上找到使用sigh脚本的方式来重签名。</p>
<ol>
<li>安装神器brew，没有安装的看这里：<a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li>
<li>安装ruby，命令：<code>brew install ruby</code></li>
<li>安装sigh，命令：<code>sudo gem install sigh</code>，过程比较漫长。</li>
</ol>
<p>安装sigh脚本后，开始进行重签名，步骤如下</p>
<ol>
<li>在终端输入<code>sigh resign</code>，回车</li>
<li>把要签名的ipa文件拖到窗口上，回车</li>
<li>填写用来签名的证书名，回车</li>
<li>把项目的配置文件embedded.mobileprovision文件拖到窗口上，回车</li>
<li>好了，resign脚本会自动更改bundel id，签名并重新打包。</li>
</ol>
<p>注意ipa包名不要有中文。如果应用有多个targetes无法用上述方式重签名。参考文章：<a href="http://www.jianshu.com/p/3f57d51f770a" target="_blank" rel="external">iOS的ipa重签名</a></p>
<p>我按照如上步骤操作，成功使用企业级证书打包，上传到蒲公英内测平台上，也显示的是企业级应用，但是无法安装，提醒无法下载app，我手机上没有从App Store上下载安装该应用，排除了无法覆盖问题。</p>
<p>iOS9以后，企业级应用不会出现信任按钮，如果ipa包和网页的<code>bundle ID</code>不匹配，就无法安装。在iOS9之前是没有检测的。详情见大神iOS程序犭袁的文章<a href="https://github.com/ChenYilong/iOS9AdaptationTips#3%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%86%E5%8F%91" target="_blank" rel="external">ios9适配系列教程</a></p>
<h2 id="我操作成功的办法"><a href="#我操作成功的办法" class="headerlink" title="我操作成功的办法"></a>我操作成功的办法</h2><p>经过了无数次测试sigh脚本签名方式，最后即将放弃的时刻成功了。</p>
<ol>
<li>将需要重签的.ipa文件和<code>embedded.mobileprovision</code>配置文件放到同一个文件夹下。注意路径和文件名中不要出现中文，配置文件名一定要是<code>embedded</code>。</li>
<li>在终端中cd到该路径下</li>
<li>使用sigh脚本：<code>sigh resign</code>回车，运行结果跟上面是不一样的，会直接出现<code>Signing Identity:</code>让我填证书名。上述方式应该是第二步拖ipa文件到窗口，<code>Path to ipa file:</code></li>
<li>在<code>Signing Identity:</code>上面会出现一串可用的<code>identity</code>，这里要输入这些<code>identity</code>的十六进制串。回车</li>
<li>成功了：<code>Successfully signed 路径/xxx.ipa!</code>原来文件夹中的.ipa已经被重签名了。上传到蒲公英内测平台，完全可以下载使用。</li>
</ol>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20170726-104243.png" alt="操作步骤"></p>
<p>本文涉及到的知识点都是从网上Google的，感谢网友们分享的资料，还涉及的一些参考资料：</p>
<p><a href="https://objccn.io/issue-17-2/" target="_blank" rel="external">代码签名探析</a></p>
<p><a href="http://www.hudongdong.com/skill/363.html" target="_blank" rel="external">mac用终端对ipa包重新签名</a></p>
<p><a href="http://www.jianshu.com/p/0d460b52ce96" target="_blank" rel="external">iPhone 如何不越狱安装越狱软件</a></p>
<p><a href="http://www.jianshu.com/p/1ef0dbdac653" target="_blank" rel="external">企业证书重新签名ipa</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在工作中分发内测应用是经常遇见的，常见的方式有：TestFlight，用企业级开发者账号，搜集UDID打包等方式，每种方式都各有利弊。&lt;/p&gt;
&lt;p&gt;由于公司有企业级开发者账号，所以平常应用内测比较简单：直接拿企业级账号打包.ipa，将.ipa发布到内测平台（比如&lt;a href=&quot;https://www.pgyer.com&quot;&gt;蒲公英&lt;/a&gt;，&lt;a href=&quot;https://fir.im/&quot;&gt;fir.im&lt;/a&gt;），测试人员直接下载安装就可，只是第一次需要信任一下企业级证书。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
      <category term="ipa" scheme="http://markmiao.com/tags/ipa/"/>
    
  </entry>
  
  <entry>
    <title>东戴河之旅</title>
    <link href="http://markmiao.com/2017/07/22/dongdaihezhilv/"/>
    <id>http://markmiao.com/2017/07/22/dongdaihezhilv/</id>
    <published>2017-07-22T06:22:18.000Z</published>
    <updated>2017-07-26T03:19:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年5月27日，端午节假期开始前夕，我们提前开启了假期模式，跑到东戴河浪了一圈。</p>
<p>虽然刚入夏没多久，但是北京早已没有了春天的影子，夏天像头疯牛一样来的凶猛。天气好点的中午，堪比六月三伏。今天是7月22日了，一篇游记拖了两个月，这拖延症也是没谁了。到今天我才发现，觉得初夏天气热，我还是too young了。</p>
<a id="more"></a>
<p>“这么热的天，咱们出去玩吧？”我分明记得春天的时候，晓说：“这天不冷不热的，咱们出去玩吧？”真是啥天儿都适合出去玩。</p>
<p>“咱们不是刚去蓬莱玩回来吗？”</p>
<p>“别跟我提蓬莱！端午节前，姐姐他们去东戴河，咱们也一起去吧？”</p>
<p>听出来了吗？这虽然是问句，在征求我的意见，但却是道单选题。</p>
<p>“好！”社会主义新生活，就是要这样的民主与和谐。何况我最近也忙的有点想偷闲了。</p>
<p>我们计划27号早上出发，28号晚上回来，错开端午节假期出行高峰。姐姐他们26号自驾出行，我们27号坐动车去。虽然已经错开了假期，火车票还是早就售罄了，至少12306网站上是这么显示的。这些天我比较忙，晓负责酒店住宿和游玩攻略，我挂个软件抢票。</p>
<p>由于最近比较忙，在出发的早上，纠结再三还是把电脑带上了，打算在火车上敲会儿代码，毕竟来回六个小时车程呢。这就是上学时放假带书的怪圈：放假一定带书，带书一定不看，下次一定还带。毕业这么些年了，这个怪圈还没走出来。计划是美好的，现实的残酷的，火车上来回晃，一敲代码就晕。奇怪的是看动漫就不晕，发大志向带上的电脑，用来看了一路的《进击的巨人2》。</p>
<p>10:20到了东戴河，没有几个人下火车，我们下车的地方离出站口最远，不一会儿整个站台就剩我们俩了。四周望去全是野地，跟我们县火车站似的。晓说：“咱们没下错站吧。”我心里也略慌：“没下错吧，是东戴河站啊。”远处电梯口的工作小哥喊道：“快点，一会儿锁门了。”</p>
<p>我问那小哥：“现在还是淡季吧，人怎么这么少？”小哥告诉我们：“恩，现在还有点凉，不能下水，再过几天人就多了。”小哥说锁门不是骗我们的，出站口的人果然已经准备锁门了。小哥忙喊了一句：“等会儿，我这还俩人呢。”</p>
<p>出了火车站，除了一些黑车司机和农家院招揽生意的之外，游客只有我们俩。姐他们昨天已经到东戴河了，过了一会儿姐和哥开车过来接我们。在车上，姐已经按耐不住吐槽他们昨天的囧途囧事：开车压坏了海滩上一块木板赔了人200；车陷进沙滩里找人弄出来花了200；食堂吃饭吃出一只苍蝇恶心了一天；在房车插座上插电蚊香把插座烧了；昨天温度还特别低，在海边住冻得要死。这悲催经历，感觉跟我们去蓬莱那趟有的一拼了。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20170722-142010@2x.png" alt="房车"></p>
<p>住的地方是海边海滩上的房车，从火车站到海边房车那大概十多分钟的车程。第一次住房车这种高大上的地方，看啥新鲜。房车是类似一个白色大箱子的车厢，两边有窗户。房车虽然也有轮子，但是是固定在海滩上的，不能随便移动。每个房车周围都用篱笆围起来一个小院，有一张桌子和几把椅子。房车内一应俱全，沙发、床、电视、冰箱、煤气灶、卫生间、淋浴等等，不知道是不是因为淡季的原因，部分设备就是个摆设，比如煤气灶。总归来说，住宿环境还是挺好的，至少目前我是这么认为的。</p>
<p>今天来这里玩的人还是特别少，姐说昨晚海滩上这一整排房车只有他们这一辆房车的灯是亮的。我们今天来算是第二家，海滩上远远望去也没有多少人，今天气温宜人，明天又是端午节假期的第一天，这两天估计人会陆陆续续的多起来。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/231500702179_.pic.jpg" alt="东戴河的海滩"></p>
<p>收拾停当，自然是迫不及待的跑向大海了。脚踩沙滩，享受着海风拂面，东戴河的气温明显比北京的低一些，在北京的那种闷热烦躁早就一扫而光。这里海滩上的沙子特别细，被太阳晒得有点微热，脚踩上去非常干爽。稍微用力转转脚往深了踩踩，就能触及到湿沙子，那种凉爽沁脚心的感觉简直爽透了，特别是对于我们这种在北京燥热了半个初夏的人来说。</p>
<p>东戴河的海水特别清澈，比较来说我在烟台时去过的海边就太混浊了，在这里远远望去真有点碧海蓝天的感觉。姐说东戴河这里的海滩算是比较原始的了，没有被过分开发。有时候还能捡到一些比较漂亮的小贝壳或小海螺，当然不可能有商店里卖的那种大个的。想捡到那种漂亮海螺，只能去电视里的海滩。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/271500702316_.pic.jpg" alt="海边"></p>
<p>最开心的莫过于姐姐家的小宝宝沫沫了，沫沫在沙滩上一会爬来爬去，一会儿抓沙子，一会儿一屁股做沙滩上，拽着一根不知道从哪里薅过来的干草。晓拿细沙子埋他的小脚丫，一会儿给埋没了，他楞一会儿，一下子抽出来，嘎嘎直乐。姐他们连风筝都带来了，我体验了一把在海边放风筝的感觉，太自由了，根本不用担心挂树上或者和其他风筝缠在一起，海风也格外的赏脸，不大不小，风筝刚好飞起来。一下子线都放光了，极目望去都看不到风筝的本来面目了，其实那是一只卖萌的大虫子。沫沫挺喜欢看我放风筝的，指着风筝乐呢。</p>
<p>所有人来海边必做的事是寻宝。我和晓穿着拖鞋，踩着海水，低着头，仔细搜索，期盼着这一浪一浪地能推上来一只漂亮的贝壳或者海螺，或者是一只运气不好的海蟹，倒霉催的海虾之类的。其实现实很难如我们所愿，倒是找到了一些还看得过去的小贝壳，用我的话说：“没有让我眼前一亮的东西。”晓说：“你适合去看电焊。”姐姐他们昨天也搜寻过好几圈，叔叔阿姨他俩今天早上四五点钟就起来赶海，最终都收获寥寥，都是几块造型奇特的石头，或者长得奇形怪状的贝壳。虽然没什么收获，但是这种悠闲还是令人满足。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/301500702443_.pic_hd.jpg" alt="海滩"></p>
<p>晚上的重头戏是孔明灯。这是我第一次放孔明灯，真是个耐心细致的技术活，也真难为晓这种急脾气能耐心等着孔明灯慢慢撑起来，缓缓送出去。我亲自拆了一个孔明灯，并写下了我的愿望——挣钱，并尽量耐心的去放我人生中第一个孔明灯。在呼呼的海风下，点了半天才把蜡点着，打火机都烧坏了。两手撑着灯罩，慢慢等它鼓起来，鼓起一点，被海风吹下去一点，鼓一点，吹一点。晓说：“你放低点。”我往低了一放，放的太低了，蜡一下子粘到沙粒了。纠结了半天，好不容易鼓的差不多了，轻轻送出去，往上飞一点，往下落一点，飞一点，落一点，一跳一跳地沿着海岸线就跑了，这个熊灯！这一会儿的功夫，晓他们都放出去仨了。我肯定不甘心，不能就这么放任它跑了呀，非得飞起来不可。我就追着我的熊灯跑，它就跳，我就追。歪歪斜斜，一上一下，沿着海岸线，也不飞起来，也不落下去，也不掉海里自杀，也不烧灯罩自燃，逗我呢？就这样我追出去得有一百多米远，晓喊我：“赶紧回来吧！”难道是我的愿望太重了？我这得挣多少钱呐？我的耐心被这个熊灯彻底磨没了，捧起一把沙子给扑灭了，让你跳！我人生中第一个孔明灯，就这么把我调戏恼了。</p>
<p>夜晚的经历注定要给这场旅行加一点不完美的插曲。</p>
<p>放完孔明灯，天完全黑了，海边的夜，黑的彻底，不像城市里，再黑的夜都有明亮的灯。回到房车，发现有两盏灯不亮了，电视也打不开了，我匆匆洗了个澡发现热水也没了。什么玩意？花那么多钱就给我整个这个？开心了一整天，到了要睡觉了，整了这么一出。</p>
<p>我给客服打电话，客服说：“这么晚电工都下班了，这里就我一个人，我也整不了啊。”“整不了就换个房车。”我没耐心的说。客服说：“房车都预订出去了。”我有点火了，我们从姐姐他们住的房车走过来的时候，一眼望去，几十辆房车只有三四家亮着灯，你告诉我都订出去了？我说：“外面那么多黑着灯的，你告诉我都订出去了？他们今晚来住吗？”客服说：“明天会来。”“明天再说明天的，今晚你先给我们解决。”客服说：“我给你找找有没有空房，一会儿给您回电话。”</p>
<p>十多分钟过去了，没动静，我给打过去之后客服说：“有一套，您确定要换吗？”“换！”反正我们也没多少东西。换了一辆房车，发现没热水，我放了半天都没有。我又给客服打电话：“这个房车没热水，怎么回事？”客服说：“没烧水，您确定今晚要用吗？要不明天再用？”我彻底火了：“你这不废话吗？我得洗漱啊，明天我都退房走了，洗个屁！”客服没办法地说：“好吧，我找人给您弄一下。”这明显没把我们当上帝啊！折腾了一宿，生了一肚子气，最终也终于能安然入睡了。</p>
<p>第二天本打算早起去赶海，没起来，醒了就七八点钟了。早餐是去食堂吃的，就是前天姐姐他们吃出苍蝇的地儿。房车住宿还提供了食堂的三餐餐券，但是食堂离的很远，在一个集装箱住宿的地方，开车去挺近，走着去就有点远了。自从姐姐说他们吃出苍蝇，我们的餐券就没再用过。早餐都是馒头粥，相对干净。</p>
<p>吃完早餐，哥和叔叔阿姨他们开车回去了，我和晓打算逛逛待会儿沿着海岸线走回去。吃饭的时候，我们看到食堂附近有一片礁石，一直延伸到海里面。我们过去一看原来是建筑废料，都是大块的混凝块，上面沾满了贝壳残渣，还有好多小生蚝，大的都被人撬走了，搜索了半天也没什么收获。沿着海边一边走一边找宝贝，最终找到了一串青口贝，几块粘在一起的生蚝，几个漂亮的扇贝，也算收获颇丰了。</p>
<p>到了中午该退房了，姐姐他们退了房就自驾回去了，我和晓是今晚8点多的动车，当时买票的时候只有晚上8点这一趟车还有票。等到晚上8点确实太无聊的，我又看了一下票，发现各个时间段的票都很富余嘛，于是愉快地改签到下午三点四十多。</p>
<p>姐姐他们自驾回京了，我和晓对望一眼，去哪呢？“走，去止锚湾！”姐走之前给我们的建议，可以去止锚湾玩玩。这边荒凉到打车都难，一位发售楼传单的大哥看我们找车，主动搭讪说：跟他去看一眼他们的楼盘，然后免费带我们去止锚湾。我乐了，说：“我们时间紧，您拉趟私活吧，我给钱。”</p>
<p>到了止锚湾，发现这边可比房车那边好玩的多多了，不仅有好玩的还有好吃的。这边的海滩延伸特别长，走进去好远，水都没补过膝盖。都过中午了，先吃顿好吃的。我问一个在海边卖东西的大哥：“路边上这几家海鲜餐馆哪家比较好吃？”大哥说：“都可以，现在没有那种吃完宰客的行为了，放心吃吧。”我一愣，反应过来了，说的是青岛天价大虾那种情况呀。我们随便找了一家，点了点蛏子、花蛤、鱿鱼等海鲜，便宜实惠还好吃。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/261500702315_.pic.jpg" alt="止锚湾"></p>
<p>吃完海鲜就去下海淘活海鲜了，为此还在刚才那大哥摊铺上买了两双凉鞋，两把塑料铲子（怕买铁的带不上动车）。下海就是一顿乱瞅，还别说这临走之前还真是收获丰富。透过清澈的海水都能看到奔跑的寄居蟹，只要看到就别想逃出我的旋风塑料铲。不仅有寄居蟹，还有小的皮皮虾、小螃蟹等。海边摊铺上还有卖吸筒的，就像小孩玩的呲水筒一样，据说改装之后可以在海底淤泥里吸皮皮虾，我们看到一个人拎了一小桶皮皮虾，说全是拿这玩意吸出来的。我们乐此不疲的玩了两个多小时，捉到一只方形长眼睛红螃蟹，圆形大肚子球螃蟹（我实在不知道这两种蟹的名字），还有若干寄居蟹和小皮皮虾。用矿泉水瓶装着，带它们回北京。</p>
<p>天也热了，人也多了，我们也玩累了。海边上人越来越多，开始有人下海游泳了，我们也准备回去了。在海边买了一包大樱桃，卖樱桃的老板帮我们叫了一辆车去火车站。进站时又遇到那位带我们出站的小哥，看到我们笑了，说：“这么快就走了。”我笑着说：“嗯，走了。”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年5月27日，端午节假期开始前夕，我们提前开启了假期模式，跑到东戴河浪了一圈。&lt;/p&gt;
&lt;p&gt;虽然刚入夏没多久，但是北京早已没有了春天的影子，夏天像头疯牛一样来的凶猛。天气好点的中午，堪比六月三伏。今天是7月22日了，一篇游记拖了两个月，这拖延症也是没谁了。到今天我才发现，觉得初夏天气热，我还是too young了。&lt;/p&gt;
    
    </summary>
    
      <category term="记事" scheme="http://markmiao.com/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
      <category term="生活" scheme="http://markmiao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="游记" scheme="http://markmiao.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发笔记二</title>
    <link href="http://markmiao.com/2017/07/06/iOStwo/"/>
    <id>http://markmiao.com/2017/07/06/iOStwo/</id>
    <published>2017-07-06T07:27:51.000Z</published>
    <updated>2017-07-06T07:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iOS编译优化策略Optimization-Level"><a href="#iOS编译优化策略Optimization-Level" class="headerlink" title="iOS编译优化策略Optimization Level"></a>iOS编译优化策略Optimization Level</h2><p>开发汉信码扫描功能时，扫描个别汉信码，<code>Release</code>环境下会闪退，<code>Debug</code>环境下正常。没有找到崩溃原因，暂时更改<code>Optimization Level</code>下的<code>Release</code>为<code>None[-O0]</code>，这样<code>Release</code>下也会和<code>Debug</code>一样，对代码没有优化操作。</p>
<a id="more"></a>
<p>更改位置：</p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TARGETS -&gt; Build Settings -&gt; Optimization Level -&gt; Release  选择`None[-O0]`</div></pre></td></tr></table></figure>
<p><a href="https://gcc.gnu.org/onlinedocs/gnat_ugn/Optimization-Levels.html" target="_blank" rel="external">Optimization Level官方解释</a></p>
<h2 id="跳转京东客户端某商品详情页"><a href="#跳转京东客户端某商品详情页" class="headerlink" title="跳转京东客户端某商品详情页"></a>跳转京东客户端某商品详情页</h2><p>iOS9以后，app内打开其他app需要在<code>Info.plist</code>里添加<code>LSApplicationQueriesSchemes</code>白名单。</p>
<p>跳转京东客户端需要增加京东的URL Scheme：<code>openapp.jdmobile</code></p>
<p><a href="http://www.jianshu.com/p/195b17052925" target="_blank" rel="external">iOS URL Scheme 大全(快速启动)</a></p>
<p>首先要判断手机里是否安装京东客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@&quot;openApp.jdMobile://&quot;]]) &#123;</div><div class="line">		//安装了</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跳转京东客户端：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;openApp.jdMobile://&quot;]];</div></pre></td></tr></table></figure>
<p>跳转京东客户端某商品详情页：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSString *openUrl = @&quot;openapp.jdmobile://virtual?params=%7B%22sourceValue%22:%220_productDetail_97%22,%22des%22:%22productDetail%22,%22skuId%22:%2299999999%22,%22category%22:%22jump%22,%22sourceType%22:%22PCUBE_CHANNEL%22%7D&quot;;</div><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:openUrl]];</div></pre></td></tr></table></figure>
<p>注意：openUrl字符串要原封不动的拷贝到应用中使用，里面的%22、%7等保持原样，不要转义。中间部分的<code>99999999</code>是京东的商品编号：<code>defSkuID</code>，跳转到该商品的详情中。</p>
<h2 id="OC与JavaScript交互"><a href="#OC与JavaScript交互" class="headerlink" title="OC与JavaScript交互"></a>OC与JavaScript交互</h2><p>在APP内使用UIWebView展示网页，有时候需要和网页进行功能交互和数据传递。</p>
<p>最简单的一种交互是使用<code>UIWebView</code>的Delegate方法拦截webView的加载地址，和给定的地址匹配，如果匹配则不允许加载，并跳转到指定控制器，如果不匹配则允许加载。</p>
<p>拦截加载地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)webView:(UIWebView*)webView shouldStartLoadWithRequest:(NSURLRequest*)request navigationType:(UIWebViewNavigationType)navigationType &#123;</div><div class="line">    NSURL *url = [request URL];</div><div class="line">    NSLog(@&quot;加载地址 = %@&quot;, url);</div><div class="line">    return YES;//return YES允许加载，return NO不允许加载</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>iOS7以后，苹果推出了<code>JavaScriptCore</code>，用它可以直接完成oc和js之间的交互通信。下面介绍利用代理实现js调用oc中的方法，并完成数据传递。</p>
<p>第一步：在加载UIWebView的控制器中创建<code>JSExport</code>的协议，并写入和js约定好的方法，方法名要一致。该控制器遵守协议，并实现协议方法，完成webView和该控制器的交互。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#import &lt;UIKit/UIKit.h&gt;</div><div class="line">#import &lt;JavaScriptCore/JavaScriptCore.h&gt;//导入JavaScriptCore</div><div class="line"></div><div class="line">@protocol JSObjcDelegate &lt;JSExport&gt; //创建协议，写入协议方法。方法名必须和js内中一致，这些方法在js中属于对象SafetyObj下的</div><div class="line">//方法1：js调用oc中的方法</div><div class="line">- (void)fnJumpScan;</div><div class="line">//方法2：js调用oc中的方法，并要求得到某个返回值</div><div class="line">- (NSString *)fnGetCustomData;</div><div class="line">//方法3：js调用oc中的方法，并传递过来一个参数</div><div class="line">- (void)fnSaveCustomData:(NSString *)callString;</div><div class="line">@end</div><div class="line"></div><div class="line">@interface ViewController : UIViewController&lt;UIWebViewDelegate,JSObjcDelegate&gt;</div><div class="line"></div><div class="line">@property(nonatomic,weak)UIWebView *webView;</div><div class="line">@property (nonatomic, strong) JSContext *context;//js运行环境</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>第二步：在网页加载完毕时，获取js运行环境，并且设置方法对象的代理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView &#123;</div><div class="line">    self.context = [webView valueForKeyPath:@&quot;documentView.webView.mainFrame.javaScriptContext&quot;];</div><div class="line">    self.context[@&quot;SafetyObj&quot;] = self;//将自身设置为js对象的代理</div><div class="line">    self.context.exceptionHandler = ^(JSContext *context, JSValue *exception) &#123;</div><div class="line">        context.exception = exception;</div><div class="line">        NSLog(@&quot;异常信息 = %@&quot;, exception);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三步：实现代理方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (void)fnJumpScan &#123;</div><div class="line">    NSLog(@&quot;点击了jumpScan&quot;);</div><div class="line">&#125;</div><div class="line">- (NSString *)fnGetPostion &#123;</div><div class="line">    return @&quot;1234&quot;;</div><div class="line">&#125;</div><div class="line">- (void)fnSaveCustomData:(NSString *)callString &#123;</div><div class="line">    NSLog(@&quot;callString = %@&quot;, callString);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iOS编译优化策略Optimization-Level&quot;&gt;&lt;a href=&quot;#iOS编译优化策略Optimization-Level&quot; class=&quot;headerlink&quot; title=&quot;iOS编译优化策略Optimization Level&quot;&gt;&lt;/a&gt;iOS编译优化策略Optimization Level&lt;/h2&gt;&lt;p&gt;开发汉信码扫描功能时，扫描个别汉信码，&lt;code&gt;Release&lt;/code&gt;环境下会闪退，&lt;code&gt;Debug&lt;/code&gt;环境下正常。没有找到崩溃原因，暂时更改&lt;code&gt;Optimization Level&lt;/code&gt;下的&lt;code&gt;Release&lt;/code&gt;为&lt;code&gt;None[-O0]&lt;/code&gt;，这样&lt;code&gt;Release&lt;/code&gt;下也会和&lt;code&gt;Debug&lt;/code&gt;一样，对代码没有优化操作。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>排班 - 上班时间，一目了然</title>
    <link href="http://markmiao.com/2017/04/05/%E6%8E%92%E7%8F%AD/"/>
    <id>http://markmiao.com/2017/04/05/排班/</id>
    <published>2017-04-05T09:18:42.000Z</published>
    <updated>2017-11-15T02:20:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>排班 - 是一款以日历为基础，记录上班时间的应用。主要针对实行倒班制，上班时间不固定的用户。简单的两步设置，便能准确地在日历上排列出上班时间，查看方便，一目了然。不用在台历上拿笔标记，也不用时时去看主管给你的上班安排。让你告别上班时间不确定的痛苦。</p>
<a id="more"></a>
<p><img src="http://oalg33nuc.bkt.clouddn.com/seticonapp.png" alt=""></p>
<h2 id="获取排班"><a href="#获取排班" class="headerlink" title="获取排班"></a>获取排班</h2><p>iOS: <a href="https://itunes.apple.com/cn/app/id1221228242?mt=8" target="_blank" rel="external">App Store下载</a></p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><ul>
<li><p>丰富而简洁的日历信息，包含<code>公历</code>、<code>农历</code>以及各种<code>节日</code>、<code>节气</code>、<code>节假日</code>、<code>纪念日</code>，适合每一位用户查看。</p>
</li>
<li><p><strong>添加排班：</strong>设置<code>坐标时间</code> -&gt; 添加<code>循环班次</code> -&gt; 保存<code>班表</code>，添加的班次会立刻出现在日历上。可选择<code>无限循环</code>、<code>指定时间内循环</code>、<code>按月循环</code>排班。可编辑<code>班表名称</code>。</p>
</li>
<li><p><strong>无线循环排班：</strong><code>坐标时间</code>是开始循环的时间，默认从今天开始。会以这个时间为坐标，向前、向后无限循环设置的<code>循环班次</code>。</p>
</li>
<li><p><strong>指定日期内循环排班：</strong>给<code>循环班次</code>设置一个<code>日期范围</code>，会从<code>开始日期</code>开始执行<code>循环班次</code>，一直循环到<code>结束日期</code>。这个日期范围之外无班次设置。</p>
</li>
<li><p><strong>按月循环排班：</strong>不需要时间设置，从每月的<code>1号</code>开始执行<code>循环班次</code>，循环到每月的最后一日。每个月都是独立循环的。</p>
</li>
<li><p><strong>循环班次：</strong>循环班次可长按拖动排序，指定删除某个班次，一键清空所有添加的班次。</p>
</li>
<li><p><strong>待选班次：</strong>待选班次预设了6个，可添加删除。可以在设置中还原待选班次。</p>
</li>
<li><p><strong>选择班表：</strong>可以添加多个班表，这里显示了添加的所有班表名称，选中确认显示在日历中。可以左滑删除。</p>
</li>
<li><p><strong>班表统计：</strong>统计每个月，各种班次各上了几天班。一键查看方便快捷。</p>
</li>
<li><p><strong>备忘列表：</strong>长按日历中的某天，或点击今日信息中的备忘，可添加备忘信息。所有的备忘信息会显示在这里，可以左滑删除。</p>
</li>
<li><p><strong>其他设置：</strong>可以设置日历的各种显示方式，可以还原待选班次，清空添加的备忘记录和班表。</p>
</li>
<li><p><strong>自定义班次：</strong>当待选班次没有合适的，可以自己添加待选班次，指定喜欢的班次颜色。</p>
</li>
<li><p><strong>修改某一天的班次：</strong>长按日历中的某天，或者点击今日信息中的排班，可修改这一天的班次。</p>
</li>
</ul>
<h2 id="反馈与支持"><a href="#反馈与支持" class="headerlink" title="反馈与支持"></a>反馈与支持</h2><p>如果您有自己的排班需求和对应用的意见或建议，请联系：i@markmiao.com 我们会认真对待每一次反馈，将[排班]做的更好。</p>
<p>如果您喜欢该应用，请在App Store留下宝贵的评价。</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><strong>感谢下列开源项目</strong></p>
<p><a href="https://github.com/ccgus/fmdb" target="_blank" rel="external">fmdb</a></p>
<p><a href="https://github.com/yuantiku/YTKKeyValueStore" target="_blank" rel="external">YTKKeyValueStore</a></p>
<p><a href="https://github.com/cyanzhong/LunarCore" target="_blank" rel="external">LunarCore</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排班 - 是一款以日历为基础，记录上班时间的应用。主要针对实行倒班制，上班时间不固定的用户。简单的两步设置，便能准确地在日历上排列出上班时间，查看方便，一目了然。不用在台历上拿笔标记，也不用时时去看主管给你的上班安排。让你告别上班时间不确定的痛苦。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="应用" scheme="http://markmiao.com/tags/%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Widget开发</title>
    <link href="http://markmiao.com/2017/04/02/Widget%E5%BC%80%E5%8F%91/"/>
    <id>http://markmiao.com/2017/04/02/Widget开发/</id>
    <published>2017-04-02T12:09:00.000Z</published>
    <updated>2017-04-05T09:38:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>widget是iOS8时推出的窗口小部件功能，窗口小部件在Android上早已大行其道。记得当年用过的第一部Android是深圳出产的国产机，当时滑过三四个屏幕的应用，还能继续再滑三四个屏幕的窗口小部件。用的最多的窗口小部件就是日历了，屏幕上一目了然。</p>
<a id="more"></a>
<p>Apple直到iOS8才加入窗口小部件，而且可自定义程度远远没有Android开放。</p>
<p>本文记录了开发widget的步骤，以及遇到的一些问题。</p>
<p>开发环境：Xcode8.2.1，swift3.0</p>
<h2 id="创建widget"><a href="#创建widget" class="headerlink" title="创建widget"></a>创建widget</h2><p>widget可以理解为一个独立的项目，虽然形式上看来像是附属于app的一部分功能，其实并不是，widget想获取app的数据，还需要做数据共享。</p>
<p><code>File</code> -&gt; <code>New</code> -&gt; <code>Target</code></p>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/2016-10-094.36.08.png?raw=true" alt="创建Today Extension"></p>
<p>选择iOS里的<code>Today Extension</code></p>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/2016-10-094.40.27.png?raw=true" alt="创建Today Extension"></p>
<p>习惯使用纯代码布局，喜欢用storyboard的不需要下面的info.plist修改。在新创建的widget项目文件夹中删除<code>MainInterface.storyboard</code>，修改info.plist里的<code>NSExtension</code>字段：</p>
<ol>
<li>删除<code>NSExtensionMainStoryboard</code>字段</li>
<li>添加<code>NSExtensionPrincipalClass</code>字段，Value 为<code>TodayViewController</code>（<code>TodayViewController</code>是自定义控制器，）</li>
</ol>
<p>修改info.plist的结果如下</p>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/QQ20161009-0.png?raw=true" alt="img"></p>
<h3 id="问题1-widget崩溃"><a href="#问题1-widget崩溃" class="headerlink" title="问题1.widget崩溃"></a>问题1.widget崩溃</h3><p>经过上述修改，用纯代码布局widget，用OC开发是没有问题的，swift3.0中widget会崩溃，并打印下面的错误。</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: '*** setObjectForKey: object cannot be nil (<span class="built_in">key</span>: 56A34ADC-7A43-<span class="number">43B0</span>-A924-171F803DD305)'</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div></pre></td></tr></table></figure>
<p>StackOverflow有人遇到同样的问题：<a href="http://stackoverflow.com/questions/28153273/today-extension-crashes-before-launching-on-ios-8-1-2" target="_blank" rel="external">Today Extension Crashes before launching on iOS 8.1.2</a>，但解答好像并没有效果。</p>
<p>在一篇博客中我找到了解决办法，<a href="http://blog.xebia.com/ios-today-widget-written-in-swift/" target="_blank" rel="external">博客地址</a></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Since (<span class="keyword">at</span> <span class="keyword">the</span> <span class="built_in">time</span> <span class="keyword">of</span> this writing) Xcode cannot find Swift classes <span class="keyword">as</span> extension principal classes, we also would have <span class="built_in">to</span> <span class="built_in">add</span> <span class="keyword">the</span> following <span class="built_in">line</span> <span class="built_in">to</span> our TodayViewController:</div><div class="line"></div><div class="line">@objc (TodayViewController)</div><div class="line"></div><div class="line">Update: Make sure <span class="built_in">to</span> <span class="built_in">set</span> <span class="keyword">the</span> <span class="string">"Embedded Content Contains Swift Code"</span> build setting <span class="keyword">of</span> <span class="keyword">the</span> main app target <span class="built_in">to</span> YES. Otherwise your widget written <span class="keyword">in</span> Swift will crash.</div></pre></td></tr></table></figure>
<p>文中说目前为止Xcode找不到swift类作为拓展主题类（其实到我写这篇文章的时候，还是找不到），这可能是一个bug。解决办法是需要在widget控制器<code>TodayViewController</code>中添加：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> (<span class="type">TodayViewController</span>)</div></pre></td></tr></table></figure>
<p>博文更新中说，可以更改<code>Embedded Content Contains Swift Code</code>这个设置为yes，但是在Xcode8.2.1中，这个设置已经没有了，取而代之的是<code>Always Embed Swift Standard Libraries</code>，亲测主项目的<code>targets</code>和widget的<code>targets</code>中修改这个设置的Bool值，都还是会崩溃。</p>
<h2 id="widget折叠"><a href="#widget折叠" class="headerlink" title="widget折叠"></a>widget折叠</h2><p>iOS10之后才有的widget折叠。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> #available(iOSApplicationExtension <span class="number">10.0</span>, *) &#123;</div><div class="line">    <span class="keyword">self</span>.extensionContext?.widgetLargestAvailableDisplayMode = .expanded</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Fallback on earlier versions</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现下面方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@available</span>(iOSApplicationExtension <span class="number">10.0</span>, *)</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">widgetActiveDisplayModeDidChange</span><span class="params">(<span class="number">_</span> activeDisplayMode: NCWidgetDisplayMode, withMaximumSize maxSize: CGSize)</span></span> &#123;</div><div class="line">	<span class="keyword">if</span> activeDisplayMode == .expanded &#123;</div><div class="line">        <span class="keyword">self</span>.preferredContentSize = <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">200</span>)</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">self</span>.preferredContentSize = maxSize</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="代码共享"><a href="#代码共享" class="headerlink" title="代码共享"></a>代码共享</h2><p>虽然widget附属于主应用，但其实是独立的。在widget中无法调用主应用中的代码，这样一来就蛋疼了。有些公共方法或者控件，在主应用中写完了，在widget却无法使用。当然把主应用中的代码拷贝一份到widget中也是可以的，这种做法太low。</p>
<p>可以使用framework做代码共享。创建一个framework</p>
<p><code>File</code> -&gt; <code>New</code> -&gt; <code>Target</code></p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20170330-150955.png" alt="创建framework"></p>
<p>在<code>framework</code>的<code>Build Phases</code> -&gt; <code>Compile Sources</code>里面添加要共享的代码文件。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20170330-152310.png" alt="添加共享的代码文件"></p>
<p>在<code>TARGETS</code>里面，分别在主项目和widget下面的<code>Linked Frameworks and Libraries</code>里面添加新建的<code>framework</code></p>
<p>并在widget中用到共享代码的地方引入<code>framework</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> ShareToday</div></pre></td></tr></table></figure>
<h3 id="问题1-引入framework报错和报警告"><a href="#问题1-引入framework报错和报警告" class="headerlink" title="问题1.引入framework报错和报警告"></a>问题1.引入framework报错和报警告</h3><p>引入的时候会如下错误：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TodayViewController.swift:<span class="number">11</span>:<span class="number">8</span>: Module <span class="keyword">file</span><span class="symbol">'s</span> minimum deployment target <span class="keyword">is</span> ios10.<span class="number">0</span> v10.<span class="number">0</span>:</div></pre></td></tr></table></figure></p>
<p>是因为framework的<code>Deployment Target</code>的版本号和widget的版本号不相符，改为一样的即可。</p>
<p>报如下警告：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ld: warning: linking <span class="keyword">against</span> a dylib which <span class="keyword">is</span> <span class="keyword">not</span> safe <span class="keyword">for</span> use <span class="keyword">in</span> <span class="built_in">application</span> extensions:</div></pre></td></tr></table></figure>
<p>是因为application extensions限制了一些API的使用，而在新建的framework里面，可能包含了这些API，所以才会出现这个警告。</p>
<p>解决办法：勾选framework里面的<code>Allow app extension API only</code></p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20170330-152418.png" alt="注意"></p>
<h3 id="问题2-方法调用不到"><a href="#问题2-方法调用不到" class="headerlink" title="问题2.方法调用不到"></a>问题2.方法调用不到</h3><p>swift中，加入到framework的一些方法，在引入头文件后的widget调用不到。</p>
<p>解决办法：需要把方法设置为公用的，用<code>public</code>修饰方法，例如</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getString</span><span class="params">(a: Int)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="string">"<span class="subst">\(a)</span>"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果有共用的oc代码，需要将.m文件引入到<code>Compile Sources</code>，将.h文件拖入<code>Headers</code>的<code>Public</code>里面，然后在framework的.h头文件中<code>#import</code>共用oc代码的.h头文件</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/2017-04-02-14-17-36.png" alt="引入oc共享代码"></p>
<h2 id="数据共享"><a href="#数据共享" class="headerlink" title="数据共享"></a>数据共享</h2><h3 id="配置证书："><a href="#配置证书：" class="headerlink" title="配置证书："></a>配置证书：</h3><ol>
<li>在<code>Certificates, Identifiers &amp; Profiles</code>里的<code>Identifiers</code>下面添加<code>App IDs</code>时，要勾选<code>App Groups</code>。</li>
<li>在<code>App Group</code>添加一个<code>App Group</code>，在写<code>Identifier</code>，会在前面自动添加<code>group.</code></li>
<li>添加<code>App Group</code>之后，在<code>App IDs</code>点开第1步创建的id，点击edit，把<code>App Group</code>添加上，<code>App Group</code>的黄点会变成绿点。</li>
</ol>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20170402-113444@2x.png" alt="创建的App Group"></p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20170402-113344@2x.png" alt="配置完成的Identifier"></p>
<h3 id="添加证书"><a href="#添加证书" class="headerlink" title="添加证书"></a>添加证书</h3><p>在Xcode的<code>TARGEST</code>下面，主程序和widget的<code>Capabilities</code>里面，都要打开<code>App Groups</code>。下面的Steps不能有红色叹号的错误。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20170402-113739@2x.png" alt="正确显示"></p>
<p>在证书配置正确的前提下，还出现了红色叹号的错误警告，有可能是因为主项目或者widget的<code>General</code>里面没有选择好正确的签名Team。</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/WX20170402-112029@2x.png" alt="配置正确的签名"></p>
<h3 id="用NSUserDefaults共享数据，"><a href="#用NSUserDefaults共享数据，" class="headerlink" title="用NSUserDefaults共享数据，"></a>用NSUserDefaults共享数据，</h3><p>存储数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shareDefaults = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.xxx.xxx.xx"</span>)<span class="comment">//App Groups ID</span></div><div class="line">shareDefaults?.<span class="keyword">set</span>(worksArray, forKey: <span class="string">"worksArray"</span>)</div><div class="line">shareDefaults?.synchronize()</div></pre></td></tr></table></figure>
<p>读取数据</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> shareDefaults = <span class="type">UserDefaults</span>(suiteName: <span class="string">"group.xxx.xxx.xx"</span>)<span class="comment">//App Groups ID</span></div><div class="line"><span class="keyword">let</span> worksArray = shareDefaults?.array(forKey: <span class="string">"worksArray"</span>)</div></pre></td></tr></table></figure>
<h3 id="点击widget开启app"><a href="#点击widget开启app" class="headerlink" title="点击widget开启app"></a>点击widget开启app</h3><p>在widget中，点击图标可以开启主应用，不用添加任何方法。如果想点击其他地方开启app，需要在app的<code>TARGEST</code>里的<code>info</code>下<code>URL Types</code>添加<code>URL Schemes</code></p>
<p><img src="https://github.com/mxdios/notebook/blob/master/notebooks/images/QQ20161009-1.png?raw=true" alt="img"></p>
<p>添加点击事件，调用方法，开启app</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">openApp</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">self</span>.extensionContext?.open(<span class="type">URL</span>(string: <span class="string">"paibanapp://"</span>)!, completionHandler: &#123; (<span class="type">Bool</span>) <span class="keyword">in</span></div><div class="line">		<span class="built_in">print</span>(<span class="string">"success"</span>)</div><div class="line">	&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;widget是iOS8时推出的窗口小部件功能，窗口小部件在Android上早已大行其道。记得当年用过的第一部Android是深圳出产的国产机，当时滑过三四个屏幕的应用，还能继续再滑三四个屏幕的窗口小部件。用的最多的窗口小部件就是日历了，屏幕上一目了然。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://markmiao.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>swift中contains的使用</title>
    <link href="http://markmiao.com/2017/03/16/swift%E4%B8%ADcontains%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://markmiao.com/2017/03/16/swift中contains的使用/</id>
    <published>2017-03-16T05:25:47.000Z</published>
    <updated>2017-03-16T05:27:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>contains</code>是swift中的一个实例方法，返回一个Bool值，用于做“是否包含”的判断。简单的说就是：告诉你一堆玩意儿中是否有你要的玩意儿。</p>
<a id="more"></a>
<h2 id="方法contains"><a href="#方法contains" class="headerlink" title="方法contains()"></a>方法contains()</h2><p>用法1：判断字符串中是否包含某个字符或某段字符串</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">"abcdef"</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">contains</span>(<span class="string">"a"</span>))<span class="comment">//true</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">contains</span>(<span class="string">"bcd"</span>))<span class="comment">//true</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">contains</span>(<span class="string">"g"</span>))<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>用法2：判断数组中是否包含某个元素</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = [<span class="string">"Mark"</span>, <span class="string">"Kim"</span>, <span class="string">"Goudan"</span>]</div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">contains</span>(<span class="string">"Mark"</span>))<span class="comment">//true</span></div><div class="line"><span class="built_in">print</span>(str.<span class="built_in">contains</span>(<span class="string">"MJ"</span>))<span class="comment">//false</span></div></pre></td></tr></table></figure>
<h2 id="方法contains-where"><a href="#方法contains-where" class="headerlink" title="方法contains(where: )"></a>方法contains(where: )</h2><p>该方法接收一个闭包，以序列元素作为闭包的参数，返回一个Bool值，判断该序列中是否有元素符合闭包条件。</p>
<p>用法1：判断Int数组中元素有没有大于100的</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">66</span>,<span class="number">88</span>,<span class="number">100</span>]</div><div class="line"><span class="keyword">let</span> zz = list.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; (value) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> value &gt; <span class="number">100</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">print</span>(zz)<span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>闭包的写法可以简化，闭包中只有一行表达式时，可以省略return，直接写表达式，隐式返回：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> zz = list.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; (value) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">	 value &gt; <span class="number">100</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>闭包的参数名可以简化为$0，表示第i个参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> zz = list.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123;$<span class="number">0</span> &gt; <span class="number">100</span>&#125;)</div></pre></td></tr></table></figure>
<p>用法2：判断对象数组中对象元素的某个key所对应的value是存在某值</p>
<p>例如：判断下面<code>dictList</code>数组中的字典元素里面是否有<code>&quot;name&quot;</code> == <code>&quot;Mark&quot;</code>的元素存在</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dictList = [[<span class="string">"name"</span>: <span class="string">"Goudan"</span>, <span class="string">"age"</span>: <span class="string">"22"</span>], [<span class="string">"name"</span>: <span class="string">"Mark"</span>, <span class="string">"age"</span>: <span class="string">"18"</span>], [<span class="string">"name"</span>: <span class="string">"Maoya"</span>, <span class="string">"age"</span>: <span class="string">"19"</span>], [<span class="string">"name"</span>: <span class="string">"Tuzi"</span>, <span class="string">"age"</span>: <span class="string">"25"</span>], ]</div></pre></td></tr></table></figure>
<p>当然可以通过<code>for</code>循环遍历<code>dictList</code>数组，挨个字典元素检测。这样做太麻烦，可以使用<code>contains(where: )</code>方法，传入一个闭包，完成检测</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isMark = dictList.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123; (dict:[<span class="type">String</span> : <span class="type">String</span>]) -&gt; <span class="type">Bool</span> <span class="keyword">in</span></div><div class="line">    dict[<span class="string">"name"</span>] == <span class="string">"Mark"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>可简写为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> isMark = a.<span class="built_in">contains</span>(<span class="keyword">where</span>: &#123;$<span class="number">0</span>[<span class="string">"name"</span>] == <span class="string">"Mark"</span>&#125;)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;contains&lt;/code&gt;是swift中的一个实例方法，返回一个Bool值，用于做“是否包含”的判断。简单的说就是：告诉你一堆玩意儿中是否有你要的玩意儿。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://markmiao.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>蓬莱两日游</title>
    <link href="http://markmiao.com/2017/03/14/%E8%93%AC%E8%8E%B1%E4%B8%A4%E6%97%A5%E6%B8%B8/"/>
    <id>http://markmiao.com/2017/03/14/蓬莱两日游/</id>
    <published>2017-03-14T10:06:32.000Z</published>
    <updated>2017-03-14T10:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近俗事缠身，鸭梨山大。工作和生活的状态有些脱轨，人压抑太久了，就需要放松一下，不然会出问题的，可能是身体、心理、或者是家庭。为了有一个好的生活状态，需要暂停一下，歇一歇，散散心。</p>
<a id="more"></a>
<p>晓说想看海，在大海边坐坐，找找面朝大海，春暖花开的感觉，放松一下这段时间疲惫的身心。我俩思前想后，感觉蓬莱不错。东海仙山，自古以来那都是出神仙的地方。八仙就在这地过的海，显的神通，当年秦始皇求仙问道都去蓬莱。我俩一致认为：此地可去！其实想去的原因并没这么复杂，主要是去蓬莱的特价机票最便宜。</p>
<p>3月4号早上去的蓬莱，5号下午回的北京。不知道是不是因为去心不诚，此次旅行可谓一言难尽。面朝大海，却没有春暖花开。人间仙境，果然是名不虚传。</p>
<p>4号早上7:40的飞机，我一直认为是7:50的，10分钟误差虽不至于误机，但也让我紧张了一下，再加上早上起得有点晚，不免有些慌张。洗漱的时候，我刮胡子把嘴唇刮破了，好久才止住血。晓把擦脸油扣了一地，看她那心疼的眼神，我嘴破了咕嘟咕嘟流血时，她看我都没这眼神。</p>
<p>出发时，晓没穿羽绒服。我凭借在烟台待过好几年的社会经验告诉她：会冻的你打嘚嘚。上车前我跑回楼里拿了羽绒服，在蓬莱的这两天，此举会让她觉得我比那瓶擦脸油管用。</p>
<p>急急忙忙上了车，周六虽然不堵车，但是逢路口必遇红灯。我说：“也是醉了，这一早上诸事不顺！”晓给了我一巴掌：“胡说八道什么呢，赶紧呸呸呸。”我呸了两下，估计是没呸干净，不顺的事后面还有好多。早上没睡醒有些困了，我说：“好困。”晓说：“昨晚我一宿夜班呢，一眼没合，我还没说困呢。”我贱兮兮的说：“这么长时间不合眼，眼睛干不干？”晓都没搭理我。</p>
<p>到了首都机场，飞机意料之中的晚点，到蓬莱机场时已经是中午了。酒店订在蓬莱阁附近，从机场到蓬莱阁有机场快线大巴，大概一小时左右的车程，坐大巴挺方便就没有打车。这时蓬莱的天气还是阳光明媚，虽然海风吹着有点凉，但还算怡人。</p>
<p>到蓬莱东站下车，这时离海边已经很近了，海风也感觉大了。令我有些意外的是人很少，按说这也算是中国“微”著名旅游景点，虽然是淡季，但是周末不该人这么少吧？事实是淡季的存在不是没有原因的，真的是会淡出鸟来。我们到了酒店门口，酒店大门紧闭，“不会倒闭了吧？”我手捂着玻璃往门内看，酒店前台都落灰了，上面有个牌子写着入住酒店请打电话。我掏手机准备打电话，听见晓在旁边叫我，我说：“等会，我打个电话问问。”晓说：“你打个屁电话，这门能开。”我抬头看见晓开着旁边的门，看傻逼似的看着我……</p>
<p>订酒店的时候特意挑了一个带大阳台的，可以支着太阳伞，坐着藤椅，面朝大海，享受海风拂面，醉日熏人。当然这是我们理想状态下，现实总是很残酷。硬件设备是都不缺，阳台、太阳伞、藤椅都有，探探脑也能看到大海。缺的是怡人的海风和醉人的暖阳，海风不是拂面是扇耳光，说寒风刺骨有些夸张，冻一身鸡皮疙瘩还是没问题的。现在才刚过中午，阳光已经不是那么明媚了，看太阳都不刺眼，原因是——起雾了……</p>
<p>我看了一眼天气预报：大雾预警！我擦嘞，我都看见雾了才来预警，还有个鸡毛用。蓬莱的雾起的真猛，不一会儿海边已经看不见了，海风越刮越大，雾却越刮越浓。晓一副愁眉苦脸的样子：“为什么我每次来山东海边都是这个样子？”上次她去青岛，看到的也是浓雾笼罩下的大海。我耸耸肩表示无能为力，我能怎么样，我也很绝望啊！</p>
<p>稍微收拾一下就下去找地吃饭了，每去一个地方，美食的吸引力总是大于美景。好不容易来一次海边城市，海鲜肯定不容错过的美食享受。在我们准备大吃一顿的时候，发现周围的餐馆大多数都大门紧闭。也难怪，路上行人都不多，餐馆哪还有什么生意，不如关门歇业，这淡季不是一般的淡。终于发现了一家还在营业而且感觉不错的餐厅，我们是唯一的顾客，包场吃了一顿很爽的海鲜餐。</p>
<p>吃完饭出来时能见度都不到500米了，到处雾气昭昭，海上一片灰白，根本看不到哪是海面哪是雾气。呼隆隆的海浪声越来越大，海上的浓雾都被刮到陆地上了。这种天气都不想去蓬莱阁了，但是已经订了票了，距离也不远，就大口吸着浓雾，往蓬莱阁方向溜达。在路上碰到一个卖冰糖葫芦的老太太，攀谈起来，听出我是山东口音就和我多聊了几句。原来过年初一到十五，蓬莱当地人去蓬莱阁门票只要10块钱，对外票价可是140呢！其实这也无可厚非，福泽桑梓嘛，一方水土造福一方百姓。想当年我和同学也是冒充智圣诸葛亮故里附近村里的孩子，才得以进入诸葛亮宗祠，一瞻风采。</p>
<p>蓬莱阁在一座临海的山上，山上有各种庙宇，佛道皆有，道教居多。有三清殿、吕祖殿、天后宫、龙王宫、弥陀寺、蓬莱阁，以蓬莱阁最为壮观，从蓬莱阁往下看就是波澜壮阔的大海，遗憾的是放眼望去白茫茫一片全是雾气，海面都看不到。所有庙宇都供奉着神像，无一例外都有卖香烛、祈福卡之类的摊位。见到游客就以祈福送子保平安来推销产品，一排香128，保你平安又大发，来年生个胖娃娃。灵不灵自己体会，反正对于此类推销我是一概谢绝。</p>
<p>蓬莱阁上还有好几座炮台，大炮筒锈迹斑斑，点引线的眼都锈死了，想当年是不是还轰沉过海盗船？千百年来一直镇守着蓬莱海岸线，让我想起了历史上那副绝对：烟锁池塘柳，炮镇海城楼。此刻我为我的博学而骄傲，看到这里的景象我脑海中不是：卧槽，雾真他妈大，炮真他妈粗。而是一副十分应景的对联。得意之际来到城墙边，想看看下面的大海，海风裹挟着浓雾扑了一脸，“卧槽，真他妈冷！”</p>
<p>两个人在蓬莱阁溜达了一圈，冻的鼻涕都出来了。说好的面朝大海，春暖花开呢？到处都是雾气笼罩，海风凛冽。果然是人间仙境，在人间只有神仙才能住的地方！回到酒店吹了半天空调也没缓过劲来，酒店还没有暖气，刚来知道没暖气的时候，我就开始方了，这哪是度假，简直是找罪受。下午为了避免冻感冒，去逛商场了。果然商场才是适合人待的地方，外面只适合神仙待。商城逛腻了，买了张电影票，看《金刚狼3》。旅游看电影也算是一段“传奇笑话”。</p>
<p>第二天的计划是极地海洋世界。每次旅行都会有各种不如意，相应也会有称心如意的。第二天的极地海洋世界之旅相比于第一天的蓬莱阁，那是相当凑合，那家伙，那场面，锣鼓……都过去了，我就不感慨了。也是第一天吃糠拉嗓子了，第二天给点稀粥跟喝蜜似的。其实极地海洋世界挺不错的，一句话点评：值回票价。</p>
<p>蓬莱阁和极地海洋世界的票是在大众点评上一起订的，本以为会在景点入口取票，没想到是家旅行社。旅行社的人开车把我们送到极地海洋世界，并送我们进去。我们是被送进去的，所以没有票据。其中有没有黑幕我也懒的琢磨了，如果中途遇到查票的，再打电话联系旅行社吧。重要的是先玩开心了再说。</p>
<p>极地海洋世界是室内场馆，有固定的游览路线，顺着路标走即可，不会错过景点，即便是错过了也可以再游览N遍。场馆里有两处表演：妹子们的表演和海洋动物的表演，只在指定时间内演出，在游览过程中不要错过表演时间即可。场馆内有各种海洋动物，大多数和游客隔着一层玻璃，可以近距离观看。</p>
<p>有一处是食人鱼，可以买肉喂它，不知道是不是真的食人鱼，小小的，每条鱼的嘴角上都有一抹血红，和电影上的差别很大。我用小木棍上的细线绑着肉去喂它，真的是扑上去就撕咬，扽细线的力气也挺大的。我猛的一拽木棍，差点把一条食人鱼拽出来，不知道拽出来会不会咬我。片刻间线上的肉就被撕扒光了，肉吃完了全都散开了。</p>
<p>还有一处是海狮，那是一头没见过世面的海狮，竟然会和游客互动。它会拱你放在玻璃上的手，移动手还会跟着你的手跑，会和你打招呼，会露出水面吐泡泡。多亏玻璃是全封闭的，不然我猜它会漫过玻璃往外吐水，吐游客一身。对于喜欢动物的晓来说，今天可真是玩爽了，每个展览处都停留一会儿和里面的动物打招呼，当然这些动物都是见过世面的，都没有理她的。那头海狮是个例外，和她玩的格外的好，不理周围几个小孩，唯独跟着她的手跑，弄的那几个小孩好郁闷。隔壁的海象就比较高冷，一看就是久经“游场”的动物，不论晓怎么和它打招呼，它都不理，自顾自的游着。</p>
<p>最令晓开心的是一只小猴子，晓最喜欢猴子。那只猴子比手掌大不了多少，可以在手掌中站立。那是一个让游客抱着小猴子照相的消费点，景点最不缺的就是这些消费点。那只小猴子真挺可爱的，一伸手就顺着手掌跑过来了，可以放在头上、肩上。晓乐的跟只大马猴似的，玩的是不亦乐乎。工作人员再三招呼小猴，才把小猴弄回去招待下一个游客。我们去拿照片，出来的时候看到一个小孩刚把小猴抱过去，晓向小猴一招手小猴噌一下顺着她的胳膊爬了过来，小孩一脸懵逼，晓急忙把小猴还给那小孩，不然一会儿小孩该哭了。不知道这个小孩是不是刚才海狮馆那的小孩，如果是的话他今天也是够郁闷的。</p>
<p>海底世界是个几百米的长廊，弧形玻璃罩在头顶上，鱼群都在上面游来游去。之前在电视上见过，感觉特别美，仿佛置身鱼群。今天一看，头晕目眩。因为是弧形的玻璃，透过玻璃看水里就像带了个大度数的近视镜，整的晕头转向的。出了海底世界就是表演看台，是妹子们的表演。</p>
<p>我们如愿以偿的看到了美人鱼表演和海底芭蕾表演，晓说是我如愿以偿，因为表演的都是精瘦的漂亮妹子们。妹子们在鱼群里翩翩起舞，时而上浮，时而下潜，优美的舞姿令我想起了捕鱼达人，为啥没有一个吐网的大炮？我说我想捕旁边的大海龟你信不？美人鱼表演讲述了一个动人的爱情故事，反正我是没看明白，王子潜下来的那一刻我想退票，转念一想无票可退。那哪是王子，就是个大肚囊子嘛，潜水服都裹不住了。海底芭蕾是妹子们穿着比基尼，在水中……我不写了，后面的自己想。</p>
<p>看完美人鱼和海底芭蕾的表演，下面比较精彩的就剩海洋动物的表演了，海狮和海豚们的表演。和香港海洋公园里的动物表演差不多，让海狮和人类打招呼、拍手、倒立、做数学题等等，让海豚跳高，顶球，转呼啦圈等等，还找了一个游客互动。对于每天都要进行几次表演的他们也都是轻车熟路，不知道它们是不是喜欢做这些表演，但喜欢吃是肯定的，表演过程中会有吃的，为了口吃谁都不容易，动物们又何尝不是。</p>
<p>从海洋公园里出来，吃了一顿海鲜火锅。有令人难忘的海肠子，吃的过程中在网上搜了一下海肠，然后就不想吃了。蓬莱的天气还是比较冷，但是今天没雾了。吃完饭去海边走了走，海风呼啸，海浪一浪叠一浪，待了一会就冻得不行了。往回走的时候发现鞋上沾了些黑色的东西，我说：“这啥？海屎吗？”也没在意，想回家刷一下就好了。后来发现是黑油，无论如何都刷不掉，废了两双鞋。</p>
<p>下午整理了一下去机场，晓说：“从来没有在旅行的时候这么想回去。”说完缩了缩脖子，裹紧羽绒服。上了飞机，离开了蓬莱，没有留恋。晚上在飞机上看下面的夜景，车灯穿梭，璀璨的灯光织就了城市轮廓，万家灯火的夜景太美了。这次旅行本来是出来放松的，直到这一刻整个人才有些轻松。</p>
<p>到北京首都机场时已经晚上九点多了，在机场巴士上，我俩都有些累了，回想这次旅行，失望大于喜悦。我忽然问道：“机场巴士报站吗？”晓说：“不报站你还不知道路吗？”因为我们下车的站点就在我们住的地方。我说：“你听不懂我这句话的重点吗？我是在说知不知道路的问题吗？我问巴士报不报站，你问我知不知道路……”“闭嘴！我眼睛不干！”这个梗终于接上了，这趟旅行也算圆满结束，耶！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近俗事缠身，鸭梨山大。工作和生活的状态有些脱轨，人压抑太久了，就需要放松一下，不然会出问题的，可能是身体、心理、或者是家庭。为了有一个好的生活状态，需要暂停一下，歇一歇，散散心。&lt;/p&gt;
    
    </summary>
    
      <category term="记事" scheme="http://markmiao.com/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
      <category term="生活" scheme="http://markmiao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="游记" scheme="http://markmiao.com/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>swift中delegate的使用注意</title>
    <link href="http://markmiao.com/2017/03/10/swift%E4%B8%ADdelegate%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
    <id>http://markmiao.com/2017/03/10/swift中delegate的使用注意/</id>
    <published>2017-03-10T08:21:42.000Z</published>
    <updated>2017-03-16T05:28:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>delegate是iOS开发中一种非常常用的设计模式，经常用作界面的反向传值。block可以做到同样的事情，曾有人言delegate是个臃肿的胖子，远不如block轻便，早该淘汰了。在ARC中，block中使用swift要用weak修饰，注意循环引用。delegate也需要使用weak指针，避免内存泄露。</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@property (nonatomic, <span class="keyword">weak</span>)id&lt;<span class="type">XDViewControllerDelegate</span>&gt; delegate;</div></pre></td></tr></table></figure>
<p>ARC环境下在oc中定义delegate使用weak修饰，在delegate对象释放掉后，delegate没有强指针引用也会被释放掉，避免了访问不存在delegate对象的delegate方法而崩溃。可以在<code>dealloc</code>方法中做防御性操作：置空delegate。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)dealloc &#123;</div><div class="line">    <span class="keyword">self</span>.delegate = <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在最近的swift项目中用到delegate，由于没有使用weak修饰，控件循环引用无法释放，导致内存泄露。</p>
<p>场景是这样的: 在控制器中添加了A控件，A控件中有个子控件B，B有个代理方法，A作为他的代理，并实现了代理方法。在完成功能后，使用<code>removeFromSuperview()</code>移除A控件时，发现A和B的反初始化方法<code>deinit</code>都没调用，说明这两个控件没被释放掉，内存泄露了。</p>
<p>(这里有个小坑，<code>deinit { }</code>方法里面如果没有执行代码是不会调用的，使用<code>deinit</code>检测该控件是否被移除，记得在<code>deinit { }</code>里面写一行执行代码，比如<code>print(&quot;deinit&quot;)</code>)</p>
<p>因为我在定义delegate的时候，是这样定义的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">workSelectViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addWorkBtnViewClick</span><span class="params">(workTitle: String, workColor: String)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkSelectView</span>: <span class="title">UIView</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> delegate:workSelectViewDelegate?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于delegate没有weak修饰，在移除A控件的时候，A中有B，B的代理又是A，A和B相互引用，导致谁也没能释放掉。</p>
<p>将delegate使用weak修饰即可，直接在<code>var delegate</code>前面加<code>weak</code>，编译会报错。这是因为在swift中遵守protocol的类型有很多，其中有些类型不支持weak修饰，比如struct。这里需要限制protocol的类型遵守。比如下面指定这个protocol只能由class遵守：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">workSelectViewDelegate</span>: <span class="title">class</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addWorkBtnViewClick</span><span class="params">(workTitle: String, workColor: String)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkSelectView</span>: <span class="title">UIView</span></span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate:workSelectViewDelegate?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还有一种方式是定义oc类型的protocol，因为oc类型的protocol只有class实现。使用关键词<code>@objc</code>修饰protocol：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">workSelectViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addWorkBtnViewClick</span><span class="params">(workTitle: String, workColor: String)</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkSelectView</span>: <span class="title">UIView</span></span>&#123;</div><div class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate:workSelectViewDelegate?</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比第二种方法，第一种方法明显才是swift该有的样子，第二种太依赖oc了。</p>
<p>说起依赖oc，想起来在delegate定义中的<code>optional</code>，在swift中定义delegate方法，如果没有可选修饰，遵守了代理而不实现代理方法，不是警告，而是直接报错。</p>
<p>要想使用可选实现的修饰<code>optional</code>，必须使用<code>@objc</code>修饰</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@objc</span> <span class="class"><span class="keyword">protocol</span> <span class="title">workSelectViewDelegate</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addWorkBtnViewClick</span><span class="params">(workTitle: String, workColor: String)</span></span></div><div class="line">    <span class="meta">@objc</span> <span class="keyword">optional</span> <span class="function"><span class="keyword">func</span> <span class="title">addTimeTextString</span><span class="params">()</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样还有一个问题，如果代理有结构体作为返回值的话，会不支持而报错。</p>
<p>需要另一种方法定义可选代理方法，协议拓展：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">workSelectViewDelegate</span>: <span class="title">class</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addWorkBtnViewClick</span><span class="params">(workTitle: String, workColor: String)</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTimeTextString</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">workSelectViewDelegate</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addTimeTextString</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;delegate是iOS开发中一种非常常用的设计模式，经常用作界面的反向传值。block可以做到同样的事情，曾有人言delegate是个臃肿的胖子，远不如block轻便，早该淘汰了。在ARC中，block中使用swift要用weak修饰，注意循环引用。delegate也需要使用weak指针，避免内存泄露。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="swift" scheme="http://markmiao.com/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>我对小程序的一些看法</title>
    <link href="http://markmiao.com/2017/01/10/%E6%88%91%E5%AF%B9%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9C%8B%E6%B3%95/"/>
    <id>http://markmiao.com/2017/01/10/我对小程序的一些看法/</id>
    <published>2017-01-10T07:05:25.000Z</published>
    <updated>2017-01-10T07:07:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>2016年9月22日，微信捣鼓了一年的应用号对部分开发者账号推送内测邀请，并暂时定名为“小程序”。2017年1月9日，“小程序”由暂定名落地为正式名，正式上线。这篇文章本来是在去年9月22日小程序推内测时写的，写了一半。今天补全，补成一篇对于小程序我的一些看法吧。也是我2017年第一篇博文，以非技术类文章开篇，可见我的懒惰。</p>
<a id="more"></a>
<p>9月22日，小程序推送内测，作为一种新兴的开发方向，在互联网圈子激起了不小的波澜。对程序猿来说，又有一个新的开发方向要涉猎了，好(F)开(U)心(C)吆(K)！好比这些火起来的语言技术：swift、React Native、Weex、php、Python、h5、js、Go……程序猿真是学无止境，怪不得都想要有几年开发经验的程序员，这些技术没有几年哪涉猎的过来啊！</p>
<p>吐槽归吐槽，作为一个好奇心极重的程序猿，对于新出的技术，还是想大致了解一下“小程序”到底是个什么玩意，万一以后做这方面的开发，这篇文字也算是探路石了。</p>
<p>2017年1月9日，小程序正式上线。“微信之父”张小龙挑的这个日子也颇有深意，十年前的1月9日乔布斯发布了第一款iPhone，彻底颠覆了移动互联网和手机市场。不知道微信是不是打算革命移动应用市场，将中国现在第一大应用推向AppStore的行列。“我是一个应用，但我不甘心只做一个应用。”估计这就是微信的心里话。</p>
<p>小程序定位是O2O，主攻线上与线下的连接。扫描二维码是小程序的主要入口。以二维码为O2O的连接媒介，以不用安装下载用完即走的轻便迅速，来弥补普通APP庞杂冗余的短板。在Apple和Google垄断移动应用市场的环境下，微信以小程序走线下启动这条路，想在移动应用市场分一杯羹。</p>
<p>小程序的线上入口比较深，需要搜索小程序全名（腾讯系的小程序支持模糊搜索），访问过小程序，才会在“发现”模块出现“小程序”一栏，里面是访问过的小程序记录，并非小程序市场。有人吐槽这是为了防止AppStore审核人员发现，对微信来说，以这种方式规避审核太弱智了吧。我想这并非为了规避审核，而是防止“微信推出小程序应用市场”的概念出现。微信在推出小程序之前估计已经和Apple和Google达成协议：我们不会抢占两位大哥应用市场的利润，我们只做个线下推广的小程序，就如同电线杆贴小广告，不会做应用市场，市场老大依旧是您二位，两位大哥高抬贵手给口吃的。</p>
<p>微信内不支持模糊搜索小程序，这也是对“小程序应用市场”概念的抑制。应用市场最重要的是能展示应用和快速搜索到应用。“小程序”模块既不能展示未使用过的应用，也不支持模糊搜索快速搜到应用，这便完全遏制了“小程序”模块是应用市场的概念。而且有模糊搜索就容易出现竞价排名，就有了应用市场的概念，微信明显意不在应用市场（或者说目前不敢有意此处），而是只想踏足线下入口这片领域。这估计也是微信对Apple和Google两位大哥的宣誓明志。</p>
<p>微信明言不推出小程序市场，如果推出小程序市场无疑是跟AppStore、谷歌应用市场宣战了，因为那完全是赤裸裸的利益争夺，两位大哥斩杀小弟估计也决不会手软。其实微信也知道，即使我不推出小程序市场，也会有一大群的跟屁虫替我推出。果不其然，1月9日当天就出现了一大批小程序市场，对此微信做了第二次宣誓明志，无法识别图片二维码打开小程序，只能扫码进入。如此一来，小程序应用市场的存在意义就如同小程序名称列表一样了。</p>
<p>除了不能模糊搜索，微信小程序还不能分享到朋友圈，只能转发给好友，这便遏制了爆炸式传播的路径。一键朋友圈分享所产生的推广力度，岂是一个好友一个好友的转发所能比拟的？微信重申主打扫码启动小程序，无需安装，用完即走，我们不提供市场和推广，我们只是小程序的审核者和搬运工。既想抢大哥的蛋糕吃，又要防止被大哥揍，微信不得不煞费苦心，剑走偏锋式的开辟一条新径。</p>
<p>对于小程序的未来，有人看好，有人不看好，有人看热闹，有人在观望。毫无疑问的是，小程序是2017年互联网界的第一个大新闻。</p>
<p>小程序开发成本低，又基于庞大的微信用户量。能火起来是肯定的，但能火到什么程度是大家最关心的。有人说能火到把原生应用都挤死，iOS和Android工程师都回家养猪吧。也有人说Apple和Google不会允许小程序太火，火到这种程度之前就会把微信干掉，依托微信的公司都等死吧。</p>
<p>这两种都太极端了，悬在自己头上的达摩克利斯之剑什么时候斩下，Apple、Google、微信他们自己比谁都清楚。他们不清楚的是看不见的那股异军突起，《腾讯传》里KK对马化腾说：“即将灭掉你的那个人，从来不会出现在一份既定的名单中。”就好比当年强盛的诺基亚和symbian，不是被竞争对手摩托罗拉打败，而是死在iPhone的Android的崛起。统一三国的不是魏蜀吴，而是司马氏。</p>
<p>到底要不要开发小程序？众说纷纭。有人说互联网世界波谲云诡、变幻莫测，好不容易出现了一列必火的快车，再不赶紧上车，等老司机开车了，就赶不上第一批红利了。就是那句话：等你想吃的时候，屎都凉了。也有人说小程序能承载的东西太少了，又依托于微信，自己对产品的掌控力弱化，何必降低自己原生应用的活跃量给微信加流量呢？这是另一句话：为什么要拿自己的热脸去捂暖别人的冷屁股呢？</p>
<p>各有各的说法，各有各的道理。那我他妈的到底要不要推出小程序呢？</p>
<p>其实根据小程序的O2O定位，可以大致研究研究自己公司到底适不适合推出小程序。我认为，小程序适用于固定地点、用户非日常刚需、偶尔使用的低频应用。比如：进店线上点餐、某个景点介绍和路线、某个商店的线上商城、某个学校的官宣。通俗解释就是：我不经常用，但用起来又比较着急，别让我下载APP注册账号，让我一扫立刻用到。就好比擦腚纸，要用的时候从旁边厕纸盒一抽即可，要是先让我解厕纸盒的密码锁，我不得疯了啊！用完之后随水冲走。用时一抽，用完一冲，也用带着占用口袋空间，太方便了。（这个比喻没有贬低小程序的意思，我实在是想不到比这个更恰当的比喻了）</p>
<p>如果是高频率使用的应用，还是原生应用适合。比如：日历。我要看个日历，直接右划看widget即可，连解锁都不用。让我解锁，打开微信，点到小程序，看日历，那也得疯了。还有如果只是偶尔定一次餐，点小程序订餐即可，不用专门下个APP。但如果我是天天加班订餐，我还是习惯用原生APP。</p>
<p>作为用户角度，哪个方便我用哪个，用户体验是能留住我的唯一手段，谁能让我爽，我就喜欢谁。有人在微博上说：我已经卸载了美团外卖和猫眼APP了。小程序里的美团外面和猫眼APP完全可以满足用户订餐和买电影票的需求，用户毫不留恋原生APP，删除卸载。对于美团和猫眼来说这种消息不知是好是坏，自己原生应用的用户活跃量硬生生被微信小程序剥夺了一部分，用自己的用户贡献了微信的流量。比较来说滴滴就比较聪明，滴滴出行只能打快车，用户要是想打顺风车、小巴还是得去APP。</p>
<p>作为程序员，公司要我做哪个就得做哪个，管你小程序是一波红利还是一撮泡沫。“小猿呀，明天小程序要上线，今天加加班，搞定它，相信你吆。” “哦……” 同事们都下班了，我翻开微信公众平台的小程序，开始看第一篇“简易教程”，开始踩坑之旅。作为程序员，小程序还是需要看看的，毕竟是今年的第一波技术浪潮，虽然后面一浪接着一浪，别第一浪就拍死了，死在第二浪会好看点。</p>
<p>本文纯属是我对微信小程序的一些看法，如有偏差，欢迎拍砖吐槽。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2016年9月22日，微信捣鼓了一年的应用号对部分开发者账号推送内测邀请，并暂时定名为“小程序”。2017年1月9日，“小程序”由暂定名落地为正式名，正式上线。这篇文章本来是在去年9月22日小程序推内测时写的，写了一半。今天补全，补成一篇对于小程序我的一些看法吧。也是我2017年第一篇博文，以非技术类文章开篇，可见我的懒惰。&lt;/p&gt;
    
    </summary>
    
      <category term="程序人生" scheme="http://markmiao.com/categories/%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F/"/>
    
    
      <category term="小程序" scheme="http://markmiao.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>2016我的年终总结</title>
    <link href="http://markmiao.com/2016/12/31/2016%E6%88%91%E7%9A%84%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>http://markmiao.com/2016/12/31/2016我的年终总结/</id>
    <published>2016-12-31T04:19:49.000Z</published>
    <updated>2016-12-31T04:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>不知不觉2016年结束了，离梦想又远了一步。在微博上看到一句话：“十年前并不是九几年而是零六年！”那一瞬间感觉自己真的老了。90后已不再是年轻的标签，奔三也奔的那么马不停蹄。三十而立，到现在依旧晃晃悠悠，到三十那天我真能立住吗？怎么立？金鸡独立？又或者是静静地坐着敲代码，平凡的度过本以为不平凡的那一天。</p>
<a id="more"></a>
<p>来北京四年了，每年都有不一样的事，每年都遇到不一样的人。谈不到精彩，相对于平淡总有一些波澜，可以厚颜无耻的说一句：我还年轻没到平淡的年纪。回头看看这一年，总觉得这是我最忙碌、变化最大的一年。具体想想有哪些变化，貌似也没什么。是虚度了时光，还是矫情了岁月？</p>
<h2 id="工作和技术"><a href="#工作和技术" class="headerlink" title="工作和技术"></a>工作和技术</h2><p>工作方面没有多大改变，依旧敲代码。2015年国庆假期结束入职现在这家公司，app开发了一堆，拿的出手的却没有。工作相对于在以前公司的时候清闲多了，几乎没加过班。一方面是工作经验多了的原因，对于工作中遇到的问题，也不像初入行时那么手忙脚乱了。另一方面是项目周期长，时间充裕。记得我刚入行时的第一家公司，项目周期短，需求变化大，迭代迅速，差不多一两周出一版。就是赶着AppStore的审核时间，等待审核期间新需求就出来了，审核通过上架了，新版本也开发的差不多了，继续提交。快速增长期的创业公司就是这个节奏，那段时间经常通宵加班，睡在公司。我的上一辆自行车停在地铁口，通宵加班两天，第三天回来的时候不见了。那段时间真是加班加的快吐了，简直是张口就要骂娘的状态，那时最大的愿望就是下班时能看到夕阳。但那段时间也是我技术提升最快的时候，现在闲下来了，反而有些怀念当时受虐的日子，人真是有些贱骨头。</p>
<p>技术方面没有大的提升，作为本职工作的iOS开发，钻研的还不够，好多深层次的东西都不懂。有时候看到和我差不多时间入行，甚至比我入行还晚的人写的技术博客，令我惭愧不已。我不但写不出来，甚至都看不懂，我都不好意思说比别人早入行。前段时间在微博上看到一段话，是面试官对面试者说的话：你不是有N年经验，你是一年经验用了N年。当时感觉被狠狠抽了一个大嘴巴子，这他妈不就是说的我吗？安逸的工作环境使人颓废，多少次励志，多少次放弃，间歇性踌躇满志，持续性混吃等死。感觉膝盖狠狠地中了一箭，长跪不起。客观来说，技术还是有些提升，虽然提升幅度不值一哂。swift、Mac、git、Python、h5、JavaScript……这些多少有些涉猎，嗯……好吧，目前还停留在涉猎层面。一直十分佩服那些能按部就班沉下心了学习一门技术的人，能让自己不断学习的人，就是所谓成功的一类人吧，即使目前不成功，成功的那天总不会很远。</p>
<h2 id="生活和爱情"><a href="#生活和爱情" class="headerlink" title="生活和爱情"></a>生活和爱情</h2><p>生活方面算是变化最大的了，2016年春节过后，和女朋友搬到现在居住的地方，脱离了以前合租的窘境。6月份头脑一热养了一只金毛，现在他已经有九个月了。硕大的体型、对人忘我般的热情，每当遛他的时候，总担心他扑向陌生人。虽然他性情温顺，但毕竟体型太大，对人又热情，喜欢闹腾。除了了解金毛、喜欢狗狗的人能和他玩玩，其他人即便喜欢也不敢靠近。养过狗狗才知道，养狗真的挺麻烦的，特别是养一只大狗。烦透了的时候忍不住揍一顿，揍完又感觉他好可怜。我对晓说：他就像是个意外怀孕的孩子，讨人厌又惹人怜。晓说：也是一个家庭成员，好好养着吧。有时上班不在家，透过摄像头看到他静静地坐在窗前，看窗外车来车往，感觉他好想出去玩，像个孩子……</p>
<p>晓是和我在2016年元旦之前去我家的，那也是她第一次去我家，第一次见我父母。我见她父母是在3月份，和她一家人去了一趟西安。晓美其名曰旅行见父母，其实就想出去浪一下。最终圆满，我父母对晓非常喜欢，晓的父母对我也十分满意。7月份，我父母来北京，双方父母进行了亲切友好的会谈，对我们的终身大事交换意见，并达成一致协议。10月份，在晓的父母的陪同下，晓和我在我家举行了订婚仪式，亲朋好友献上真诚祝福。在北京，我从一个通宵加班两天、自行车丢了都没人问的单身狗，变成了一个有小窝、有爱人、有孩子(目前是宠物)的程序猿。这一波虐狗得负刑事责任了……</p>
<h2 id="读书和旅行"><a href="#读书和旅行" class="headerlink" title="读书和旅行"></a>读书和旅行</h2><p>都说读万卷书，行万里路。这两者缺一不可。一直以来，我都是喜欢看旧书，不愿去翻开一本新书。有的书我都读过十几二十几遍了，想读书的时候还会去读那些，当然都不是什么技术型书籍。读书确实是提升自己最有效的方式，读书破万卷，下笔如有神，古人诚不欺我。当然我离这个境界还差十万八千里，但我希望我能向着这个目标不断前进。年底看了一本新书，吴晓波写的《腾讯传》，讲述了腾讯的发展史，记录了一个互联网巨型企业一路走来的跌宕坎坷，我看到了任何成功都容不得半点侥幸，腾讯的崛起也绝非偶然。</p>
<p>旅行是费钱的，但长久看来收益大于付出。2015年有过一次旅行，和晓去四川成都，去了宽窄巷子、大熊猫培育基地、九寨沟，最终由于我发高烧仓促返京。2016年有过两次远途旅行，第一次是和晓的家人去西安，第二次是和晓去香港。每次旅行或多或少都会有遗憾，或许根本不可能存在完美的旅行，有不完美才会有下一次的追求完美。明年还会去旅行，目的地还没想好，我会为了完美的旅行做更多的准备，虽然肯定还会有不完美。</p>
<p>前几天看到一段话：如果不读书，行万里路也不过是个邮差。仔细想想蛮有道理的，庐山瀑布有亿万人望过，也只有李白写出了“飞流直下三千尺，疑是银河落九天”的绝句。有多少文化底蕴才能读出美景的多少韵味，看到草原，牛想到的是饱餐一顿，诗人想的是天苍苍，野茫茫，风吹草低见牛羊。打住！这段话纯属吹牛逼，我也不相信一个程序猿到一个地方首先想到的是美景而不是美食。我是一个爱吃的俗人，不是爱景诗人，但我知道多读书能多挣钱，多挣钱能多旅行，多旅行才能吃到更好的美食。</p>
<h2 id="大环境和小愿望"><a href="#大环境和小愿望" class="headerlink" title="大环境和小愿望"></a>大环境和小愿望</h2><p>2016年，互联网行业历经寒冬，从波澜翻滚变成了暗潮涌动。记得前几年，互联网创业随处可见，创业门槛低到有台电脑就行，到处都能听到风投融资的故事。雷军说：站在风口上，猪都会飞。今年风小了，好多猪摔死了。光我认识的同学朋友圈子里，就有五六家公司关门大吉，我这个小圈子都如此，可见这个大行业的动荡。互联网行业从疯狂渐渐趋向沉稳，从互联网行业招聘就可以看出来，程序员找工作难，iOS更是难于上青天。有AppStore上架作品已不再是加分项，而是基本技能。网上有人说：招Android和iOS两个职位，Android一天收到十几份简历，iOS能收到几百份简历！多少iOS开发者抱着简历海投，只求一份工作。有人抱怨iOS不行了，转投H5。相信过不了多久你又会抱怨H5不行了，那时候你转投什么呢？在一篇博文里看到这么一段话：不是这个行业不行，而是你不行。事实如此，无数iOS开发者找不到工作的同时，也有无数企业招不到合适的iOS开发。需求和供应有时就是这么尴尬的不对等，作为程序员，职责就是实现各种需求，不是等着适合自己的需求再去实现。好了，牛逼吹完了，我该去给老板的iPhone7 Plus贴膜了。</p>
<p>2016年，技术爆发的一年。层出不穷的新技术令人眼花缭乱，swift出到3.0，每一版都像是一门新的语言；JavaScript和h5也日益繁荣，就像几年前的iOS；Python、PHP老牌语言和新秀Go语言也火的不要不要的了；iOS开发的热更新也花样繁多，JSPatch，今年年底滴滴的DynamicCocoa；跨平台的方式也越来越多，Facebook的React Native，阿里的Weex；还有年底微信横空出世的小程序……</p>
<p>我是一头赶上风口飓风的猪，压迫着骨子里的惰性努力瘦身，希望在风停的时候不至于摔死。2016年年底做的最正确的事就是购买域名搭建了自己的博客，这件本应早几年就做的事，一直拖到了现在。有了自己的博客和订阅号，还有github的小绿格子，在这些面子工程的倒逼下或许不会那么容易就轻言放弃。</p>
<p>2016再见，2017你好。新年愿望是：希望2017年的年终总结里没有懊悔。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知不觉2016年结束了，离梦想又远了一步。在微博上看到一句话：“十年前并不是九几年而是零六年！”那一瞬间感觉自己真的老了。90后已不再是年轻的标签，奔三也奔的那么马不停蹄。三十而立，到现在依旧晃晃悠悠，到三十那天我真能立住吗？怎么立？金鸡独立？又或者是静静地坐着敲代码，平凡的度过本以为不平凡的那一天。&lt;/p&gt;
    
    </summary>
    
      <category term="记事" scheme="http://markmiao.com/categories/%E8%AE%B0%E4%BA%8B/"/>
    
    
      <category term="总结" scheme="http://markmiao.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="生活" scheme="http://markmiao.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>私有API的使用</title>
    <link href="http://markmiao.com/2016/12/28/%E7%A7%81%E6%9C%89API%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://markmiao.com/2016/12/28/私有API的使用/</id>
    <published>2016-12-28T09:42:20.000Z</published>
    <updated>2016-12-28T09:45:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>私有API是指苹果未公开的一些方法，通常情况下这些方法不允许开发者使用，通常情况是指上架AppStore。私有API可以实现一些开放API不能实现的效果，功能强大，效果非凡。苹果不允许使用，是因为有些私有API会侵犯用户隐私，但使用私有API也并非一定会侵犯用户隐私，这要看开发者怎么用了。</p>
<a id="more"></a>
<p>企业级账号发布供内部人使用的APP，可以使用私有API。发布到其他APP平台供越狱手机下载的APP，也有可能使用了私有API。这两者没有苹果审核把关，私有API可以随便使用。<strong>苹果明令禁止使用私有API的APP上架AppStore！</strong>但凡事无绝对，AppStore上也不乏使用私有API的应用，使用办法有很多，比如热更新。不被苹果发现就行，发现了轻者下架，重者封号。</p>
<p>我想看看私有API到底能干些啥，写了一个测试私有API的小项目，涉及到的知识点大多数来源于网络，在此感谢大神们的知识共享。项目很小，知识很浅，欢迎拍砖吐槽。</p>
<p>项目代码: <a href="https://github.com/mxdios/privateApiApps" target="_blank" rel="external">privateApiApps</a></p>
<p>开发环境: Xcode 8.2.1，iPhone 6，iOS 10.2</p>
<p>项目截图:</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="http://oalg33nuc.bkt.clouddn.com/WechatIMG241.jpeg" alt="获取iPhone上的所有APP"></th>
<th style="text-align:center"><img src="http://oalg33nuc.bkt.clouddn.com/WechatIMG242.jpeg" alt="APP相关信息"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
<p>参考资料:</p>
<ol>
<li><a href="https://github.com/nst/iOS-Runtime-Headers" target="_blank" rel="external">iOS-Runtime-Headers</a></li>
<li><a href="http://octree.me/2016/08/01/get-installed-apps/" target="_blank" rel="external">获取iOS设备上安装的应用列表</a></li>
</ol>
<h2 id="获取iPhone中安装的APP列表"><a href="#获取iPhone中安装的APP列表" class="headerlink" title="获取iPhone中安装的APP列表"></a>获取iPhone中安装的APP列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class LSAppClass = objc_getClass(&quot;LSApplicationWorkspace&quot;);</div><div class="line">NSObject *workspace = [LSAppClass performSelector:@selector(defaultWorkspace)];</div><div class="line">NSArray *appsArray = [workspace performSelector:@selector(allApplications)];</div></pre></td></tr></table></figure>
<p>这里面使用了runtime的方法<code>- (id)performSelector:(SEL)aSelector;</code>，需要引入<code>&lt;objc/runtime.h&gt;</code>。该方法的作用是给接收者传递进去一个方法，返回值就是这个方法执行后的返回值。</p>
<p>由于调用的是私有API，传入的方法相当于一个字符串，编译器不会检测该方法是否正确，相反会一直报警告。例如上面传递的方法<code>defaultWorkspace</code>，这是个私有API的方法。通常还有另一种调用<code>performSelector</code>方法的写法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSObject *workspace = [LSAppClass performSelector:NSSelectorFromString(@&quot;defaultWorkspace&quot;)];</div></pre></td></tr></table></figure>
<p>如果传递进去的私有API方法名写错了，程序就会找不到该方法而崩溃。所以通常会通过下面方法检测接收者或接收者的父类是否实现了传递进去的方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (BOOL)respondsToSelector:(SEL)aSelector;</div></pre></td></tr></table></figure>
<p>使用方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ([LSAppClass respondsToSelector:@selector(defaultWorkspace)]) &#123;</div><div class="line">   	NSObject *workspace = [LSAppClass performSelector:@selector(defaultWorkspace)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真实情况中，该方法并非必要。传入的私有API方法名都是固定的，程序崩溃了说明方法名写错了，改成正确的即可。使用该方法不会崩溃，反而不易发现错误。</p>
<h2 id="获取每个APP的相关信息"><a href="#获取每个APP的相关信息" class="headerlink" title="获取每个APP的相关信息"></a>获取每个APP的相关信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[appsArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) &#123;   </div><div class="line">	AppsObject *appsObj = [[AppsObject alloc] init];</div><div class="line">	appsObj.appName = [obj performSelector:@selector(localizedName)];</div><div class="line">	appsObj.version = [obj performSelector:@selector(shortVersionString)];</div><div class="line">	appsObj.bundleId = [obj performSelector:@selector(applicationIdentifier)];</div><div class="line">	appsObj.appFullName = [obj performSelector:@selector(itemName)];</div><div class="line">	appsObj.appType = [obj performSelector:@selector(applicationType)];</div><div class="line">	appsObj.appVendorName = [obj performSelector:@selector(vendorName)];</div><div class="line">	appsObj.appRating = [obj performSelector:@selector(ratingLabel)];</div><div class="line">	[_appsObjArray addObject:appsObj];</div><div class="line">&#125;]</div></pre></td></tr></table></figure>
<p>遍历获取的APP列表，通过私有API获取每个app的各种信息：</p>
<table>
<thead>
<tr>
<th style="text-align:left">私有API方法名</th>
<th style="text-align:left">用途</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">localizedName</td>
<td style="text-align:left">app名字</td>
</tr>
<tr>
<td style="text-align:left">shortVersionString</td>
<td style="text-align:left">版本号</td>
</tr>
<tr>
<td style="text-align:left">applicationIdentifier</td>
<td style="text-align:left">Bundle Identifier</td>
</tr>
<tr>
<td style="text-align:left">itemName</td>
<td style="text-align:left">app在AppStore显示的名字</td>
</tr>
<tr>
<td style="text-align:left">applicationType</td>
<td style="text-align:left">app类型,分为:System和User</td>
</tr>
<tr>
<td style="text-align:left">vendorName</td>
<td style="text-align:left">app供应商</td>
</tr>
<tr>
<td style="text-align:left">ratingLabel</td>
<td style="text-align:left">app评级</td>
</tr>
</tbody>
</table>
<h2 id="获取APP图标"><a href="#获取APP图标" class="headerlink" title="获取APP图标"></a>获取APP图标</h2><p>上述中并没有获取APP图标的方法，获取app图标比较麻烦。</p>
<h3 id="获取APP图标路径"><a href="#获取APP图标路径" class="headerlink" title="获取APP图标路径"></a>获取APP图标路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NSDictionary *dict = [object performSelector:@selector(boundIconsDictionary)];</div><div class="line">NSString *appIconPath = [NSString stringWithFormat:@&quot;%@/%@.png&quot;,[[object performSelector:@selector(resourcesDirectoryURL)] path],[[[dict objectForKey:@&quot;CFBundlePrimaryIcon&quot;] objectForKey:@&quot;CFBundleIconFiles&quot;] lastObject]];</div></pre></td></tr></table></figure>
<p>iOS10.2亲测，该方法只能获取模拟器上的APP图标，真机无效。</p>
<h3 id="获取图标data数据"><a href="#获取图标data数据" class="headerlink" title="获取图标data数据"></a>获取图标data数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">appsObj.iconData = [obj performSelector:@selector(iconDataForVariant:) withObject:@(2)];</div></pre></td></tr></table></figure>
<p>该data数据并不能直接转为UIImage，需要对data数据进行截取转换，方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">+ (UIImage *)getAppIcon:(NSData *)iconData &#123;</div><div class="line">    NSInteger lenth = iconData.length;</div><div class="line">    NSInteger width = 87;</div><div class="line">    NSInteger height = 87;</div><div class="line">    uint32_t *pixels = (uint32_t *)malloc(width * height * sizeof(uint32_t));</div><div class="line">    [iconData getBytes:pixels range:NSMakeRange(32, lenth - 32)];</div><div class="line">    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGContextRef ctx = CGBitmapContextCreate(pixels, width, height, 8, (width + 1) * sizeof(uint32_t), colorSpace, kCGBitmapByteOrder32Little | kCGImageAlphaPremultipliedFirst);</div><div class="line">    CGImageRef cgImage = CGBitmapContextCreateImage(ctx);</div><div class="line">    CGContextRelease(ctx);</div><div class="line">    CGColorSpaceRelease(colorSpace);</div><div class="line">    UIImage *icon = [UIImage imageWithCGImage: cgImage];</div><div class="line">    CGImageRelease(cgImage);</div><div class="line">    return icon;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="打开APP"><a href="#打开APP" class="headerlink" title="打开APP"></a>打开APP</h2><p>在iOS 9以后要想打开其他app需要添加URL Scheme，设置白名单，否则将无法打开，白名单的上限为50个。上文中我们可以获取APP的<code>Bundle Id</code>，依靠<code>Bundle Id</code>使用私有API可以打开其他APP，并没有数量限制。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Class LSAppClass = NSClassFromString(@&quot;LSApplicationWorkspace&quot;);</div><div class="line">id workSpace = [(id)LSAppClass performSelector:@selector(defaultWorkspace)];</div><div class="line">[workSpace performSelector:@selector(openApplicationWithBundleID:) withObject:self.appsObj.bundleId];</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;私有API是指苹果未公开的一些方法，通常情况下这些方法不允许开发者使用，通常情况是指上架AppStore。私有API可以实现一些开放API不能实现的效果，功能强大，效果非凡。苹果不允许使用，是因为有些私有API会侵犯用户隐私，但使用私有API也并非一定会侵犯用户隐私，这要看开发者怎么用了。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="iOS" scheme="http://markmiao.com/tags/iOS/"/>
    
      <category term="私有API" scheme="http://markmiao.com/tags/%E7%A7%81%E6%9C%89API/"/>
    
  </entry>
  
  <entry>
    <title>Quartz 2D（三）样式、阴影、渐变</title>
    <link href="http://markmiao.com/2016/12/21/Quartz2D3/"/>
    <id>http://markmiao.com/2016/12/21/Quartz2D3/</id>
    <published>2016-12-21T07:03:09.000Z</published>
    <updated>2016-12-21T07:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h2><p>Pattern可翻译为样式、模型。类似于iOS中自定义的view，可以重复多次把自定义的view添加到控制器的view上。样式(Pattern)是绘制操作的一个序列，可以重复的绘制到一个图形上下文上。</p>
<a id="more"></a>
<h3 id="样式单元格"><a href="#样式单元格" class="headerlink" title="样式单元格"></a>样式单元格</h3><p>样式单元格是样式的基本组件，在创建的时候就要定义单元格的边界，并在这个范围内进行绘制。在图形上下文上绘制单元格时，可以随意指定两个单元格之间上下左右间距，也可以指定负数，单元格重合而已。像极了添加view控件。</p>
<h3 id="着色样式和模板样式"><a href="#着色样式和模板样式" class="headerlink" title="着色样式和模板样式"></a>着色样式和模板样式</h3><p>着色样式是有固定颜色的，在创建样式单元格的时候就指定其颜色了，跟绘制流程没有关系。</p>
<p>模板样式即为非着色样式，在创建样式单元格的时候只指定了形状，并没有指定颜色，在绘制过程中指定颜色。</p>
<p>在Quartz 2D中可以使用这两种样式实现样式绘图，将创建好的样式绘制到page上的过程称为平铺，有三种平铺选项：1、没有失真，2、最小的失真的恒定间距，3、恒定间距。</p>
<h3 id="绘制着色样式"><a href="#绘制着色样式" class="headerlink" title="绘制着色样式"></a>绘制着色样式</h3><p>绘制着色样式一般需要下面几步：1、设置样式单元格的回调函数，2、设置着色模式单元格，3、绘制操作。下面是绘制着色样式的示例代码和运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    [super drawRect:rect];</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    clorePatternPaingting(context, CGRectMake(0, 0, 300, 500));</div><div class="line">&#125;</div><div class="line">void clorePatternPaingting(CGContextRef context, CGRect rect) &#123;</div><div class="line">    CGColorSpaceRef patternSpace = CGColorSpaceCreatePattern(NULL);</div><div class="line">    CGContextSetFillColorSpace(context, patternSpace);</div><div class="line">    CGColorSpaceRelease(patternSpace);</div><div class="line">    static const CGPatternCallbacks call = &#123;0, &amp;drawPattern, NULL&#125;;</div><div class="line">    CGPatternRef pattern = CGPatternCreate(NULL, CGRectMake(0, 0, 30, 30), CGAffineTransformIdentity, 30, 30, kCGPatternTilingConstantSpacing, true, &amp;call);</div><div class="line">    CGFloat alpha = 1.0;</div><div class="line">    CGContextSetFillPattern(context, pattern, &amp;alpha);</div><div class="line">    CGPatternRelease(pattern);</div><div class="line">    CGContextFillRect(context, rect);</div><div class="line">&#125;</div><div class="line">void drawPattern(void *info, CGContextRef context) &#123;</div><div class="line">    CGContextSetRGBFillColor(context, 1, 0, 0, 1);</div><div class="line">    CGContextFillRect(context, CGRectMake(0, 0, 10, 10));</div><div class="line">    CGContextSetRGBFillColor(context, 0, 1, 0, 1);</div><div class="line">    CGContextFillRect(context, CGRectMake(10, 0, 10, 10));</div><div class="line">    CGContextSetRGBFillColor(context, 0, 0, 1, 1);</div><div class="line">    CGContextFillRect(context, CGRectMake(0, 10, 10, 10));</div><div class="line">    CGContextSetRGBFillColor(context, 0.5, 0, 0.5, 1);</div><div class="line">    CGContextFillRect(context, CGRectMake(10, 10, 10, 10));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161220-0.png" alt="绘制着色模式的运行结果"></p>
<p><strong>代码解释：</strong></p>
<p>上述代码块中第三个函数<code>drawPattern</code>的作用就是第1步：设置样式单元格的回调函数。参数<code>info</code>:是指向模式相关数据的指针，可以传<code>NULL</code>。<code>context</code>:是图形上下文。在该函数中指定了每个颜色块的大小和填充色。因为是着色样式，所以指定填充色。</p>
<p>第二个函数，也是在<code>drawRect</code>方法中调用的函数<code>clorePatternPaingting</code>，执行了第2步:设置着色模式单元格和第3步:绘制操作。下面对每块代码进行解释：</p>
<p><strong>清空基本颜色空间：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CGColorSpaceRef patternSpace = CGColorSpaceCreatePattern(NULL);</div><div class="line">CGContextSetFillColorSpace(context, patternSpace);</div><div class="line">CGColorSpaceRelease(patternSpace);</div></pre></td></tr></table></figure>
<p>因为我们要使用着色样式里面的颜色，所以清空基本颜色空间，以确保着色样式上的颜色能显示。可以试一下把这段代码注释的结果，绘制着色样式的空间为黑色，因为基本颜色空间没清空也没着色，所以呈黑色。</p>
<p><strong>设置着色模式单元格：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static const CGPatternCallbacks call = &#123;0, &amp;drawPattern, NULL&#125;;</div><div class="line">CGPatternRef pattern = CGPatternCreate(NULL, CGRectMake(0, 0, 30, 30), CGAffineTransformIdentity, 30, 30, kCGPatternTilingConstantSpacing, true, &amp;call);</div></pre></td></tr></table></figure>
<p>模式单元格的信息保存在<code>CGPatternRef</code>类型的<code>CGPattern</code>对象中，使用<code>CGPatternCreate</code>创建该对象。需要传入的参数依次解释为：</p>
<ol>
<li>info：是一个指针，指向我们要传递给绘制回调函数的数据。这里传的是<code>NULL</code></li>
<li>bound：指定模式单元格的大小</li>
<li>matrix：指定模式矩阵，它将模式坐标系统映射到图形上下文的默认坐标系统。如果希望两个坐标系统是一样的，则可以使用单位矩阵。</li>
<li>xStep, yStep：指定单元格之间的水平和竖直间距。</li>
<li>tiling：平铺模式，可以是kCGPatternTilingNoDistortion、kCGPatternTilingConstantSpacingMinimalDistortion、kCGPatternTilingConstantSpacing</li>
<li>isColored：指定模式单元格是着色模式(true)还是模板模式(false)</li>
<li>callbacks：是一个指向CGPatternCallbacks结构体的指针。格式如下：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">struct CGPatternCallbacks &#123;</div><div class="line">    unsigned int version;</div><div class="line">    CGPatternDrawPatternCallback __nullable drawPattern;</div><div class="line">    CGPatternReleaseInfoCallback __nullable releaseInfo;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>version</code>一般设置为<code>0</code>，<code>drawPattern</code>是指向设置样式单元格的回调函数，<code>releaseInfo</code>是指向回调函数，释放CGPattern对象时调用，以释放存储在我们传递给绘制回调的info参数中的数据。如果在这个参数中没有传递任何数据传<code>NULL</code>。</p>
<p>所以<code>CGPatternCallbacks</code>结构体定义为<code>static const CGPatternCallbacks call = {0, &amp;drawPattern, NULL};</code></p>
<p><strong>绘制着色样式</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CGFloat alpha = 1.0;</div><div class="line">CGContextSetFillPattern(context, pattern, &amp;alpha);</div><div class="line">CGPatternRelease(pattern);</div><div class="line">CGContextFillRect(context, rect);</div></pre></td></tr></table></figure>
<p>调用函数<code>CGContextSetFillPattern</code>使用着色样式进行填充操作，或者调用函数<code>CGContextSetStrokePattern</code>进行描边操作。需要指定着色样式在填充或描边过程的透明度。</p>
<p>样式使用完毕后需要释放，调用函数：<code>CGPatternRelease</code></p>
<p>将定义的着色样式使用函数<code>CGContextFillRect</code>填充到指定<code>rect</code>的矩形中。</p>
<p>这一系列操作都放到函数<code>clorePatternPaingting</code>内，在<code>drawRect</code>方法中直接调用该函数即可完成着色样式的定义和绘制。</p>
<h3 id="绘制模板样式"><a href="#绘制模板样式" class="headerlink" title="绘制模板样式"></a>绘制模板样式</h3><p>绘制模板样式的步骤和绘制着色样式的一样：1、设置样式单元格的回调函数，2、设置模板模式单元格，3、绘制操作。下面是绘制模板样式的示例代码和运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    [super drawRect:rect];</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    stencilPatternPaingting(context, CGRectMake(0, 0, 300, 500));</div><div class="line">&#125;</div><div class="line">void stencilPatternPaingting(CGContextRef context, CGRect rect) &#123;</div><div class="line">    CGColorSpaceRef baseSpace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGColorSpaceRef patternSpace = CGColorSpaceCreatePattern(baseSpace);</div><div class="line">    CGContextSetFillColorSpace(context, patternSpace);</div><div class="line">    CGColorSpaceRelease(patternSpace);</div><div class="line">    CGColorSpaceRelease(baseSpace);</div><div class="line">    static const CGPatternCallbacks cell = &#123;0, &amp;drawStencilPattern, NULL&#125;;</div><div class="line">    CGPatternRef pattern = CGPatternCreate(NULL, CGRectMake(0, 0, 30, 30), CGAffineTransformIdentity, 40, 40, kCGPatternTilingConstantSpacing, false, &amp;cell);</div><div class="line">    static const CGFloat color[] = &#123;1, 0, 0, 1&#125;;</div><div class="line">    CGContextSetFillPattern(context, pattern, color);</div><div class="line">    CGPatternRelease(pattern);</div><div class="line">    CGContextFillRect(context, rect);</div><div class="line">&#125;</div><div class="line">void drawStencilPattern(void *info, CGContextRef context) &#123;</div><div class="line">    CGContextAddEllipseInRect(context, CGRectMake(0, 0, 30, 30));</div><div class="line">    CGContextFillPath(context);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161220-1.png" alt="绘制模板样式的运行结果"></p>
<p>代码解释参考上文中着色样式的代码解释。区别1是用下述代码设置样式单元格的颜色：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">static const CGFloat color[] = &#123;1, 0, 0, 1&#125;;</div><div class="line">CGContextSetFillPattern(context, pattern, color);</div></pre></td></tr></table></figure>
<p>区别2是<code>CGPatternCreate</code>函数中传的参数是<code>false</code>。</p>
<h2 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h2><p>阴影有三个属性：x偏移量，y偏移量，模糊度</p>
<p>阴影通过函数<code>CGContextSetShadow</code>设置，指定图形上下文、x偏移量、y偏移量、模糊度。设置阴影后，绘制的对象都会有阴影，阴影的色值为0.3透明度的黑色，颜色RGBA值为{0, 0, 0, 0.3}。</p>
<p>也可以是使用函数<code>CGContextSetShadowWithColor</code>设置彩色阴影。</p>
<p>在调用<code>CGContextSetShadow</code>或<code>CGContextSetShadowWithColor</code>之前保存图形状态，可以通过恢复图形状态来关闭阴影。或者设置阴影颜色为<code>NULL</code>关闭阴影。</p>
<p>分别设置彩色阴影和普通阴影：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">CGContextSaveGState(context);</div><div class="line">CGContextSetShadowWithColor(context, CGSizeMake(10, 10), 2, [UIColor redColor].CGColor);</div><div class="line">CGContextSetRGBFillColor (context, 0, 1, 0, 1);</div><div class="line">CGContextAddEllipseInRect(context, CGRectMake(40, 40, 100, 100));</div><div class="line">CGContextFillPath(context);</div><div class="line">CGContextSetShadow(context, CGSizeMake(10, 10), 2);</div><div class="line">CGContextFillRect(context, CGRectMake(200, 40, 100, 100));</div><div class="line">CGContextRestoreGState(context);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161220-2.png" alt="圆形的红色阴影和矩形的灰色阴影"></p>
<p>x偏移量正值在图形右边，负值在图形左边。y偏移量和坐标有关，在iOS中，UIKit坐标系y轴和Quartz 2D坐标系y轴相反，所以如果是由UIKit创建的图形上下文则正值在图形下面，负值在图形上面。macOS的坐标系和Quartz 2D坐标系一样，所以正值在图形上面，负值在图形下面。阴影绘制不受CTM影响。</p>
<h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>可以使用函数<code>CGShadingRef</code>和<code>CGGradientRef</code>创建渐变。渐变分为轴向渐变和径向渐变。渐变的颜色变化有很多，可以是一种颜色到另一种颜色过度，也可以是多种颜色依次过度变化，还有是一种颜色的透明度<code>alpha</code>变化，但是这种无法绘制到PDF上，无法打印。</p>
<p><code>CGShading</code>和<code>CGGradient</code>的区别：</p>
<table>
<thead>
<tr>
<th style="text-align:left">CGGradient</th>
<th style="text-align:left">CGShading</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">可以使用同一对象绘制轴向和径向梯度</td>
<td style="text-align:left">需要创建单独的对象的轴向和径向梯度</td>
</tr>
<tr>
<td style="text-align:left">在绘图时设置渐变的几何体</td>
<td style="text-align:left">在对象创建时间设置渐变的几何体</td>
</tr>
<tr>
<td style="text-align:left">Quartz计算梯度中每个点的颜色</td>
<td style="text-align:left">需要提供一个回调函数，用来计算渐变中每个点的颜色</td>
</tr>
<tr>
<td style="text-align:left">可以定义两个以上的位置和颜色</td>
<td style="text-align:left">需要设计回调，使用两个以上的位置和颜色</td>
</tr>
</tbody>
</table>
<h3 id="CGGradient"><a href="#CGGradient" class="headerlink" title="CGGradient"></a>CGGradient</h3><p>使用CGGradient创建渐变。</p>
<ol>
<li>首先调用函数<code>CGGradientCreateWithColorComponents</code>创建<code>CGGradient</code>对象，参数含义分别是：颜色空间、颜色数组（采用RGBA颜色）、位置数组（0.0-1.0之间的数值，0.0为轴线起点，1.0为轴线终点。传递NULL默认0为起始位置，1为终点位置，相当于{0.0, 1.0}）、数组中元素个数。</li>
<li>调用<code>CGContextDrawLinearGradient</code>函数绘制轴向渐变或<code>CGContextDrawRadialGradient</code>函数绘制径向渐变，参数含义分别是：图形上下文、<code>CGGradient</code>对象、起始位置、终止位置、绘图选项。</li>
<li>绘制完毕后，释放颜色空间和<code>CGGradient</code>对象。</li>
</ol>
<p>绘制轴向渐变:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">CGFloat compoents[] = &#123;1,0,1,1, 0.3,0.5,1,1.0&#125;;</div><div class="line">CGFloat locations[] = &#123;0.0, 1.0&#125;;</div><div class="line">CGColorSpaceRef colorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);</div><div class="line">CGGradientRef gradient = CGGradientCreateWithColorComponents(colorSpace, compoents, locations, 2);</div><div class="line">CGContextDrawLinearGradient(context, gradient, CGPointMake(0, 0), CGPointMake(0, 100), kCGGradientDrawsBeforeStartLocation);</div><div class="line">CGColorSpaceRelease(colorSpace);</div><div class="line">CGGradientRelease(gradient);</div></pre></td></tr></table></figure>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161221-0.png" alt="使用CGGradient绘制轴向渐变"></p>
<p>绘制径向渐变:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">CGFloat compoents[] = &#123;1,0,1,1, 0.3,0.5,1,1.0&#125;;</div><div class="line">CGFloat locations[] = &#123;0.0, 1.0&#125;;</div><div class="line">CGColorSpaceRef colorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);</div><div class="line">CGGradientRef gradient = CGGradientCreateWithColorComponents(colorSpace, compoents, locations, 2);</div><div class="line">CGContextDrawRadialGradient(context, gradient, CGPointMake(200, 50), 20, CGPointMake(200, 400), 70, kCGGradientDrawsAfterEndLocation);</div><div class="line">CGColorSpaceRelease(colorSpace);</div><div class="line">CGGradientRelease(gradient);</div></pre></td></tr></table></figure>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161221-1.png" alt="使用CGGradient绘制径向渐变"></p>
<h3 id="CGShading"><a href="#CGShading" class="headerlink" title="CGShading"></a>CGShading</h3><p>绘制轴向渐变需要以下步骤：</p>
<ol>
<li>设置 CGFunction 对象来计算颜色值</li>
<li>创建轴向渐变的 CGShading 对象</li>
<li>裁减上下文</li>
<li>使用 CGShading 对象来绘制轴向渐变</li>
<li>释放对象</li>
</ol>
<p>绘制轴向渐变完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    [super drawRect:rect];</div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGFunctionRef functionObj = getFunction(colorspace);</div><div class="line">    CGShadingRef shading = CGShadingCreateAxial(colorspace, CGPointMake(0, 0.5), CGPointMake(1, 0.5), functionObj, false, false);</div><div class="line">    CGAffineTransform myTransform = CGAffineTransformMakeScale(100, 100);</div><div class="line">    CGContextConcatCTM (context, myTransform);</div><div class="line">    CGContextSaveGState (context);</div><div class="line">    CGContextBeginPath(context);</div><div class="line">    CGContextAddArc(context,  .5, .5, .3, 0, M_PI, 0);</div><div class="line">    CGContextClosePath(context);</div><div class="line">    CGContextClip(context);</div><div class="line">    CGContextDrawShading(context, shading);</div><div class="line">    CGShadingRelease(shading);</div><div class="line">    CGColorSpaceRelease(colorspace);</div><div class="line">    CGFunctionRelease(functionObj);</div><div class="line">    CGContextRestoreGState (context);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static CGFunctionRef getFunction(CGColorSpaceRef colorspace) &#123;</div><div class="line">    size_t numComponents = 1 + CGColorSpaceGetNumberOfComponents(colorspace);</div><div class="line">    CGFloat input_value_range[] = &#123;0, 1&#125;;</div><div class="line">    CGFloat output_value_range[] = &#123;0, 1, 0, 0, 0,0,1,1&#125;;</div><div class="line">    CGFunctionCallbacks callbacks = &#123;0, &amp;calculateShadingValues, NULL&#125;;</div><div class="line">    return CGFunctionCreate((void *) numComponents, 1, input_value_range, numComponents, output_value_range, &amp;callbacks);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static void calculateShadingValues(void *info, const CGFloat *in, CGFloat *out) &#123;</div><div class="line">    CGFloat v;</div><div class="line">    size_t k, compoents;</div><div class="line">    static const CGFloat c[] = &#123;1,0,0.5,1&#125;;</div><div class="line">    compoents = (size_t)info;</div><div class="line">    v = *in;</div><div class="line">    for (k = 0; k &lt; compoents - 1; k ++)</div><div class="line">        *out ++ = c[k] * v;</div><div class="line">    *out++ = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161221-2.png" alt="使用CGShading绘制轴向渐变"></p>
<p>绘制径向渐变，需要以下步骤：</p>
<ol>
<li>设置 CGFunction 对象来计算颜色值</li>
<li>创建径向渐变的 CGShading 对象</li>
<li>使用 CGShading 对象来绘制径向渐变</li>
<li>释放对象</li>
</ol>
<p>绘制径向渐变完整代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">- (void)drawRect:(CGRect)rect &#123;</div><div class="line">    [super drawRect:rect];</div><div class="line"></div><div class="line">    CGContextRef context = UIGraphicsGetCurrentContext();</div><div class="line">    </div><div class="line">    CGColorSpaceRef colorspace = CGColorSpaceCreateDeviceRGB();</div><div class="line">    CGFunctionRef functionObj = getFunction(colorspace);</div><div class="line">    CGShadingRef shading = CGShadingCreateRadial(colorspace, CGPointMake(0.25, 0.3), 0.1, CGPointMake(0.7, 0.7), 0.25, functionObj, false, false);</div><div class="line"></div><div class="line">    CGAffineTransform myTransform = CGAffineTransformMakeScale(100, 100);</div><div class="line">    CGContextConcatCTM (context, myTransform);</div><div class="line">    CGContextSaveGState (context);</div><div class="line">    </div><div class="line">    CGContextClipToRect (context, CGRectMake(0, 0, 1, 1));</div><div class="line">    CGContextSetRGBFillColor (context, 1, 1, 1, 1);</div><div class="line">    CGContextFillRect (context, CGRectMake(0, 0, 1, 1));</div><div class="line">    </div><div class="line">    CGContextDrawShading(context, shading);</div><div class="line">    </div><div class="line">    CGShadingRelease(shading);</div><div class="line">    CGColorSpaceRelease(colorspace);</div><div class="line">    CGFunctionRelease(functionObj);</div><div class="line">    CGContextRestoreGState (context);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static CGFunctionRef getFunction(CGColorSpaceRef colorspace) &#123;</div><div class="line">    size_t numComponents = 1 + CGColorSpaceGetNumberOfComponents(colorspace);</div><div class="line">    </div><div class="line">    CGFloat input_value_range[] = &#123;0, 1&#125;;</div><div class="line">    CGFloat output_value_range[] = &#123;0, 1, 0, 0, 0,0,1,1&#125;;</div><div class="line">    </div><div class="line">    CGFunctionCallbacks callbacks = &#123;0, &amp;calculateShadingValues, NULL&#125;;</div><div class="line">    return CGFunctionCreate((void *) numComponents, 1, input_value_range, numComponents, output_value_range, &amp;callbacks);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">static void calculateShadingValues(void *info, const CGFloat *in, CGFloat *out) &#123;</div><div class="line">    </div><div class="line">    size_t k, compoents;</div><div class="line">    double frequency[] = &#123;55, 220, 110, 0&#125;;</div><div class="line">    compoents = (size_t)info;</div><div class="line">    for (k = 0; k &lt; compoents - 1; k ++)</div><div class="line">        *out++ = (1 + sin(*in * frequency[k])) / 2;</div><div class="line">    *out++ = 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oalg33nuc.bkt.clouddn.com/QQ20161221-3.png" alt="使用CGShading绘制径向渐变"></p>
<hr>
<p>参考文章：<a href="http://southpeak.github.io/categories/translate/" target="_blank" rel="external">南峰子翻译的Quartz2D编程指南</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pattern&quot;&gt;&lt;a href=&quot;#Pattern&quot; class=&quot;headerlink&quot; title=&quot;Pattern&quot;&gt;&lt;/a&gt;Pattern&lt;/h2&gt;&lt;p&gt;Pattern可翻译为样式、模型。类似于iOS中自定义的view，可以重复多次把自定义的view添加到控制器的view上。样式(Pattern)是绘制操作的一个序列，可以重复的绘制到一个图形上下文上。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发" scheme="http://markmiao.com/categories/iOS%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Quartz2D" scheme="http://markmiao.com/tags/Quartz2D/"/>
    
  </entry>
  
</feed>
